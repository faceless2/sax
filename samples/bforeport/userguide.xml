<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE pdf PUBLIC "-//big.faceless.org//report" "report-1.1.dtd">

<!--

XML source for the userguide for the Report Generator, version 1.1

-->

<pdf lang="en">
 <head>
  <script>
   <![CDATA[
     function dumpForm()
     {
       var s="";
       s += "Your name is '"+this.getField("name").value+"'\n";
       s += "Your country is '"+this.getField("country").value+"'\n";
       s += "Your sex is '"+this.getField("sex").value+"'\n";
       app.alert(s);
     }
   ]]>
  </script>
  <meta name="author" value="Big Faceless Organization"/>
  <meta name="subject" value="User Guide for the Big Faceless Report Generator"/>
  <meta name="title" value="User Guide"/>
  <meta name="layout" value="one-column"/>
  <meta name="show-bookmarks" value="true"/>
  <meta name="output-profile" value="PDF/UA1"/>

  <style type="text/css">
   body { font-size:10pt; font-family: Times, Symbol; word-break: normal; line-break: normal }
   .example { border:1; margin:5; padding:8; background-color:#E0E0FF; font-size:10pt; page-break-inside:avoid; page-break-before:avoid }
   .sexample { border:1; margin:4; padding:4; background-color:#E0E0FF; font-size:9pt; page-break-inside:avoid; page-break-before:avoid }
   .linelist { marker-prefix:'Line '; marker-offset:4em; }
   .linelist > li { padding-left:4em; }
   .envlist { marker-offset:9em; marker-font-weight:bold; }
   .envlist > li { padding-left:9em; }
   .defntable { border:1; background-color:#FFFFE0; cellpadding:4; }
   .defntable th { background-color:#F0F0D0; border-bottom:1; font-style:italic; }
   .defntable td:first-child { font-family:Courier; padding-right:0.2in; white-space:nowrap }
   #TableFormSubmit th { background-color: transparent; border-bottom: none; font-style: normal }

   #colortable { cellpadding-top:1.6; cellpadding-bottom:0; cellmargin:2; cellborder:1; font:7pt/7pt Helvetica; }
   #colortable .dark { color:white; }
   #colortable .light { color:black; }
   #colortable p { align:center; }

   .sizetable { background-color:#FFFFE0; cellpadding:4; }
   .sizetable tr:last-child { border-bottom:1; }
   .sizetable th { background-color:#F0F0D0; border-bottom:1; border-top:1; font-style:italic; }
   .sizetable .key { border-left:1; }
   .sizetable td:last-child { border-right:1; }
   .sizetable th:last-child { border-right:1; }
   .note { margin-left:10; margin-right:10; padding:10; corner-radius:10; border:1; background-color:pattern(star,#FFE0E0,#FFD4D4,50); font-size:10; font:Helvetica; font-style:italic; }
   h1 { page-break-before:always; font-family:Helvetica; }
   h2 { width:100%; border-top: thin solid black; padding-top:1em;  }
   h1 + h2, h2:first-child { border-top:none; padding-top: 0; }
   tt { requote: false }
   #page1 { footer-height: 0; footer: none }
   body { footer: footer; footer-height: 25; }
  </style>

  <bookmarklist>
   <bookmark href="#introduction" name="Introduction">
    <bookmark href="#whatisit" name="What is it?"/>
    <bookmark href="#features" name="Features"/>
   </bookmark>
   <bookmark href="#gettingstarted" expanded="true" name="Getting Started">
    <bookmark href="#installation" name="Installation"/>
    <bookmark href="#fromapplications" name="Creating PDFs from Applications"/>
    <bookmark href="#fromfilter" name="Creating PDFs using the Servlet 2.3 Filter"/>
    <bookmark href="#fromproxy" name="Creating PDFs using the Proxy Servlet"/>
    <bookmark href="#fromxsl" name="Creating PDFs using a transformer"/>
    <bookmark href="#https" name="Requesting PDF documents via HTTPS"/>
   </bookmark>
   <bookmark href="#creatingxml" name="Creating the XML">
    <bookmark href="#simpleexample" name="A simple example"/>
    <bookmark href="#dynamicexample" name="Creating dynamic reports"/>
    <bookmark href="#doctype" name="The DOCTYPE declaration"/>
    <bookmark href="#namespaces" name="Namespaces: Embedding XML metadata"/>
   </bookmark>
   <bookmark href="#styles" name="Styles">
    <bookmark href="#stylesheets" name="Stylesheet definitions">
     <bookmark href="#matchtypes" name="Matching certain types of element"/>
     <bookmark href="#matchclass" name="Classes and ID's"/>
     <bookmark href="#matchkids" name="Descendants, Children and Siblings"/>
     <bookmark href="#matchgroups" name="Grouping"/>
     <bookmark href="#matchlanguages" name="Language and Attribute Selectors"/>
    </bookmark>
    <bookmark href="#applystyles" name="Applying Stylesheets"/>
   </bookmark>
   <bookmark href="#elements" name="Elements" expanded="true">
    <bookmark href="#structure" name="Document Structure">
     <bookmark href="#pagination" name="Pagination"/>
     <bookmark href="#macros" name="Headers, Footers and Macros">
      <bookmark href="#pagenumber" name="Displaying the Page number"/>
     </bookmark>
     <bookmark href="#pagesizes" name="Page Sizes"/>
    </bookmark>
     <bookmark href="#head" name="The Document Head">
      <bookmark href="#meta" name="Meta-information"/>
      <bookmark href="#bookmarks" name="Bookmarks"/>
     </bookmark>
     <bookmark href="#boxmodel" name="Box Model" expanded="true">
      <bookmark href="#padding" name="Padding, Margins and Borders"/>
      <bookmark href="#background" name="Drawing the Background"/>
      <bookmark href="#backgroundpdf" name="Building on existing PDFs"/>
      <bookmark href="#positioning" name="Positioning"/>
      <bookmark href="#clipping" name="Clipping"/>
     </bookmark>
     <bookmark href="#textfonts" name="Text and Fonts">
      <bookmark href="#text" name="Text Elements"/>
      <bookmark href="#anonpara" name="Anonymous Paragraphs"/>
      <bookmark href="#displayinline" name="Displaying inline blocks"/>
      <bookmark href="#verticalalign" name="Vertical alignment"/>
      <bookmark href="#float" name="Float Positioning"/>
      <bookmark href="#textatts" name="Text Attributes"/>
      <bookmark href="#fonts" name="Fonts">
       <bookmark href="#standardfonts" name="Built-in fonts"/>
       <bookmark href="#opentype" name="OpenType and WOFF fonts"/>
       <bookmark href="#type1" name="Type 1 fonts"/>
      </bookmark>
     </bookmark>
     <bookmark href="#tables" name="Tables">
      <bookmark href="#tablepagination" name="Tables on multiple pages"/>
      <bookmark href="#tablelayout" name="Table Layout Algorithms"/>
     </bookmark>
     <bookmark href="#lists" name="Lists">
     </bookmark>
     <bookmark href="#images" name="Images"/>
     <bookmark href="#barcodes" name="Barcodes"/>
     <bookmark href="#genericblock" name="Generic Blocks and Vector Graphics "/>
     <bookmark href="#graphs" name="Graphs">
      <bookmark href="#graphatts" name="Graphs Attributes"/>
      <bookmark href="#piegraph" name="Pie Graphs"/>
      <bookmark href="#axesgraph" name="Axes Graphs">
       <bookmark href="#graphformatter" name="Formatting the axes"/>
      </bookmark>
      <bookmark href="#bargraph" name="Bar Graphs"/>
      <bookmark href="#depthbargraph" name="Depth Bar Graphs"/>
      <bookmark href="#multibargraph" name="Multi Bar Graphs"/>
      <bookmark href="#towerbargraph" name="Tower Bar Graphs"/>
      <bookmark href="#linegraph" name="Line Graphs"/>
      <bookmark href="#areagraph" name="Area Graphs"/>
     </bookmark>
   </bookmark>
   <bookmark href="#colors" name="Colors">
    <bookmark href="#colorspaces" name="Color Spaces"/>
   </bookmark>
   <bookmark href="#hyperlinks" name="Hyperlinks"/>
   <bookmark href="#forms" name="Interactive Forms">
     <bookmark href="#javascript" name="JavaScript"/>
     <bookmark href="#digsigs" name="Digital Signatures"/>
   </bookmark>
   <bookmark href="#pdfa" name="PDF/A and PDF/UA"/>
   <bookmark href="#migrating" name="Migrating from HTML"/>
   <bookmark href="#i18n" name="Internationalization"/>
   <bookmark href="#problems" name="Known problems, limitations and direction"/>
   <bookmark href="#reference" name="Appendices" expanded="true">
    <bookmark href="#refcolor" name="Appendix A: Named Colors"/>
    <bookmark href="#refentity" name="Appendix B: Named Entities"/>
    <bookmark href="#reftags" name="Appendix C: Element and Attribute Reference"/>
   </bookmark>
  </bookmarklist>

  <macrolist>
   <macro id="nofooter">
    <p font-size="9" width="100%" border-top="1" padding-top="5" margin-top="5" align="center">
    </p>
  </macro>
   <macro id="footer">
    <p font-size="9" width="100%" border-top="1" padding-top="5" margin-top="5" align="center">
      Page <pagenumber/> of <totalpages/>
    </p>
   </macro>
   <macro id="page1watermark">
    <img width="612" height="131" position="absolute" src="resources/reportgen.jpg" alt="Report Generator Logo"/>
   </macro>
  </macrolist>
 </head>
  
 <body size="letter" requote="true">
  
  <h1 padding-top="130" font-size="32" width="100%" height="50%" align="center">
   The Big Faceless Report Generator
   <br/>
   <br/>
   User Guide
   <br/>
   <br/>
   <small>Version 1.1.63</small>
  </h1>

  <pbr footer="footer" footer-height="25"/>

  <h1 id="introduction">Introduction</h1>
   <p>
    Thank you for your interest in the <a
    href="http://bfo.com/products/report">Big Faceless Report Generator</a>.
    This userguide will give you an overview of how to use the product, and start you
    off with some simple examples. For more detailed and up-to-date information,
    please visit the product homepage at <a href="http://bfo.com/products/report">http://bfo.com/products/report</a>.
   </p>
  <h2 id="whatisit">What is it?</h2>
  <p>
   The Report Generator is a java application for converting source documents
   written in XML to PDF. Build on top of our popular PDF and Graph libraries,
   the Report Generator combines the features of the two and wraps an XML parser
   around them. Thanks to this, it is now possible to create a PDF report direct
   from a database with <b>little or no Java experience</b>.
  </p>
  <h2 id="features">Features</h2>
  <p>
   Here's a brief summary of the generator's features
  </p>
  <ul>
   <li>
    Create dynamic reports using JSP's, ASP's, XSLT - whatever you would normally use to create dynamic HTML pages
   </li>
   <li>
    Simple HTML-style XML syntax makes migration for HTML reports (and HTML programmers) relatively painless
   </li>
   <li>
    Use Cascading Style Sheets (level 2) to control the document look-and-feel
   </li>
   <li>
    Build Reports on top of existing PDF documents (Extended Edition only)
   </li>
   <li>
    Full support for autosized, nested tables, lists, hyperlinks, images and other familar HTML features
   </li>
   <li>
    Inline generation of graphs and charts, in full shaded 3D!
   </li>
   <li>
    Embed XML metadata directly in the PDF, following Adobes XMP&trade; specification
   </li>
   <li>
    Native Unicode support. No worrying about codepages, encodings and so on, it <i>just works</i>
   </li>
   <li>
    Embed and subset OpenType and Type 1 fonts, or use one of the 14 latin or 8 east-asian built in fonts
   </li>
   <li>
    40 and 128-bit PDF Encryption, for eyes only documents. Digital signatures too.
   </li>
   <li>
    Auto-pagination of content with headers, footers and watermarks
   </li>
   <li>
    Use ICC color profiles, spot color and patterns for sophisticated color control
   </li>
   <li>
    Draw barcodes and simple vector graphics directly into the document using XML elements
   </li>
  </ul>
  <p>
   The generator is written in 100% pure Java and requires only JDK 1.5 or better to run.
   It is supplied with three methods to create the PDF documents - a Servlet Filter,
   a Servlet or a Standalone application - and installs easily into any Java environment.
  </p>

  <h1 id="gettingstarted">Getting Started</h1>

  <h2 id="installation">Installation</h2>
  <p id="lastp">
   <div width="40%" float="right" class="note">
    <p>
     Be sure to remove any previous versions of the "bforeport.jar" from the
     CLASSPATH, as well as the "bfopdf.jar" files from our PDF library product,
     otherwise exceptions during class initialization may result.
    </p>
   </div>
   Installing the package is a simple matter of unzipping the distribution file and adding the
   <code>bforeport.jar</code> file to your CLASSPATH. You will also need a SAX parser - Java 1.4
   and above are supplied with one, but for those forced to run older JVMs we recommend Xerces.
   <br/><br/>
   Several other files are supplied with the package. As well as this userguide
   and the API documentation under the <code>docs</code> directory, two sample
   applications are included in the <code>example</code> directory - a standalone
   XML to PDF application, and a Java Servlet. Several sample XML documents are
   in <code>example/samples</code>, and several dynamic samples which require a
   Servlet engine are under <code>examples/dynamic</code>.
   <br/><br/>
   For all modern webservers, it is enough to copy the <code>bforeport.jar</code> file to the
   <code>WEB-INF/lib</code> directory of your web application and then set up the
   <code>WEB-INF/web.xml</code> file to use either the Filter or the ProxyServlet method of calling
   the Report Generator, depending on whether your WebServer supports version 2.3 of the Servlet
   Specification or not. To find out, we'd suggest trying the filter method first. If it doesn't
   work, fall back to the Proxy Servlet.
  </p>

  <h2 id="fromapplications">Creating PDFs from Applications</h2>
  <p>
   The API for the report generator is extremely simple. Generally you only
   require three lines to be added to your program to create a PDF Report from
   XML.
  </p>
  <p>
   A simple example of this is the <code>SampleApplication.java</code> example,
   supplied with the package in the <code>example</code> directory. To use it,
   first, ensure the <code>CLASSPATH</code> is set to include your SAX parser,
   then run the command:
  </p>
  <pre>
   C:\BFOREPORT\EXAMPLE> java SampleApplication samples\HelloWorld.xml </pre>
  <p>
   This creates the PDF document <code>samples\HelloWorld.pdf</code>, which you can
   check with your PDF viewer.
  </p>
  <p>
   To add PDF producing code to your own package is simple. Here's an example
   method which would take the URL of an XML file and an
   <code>OutputStream</code> to write the PDF to. The PDF specific lines are in
   <b>bold</b>
  </p>

  <pre class="example">
  import java.io.*;
  <b>import org.faceless.report.ReportParser;</b>
  <b>import org.faceless.pdf.PDF;</b>

  public void createPDF(String xmlfile, OutputStream out)
  {
      <b>ReportParser parser = ReportParser.getInstance();</b>
      <b>PDF pdf = parser.parse(xmlfile);</b>
      <b>pdf.render(out);</b>
      out.close();
  } </pre>

  <h2 id="fromfilter" page-break-before="always">Creating PDFs using the Servlet 2.3 Filter</h2>
  <p>
   For servlet environments running the Servlet 2.3 or later environment, such as Tomcat,
   the recommended way to create dynamic PDF documents is using the <i>Filter</i>
   included in the JAR file supplied with the package. More information on
   filters is available from <a
   href="http://java.sun.com/products/servlet/Filters.html">http://java.sun.com/products/servlet/Filters.html</a>.
   To use it, the <code>WEB-INF/web.xml</code> file needs to be edited to map
   the PDF Filter to certain requests.
  </p>
  <p>
   Here's an example <code>web.xml</code> file which maps any requests to
   <code>/pdf/*</code> to be run through the PDF filter. Lines specific to the PDF
   filter are in <b>bold</b>.
  </p>

  <pre class="example" id="badxample">
  &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
  &lt;!DOCTYPE web-app PUBLIC
      "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
      "http://java.sun.com/dtd/web-app_2_3.dtd"
  &gt;

  &lt;web-app&gt;

    <b>&lt;filter&gt;
      &lt;filter-name&gt;pdffilter&lt;/filter-name&gt;
      &lt;filter-class&gt;org.faceless.report.PDFFilter&lt;/filter-class&gt;
    &lt;/filter&gt;

    &lt;filter-mapping&gt;
      &lt;filter-name&gt;pdffilter&lt;/filter-name&gt;
      &lt;url-pattern&gt;/pdf/*&lt;/url-pattern&gt;
    &lt;/filter-mapping&gt;</b>

  &lt;/web-app&gt; </pre>

  <p>
   Once this rule is added to <code>web.xml</code> and the servlet engine restarted,
   an XML document will be automatically converted to PDF before it is returned to the
   browser. For example, to convert the file <code>/pdf/HelloWorld.xml</code> to a PDF and
   view it in the browser, simply load the URL <code>http://yourdomain.com/pdf/HelloWorld.xml</code>.
  </p>
  <p>
   Only files with a mime-type of <code>text/xml</code> will be processed, so
   images and other non-xml files in this path will be returned unaltered. See
   the <a
   href="http://bfo.com/products/report/docs/api/org/faceless/report/PDFFilter.html">API
   documentation</a> for more detailed information.
  </p>
  <p>
   If the XML file is being returned directly to the browser rather than being converted
   to PDF, this is probably caused by the mime-type not being set correctly. For dynamic XML
   documents like those created from JSP or CGI, the mime-type must be explicitly set by the
   document author. For static files, the <code>.xml</code> extension must be mapped to the
   <code>text/xml</code> mimetype - this is done by adding the following block to your
   <code>web.xml</code> file:
  </p>
  <pre class="example">
    &lt;mime-mapping&gt;
      &lt;extension&gt;xml&lt;/extension&gt;
      &lt;mime-type&gt;text/xml&lt;/mime-type&gt;
    &lt;/mime-mapping&gt; </pre>

  <h2 id="fromproxy">Creating PDFs using the Proxy Servlet</h2>
  <p>
   The other option when displaying dynamic PDFs from a Servlet is to use the
   <i>Proxy Servlet</i>.  As the name suggests, this is a servlet which relays
   HTTP requests from a browser, reads the response and converts it to a PDF
   before sending it back to the browser.
  </p>
  <p>
   Although the "filter" method described previously is much simpler to install and
   use, the proxy servlet has a couple of advantages:
  </p>
  <ul>
   <li>
    Can be used by Servlet engines supporting only the Servlet 2.2 specification
   </li>
   <li>
    Can proxy requests to different webservers, or even different domains - although
    care must be taken when doing this, as session information may not be passed on.
   </li>
  </ul>
  <p>
   The disadvantages are mainly that it requires the abstract
   <code>PDFProxyServlet</code> servlet to be extended and the
   <code>getProxyURL</code> method implemented - so you have to write some code
   before you can use it. Also, the current version doesn't support the POST method
   for proxying requests.
  </p>
  <p>
   An example proxy servlet called <code>SampleServlet.java</code> is supplied
   with the package in the <code>example</code> directory. Only the
   <code>getProxyURL</code> method needs to be implemented - the contract for
   this method is "given the incoming <code>HttpServletRequest</code>, return the
   absolute URL of the XML document to be converted or <code>null</code> if an
   error occurred".
  </p>
  <p>
   Here's the method from the supplied <code>SampleServlet</code>, which extracts
   the XML documents URL from the "PathInfo" of the request - this is anything in
   the URL path to the right of "/servlet/SampleServlet".
  </p>

  <pre class="example">
  public String getProxyURL(HttpServletRequest req, HttpServletResponse res)
      throws ServletException, IOException
  {
      URL url=null;
      String query = req.getPathInfo();
      try {
	  if (query==null) throw new MalformedURLException();
          URL thisurl = new URL(HttpUtils.getRequestURL(req).toString());
          url = new URL(thisurl, res.encodeURL(query));
      } catch (MalformedURLException e) {
          res.sendError(404, "Invalid URL \""+query+"\"");
      }
      return url.toString();
  } </pre>

  <p align="left">
   With this example, if the servlet was placed in the <code>WEB-INF/classes</code>
   directory as <code>SampleServlet.class</code>, then to load and convert an
   example called <code>/HelloWorld.xml</code> just enter the URL
   <code>http://yourdomain.com/servlet/SampleServlet/HelloWorld.xml</code>.
  </p>
  <p>
   Obviously this is a simple example, and it's fully expected that smarter proxies
   will be written with error checking and the like. The main things to remember when
   implementing this method are:
  </p>
  <ul>
   <li>
    The returned URL must be <b>absolute</b>. Here we ensure this by making
    the requested URL relative to <code>thisurl</code>, which is the URL of the
    current request.
   </li>
   <li>
    If something goes wrong, this method should return <code>null</code> and an
    error should written to the <code>HttpServletResponse</code>.
   </li>
  </ul>
  <p>
   For those requiring more complete control over the conversion process, source
   code for the <code>PDFProxyServlet</code> is supplied in the <code>docs</code>
   directory.
  </p>

  <h2 id="fromxsl">Creating PDFs using a transformer</h2>
  <p>
   When the XML to be converted is a result of one or more transformations, the PDF
   can be created as the end result of the chain. The transformations can
   either be a handwritten <code>XMLFilter</code>, like the
   <code>SampleTransformer.java</code> example supplied with the package, or the
   result of an XSL transformation.  This saves having to serialize and deserialize
   the XML, although it does require at least a SAX 2.0 parser. Here's an example,
   which is also supplied with the download package as
   <code>SampleTransformer.java</code>:
  </p>
  <pre class="example">
  import java.io.*;
  <b>import org.faceless.report.ReportParser;</b>
  <b>import org.faceless.pdf.PDF;</b>
  import org.xml.sax.*;
  import org.xml.sax.helpers.*;

  public void createPDF(String xmlfile, OutputStream out)
      throws TransformerException, IOException
  {
      <i>// Create your filter, either explicitly or using
      // the SAXTransformerFactory.newXMLFilter() method
      //</i>
      XMLReader reader = XMLReaderFactory.createXMLReader();
      XMLFilter filter = new MyFilter(reader);

      InputSource source = new InputSource(xmlfile);
      <b>ReportParser parser = ReportParser.getInstance();</b>
      <b>PDF pdf = parser.parse(filter, source);</b>
      <b>pdf.render(out);</b>
      out.close();
  } </pre>
  <h2 id="https">Requesting PDF documents via HTTPS</h2>
  <p>
   Whether using the Proxy Servlet or the Filter, in principle requesting a PDF document over an
   SSL encrypted session is identical to requests using normal HTTP. In practice however, many web
   servers are only set up to handle <i>incoming</i> HTTPS requests, not outgoing. This is easy to
   test - add the line
  </p>
  <pre>
   java.net.URL url = new java.net.URL("https://localhost");
  </pre>
  <p>
   to any servlet or JSP, and run it. If you get a <code>MalformedURLException</code> complaining
   of <code>unknown protocol: https</code>, then your web server isn't set up to allow outgoing
   HTTPS requests - more specifically, this is caused by the HTTPS protocol handler either not being
   installed or not being registered with the web-application security handler.
  </p>
  <p>
   Prior to version 1.1 this was an irritating problem. Any relative links in the document are
   relative to the base URL of the document, and if it was requested via an HTTPS URL, these links
   will themselves be HTTPS (in practice, even documents with no relative links were causing
   problems, as the SAX parsing routines require a base URL regardless).  In version 1.1 we added a
   couple of ways to workaround this issue.  The first is all done behind the scenes. If a PDF
   is requested via HTTPS, but the webserver can't handle outgoing HTTPS requests, the base URL of
   the document is internally downgraded to HTTP. This isn't a security risk, because any requests
   to relative URLs for images, stylesheets and so on are all made from the <i>server to the
   server</i> - ie. the requests are made to <code>localhost</code>. The completed PDF is still
   sent back to the browser over a secure link.
  </p>
  <p>
   If you don't like this, or for some reason it won't work (for example, because your webserver <i>only</i>
   handles HTTPS and not HTTP), there are a couple of other options. First, you can
   install the JSSE package and register the HTTPS protocol handler (this was the only option for
   earlier versions of the Report Generator).  This can be done either by upgrading to Java 1.4,
   which includes JSSE1.0.3, or by installing it separately. The broad details on how to do this
   are on the JSSE website at
   <a href="http://java.sun.com/products/jsse/install.html">http://java.sun.com/products/jsse/install.html</a>
   - you can probably find specific instructions for your webserver through your normal support
   channels.
  </p>
  <p>
   Please remember this problem is <i>not specific to the report generator</i>, but applies to
   any web application that needs to create an HTTPS URL. Although every webserver will have a different
   way of doing this, we did find some Tomcat 4.0 specific instructions at <a
   href="http://www.planetsaturn.pwp.blueyonder.co.uk/tomcatandhttps">http://www.planetsaturn.pwp.blueyonder.co.uk/tomcatandhttps</a>)
   which you may be able to adapt if you can't find anything for your server.
  </p>
  <p>
   The second option is much simpler. You can use the new <code>base</code> meta tag to set the
   base URL of the document to any value you like. For example, to get all relative links in the
   document to load from the filesystem, rather than via the webserver, add something like this to
   your code, immediately after the <code>&lt;head&gt;</code> tag:
  </p>
  <pre class="example">
  &lt;pdf&gt;
    &lt;head&gt;
      <b>&lt;meta name="base" value="file:/path/to/webapplication"/&gt;</b>
    &lt;/head&gt;
  </pre>
  <p>
   This will cause relative links in your document like &lt;img src="images/logo.gif"/&gt; to be resolved
   as <code>file:/path/to/webapplication/images/logo.gif</code>.
  </p>



  <h1 id="creatingxml">Creating the XML</h1>
  <h2 id="simpleexample">A simple example</h2>

  <pre class="example">
  1.  &lt;?xml version="1.0"?&gt;
  2.  &lt;!DOCTYPE pdf PUBLIC "-//big.faceless.org//report" "report-1.1.dtd"&gt;
  3.
  4.  &lt;pdf&gt;
  5.    &lt;head&gt;
  6.      &lt;meta name="title" value="My First Document"/&gt;
  7.    &lt;/head&gt;
  8.    &lt;body background-color="yellow" font-size="18"&gt;
  9.      Hello, World!
  10.   &lt;/body&gt;
  11. &lt;/pdf&gt; </pre>

  <p>
   This simple document creates a single page PDF with the text "Hello, World!"
   in 18pt text at the top of the first page. Barring the first two lines, it
   should look fairly familiar to anyone that's ever created an HTML page.
  </p>
  <p>
   Although it's simple, there are a couple of key points here. Let's go through
   this example a line at a time.
  </p>
  <ol class="linelist">
   <li value="1">
    the XML declaration <code>&lt;?xml version="1.0"?&gt;</code> must always be
    included as the <i>very first line</i> of the file.
   </li>
   <li value="2">
   <p>
    the DOCTYPE declaration tells the XML parser which DTD to use to validate the
    XML against. See <a href="#doctype">here</a> for more information on DTDs.
   </p>
   </li>
   <li value="4">
    the top level element of the XML document must always be <code>pdf</code>.
   </li>
   <li value="5">
    like HTML, the document consists of a "head", containing information <i>about</i>
    the document, and a "body" containing the <i>contents</i> of the document.
   </li>
   <li value="6">
    a trap for HTML authors. In XML an element must always be "closed" - this means
    that <code>&lt;pdf&gt;</code> must always be matched by
    <code>&lt;/pdf&gt;</code>, <code>&lt;b&gt;</code> by <code>&lt;/b&gt;</code> and
    so on.  When an element has no content, like <code>&lt;br&gt;</code>, &lt;img&gt;
    or <code>&lt;meta&gt;</code>, it may close itself by writing it as we've done
    here - <code>&lt;meta/&gt;</code>
   </li>
   <li value="8">
    The <code>&lt;body&gt;</code> element has some attributes set -
    <code>background-color</code> and <code>font-size</code>. In XML, every
    attribute value must be quoted - this can be frustrating for HTML authors used
     to typing <code>&lt;table width=100%&gt;</code>.
   </li>
  </ol>

  <h2 id="dynamicexample">Creating Dynamic Reports</h2>
  <p>
   A report generator isn't much use if it can't create reports based on dynamic
   data - creating customer account statements on-the-fly from database queries,
   for example.
  </p>
  <p>
   Rather than use custom elements to query the database and include the results,
   we've gone with a much more flexible solution and
   separated the <i>generation</i> from the <i>PDF conversion</i>. This means
   you can use your favorite technology to create the dynamic XML - we prefer
   JSP, but ASP, XSLT, CGI or any other solution will do - and the Filter or
   Proxy Servlet will convert that to PDF transparently.
  </p>
  <p>
   Here's an example showing how to create a PDF with the current date from a
   JSP. There are some more examples in the <code>examples/dynamic</code>
   directory of the download package.
  </p>

  <pre class="example">
  1.  &lt;?xml version="1.0"?&gt;
  2.  <b>&lt;%@ page language="java" contentType="text/xml; charset=UTF-8"%&gt;</b>
  3.  &lt;!DOCTYPE pdf PUBLIC "-//big.faceless.org//report" "report-1.1.dtd"&gt;
  4.
  5.  &lt;pdf&gt;
  6.    &lt;body font-size="18"&gt;
  7.      <b>Today is &lt;%=new java.util.Date()%&gt;</b>
  8.    &lt;/body&gt;
  9.  &lt;/pdf&gt; </pre>

  <p>
   This is very similar to the previous example. We've marked the two changes in
   bold.
  </p>
  <p>
   The first one is the most important. You need to set the page Content-Type to
   <code>text/xml</code>, in order for it to be converted to a PDF. You should
   also set the <code>charset</code> to UTF-8, like we've done here. This is
   because of an important difference between HTML and XML - the default
   characterset for HTML (and therefore for JSPs) is ISO-8859-1, but the default
   for XML is UTF-8. Of course, if you're only using 7-bit ASCII characters
   characters you can leave this out, but it's a good idea to do it anyway.
  </p>
  <p>
   You may have noticed that the JSP <code>page</code> directive is the second
   line, rather than the first (as is normally the case with JSP's) - this is
   because the <code>&lt;?xml</code> directive must be on the first line of the
   XML - most SAX parsers will throw an error if it's not.
  </p>
  <p>
   The second change is on line 7, where we print the current date using a JSP
   directive. By now we hope it's fairly clear that creating a dynamic report is
   basically the same as creating a dynamic HTML document - provided the XML
   syntax is adhered to.
  </p>

  <h2 id="doctype">The DOCTYPE declaration</h2>
  <p>
   A quick word about the DOCTYPE declaration (the third line in the example
   above). The DOCTYPE, or DTD, is used by the XML parser to store information
   about the structure of the document - which elements can contain which, and so on.
   The XML document refers to the DTD using two strings - the "public" identifier
   and the "system" identifier, which are the values
   "<code>-//big.faceless.org//report</code>" and "<code>report-1.1.dtd</code>" in
   the example above.
  </p>
  <p>
   In practise, XML documents include a DTD for two main reasons:
  </p>
  <ul>
   <li>To automatically validate the XML document against the DTD</li>
   <li>To convert named entities like <code>&amp;nbsp;</code> into character values</li>
  </ul>
  <p>
   XML validation isn't used in this package (we do our own validation instead),
   so the main reason this is required is to convert named entities (see <a
   href="#refentity">Appendix B</a> for a list of named entities understood by the Report
   Generator DTD). If you don't use any, you can leave the DOCTYPE line out with
   no ill effect.
  </p>
  <p>
   The actual DTD is stored in the JAR file. The Report Generator
   recognises the public identifier "<code>-//big.faceless.org//report</code>" and
   loads the DTD directly from the JAR, so most of the time you won't need to worry about
   it. As always, there are a couple of exceptions to this:
  </p>
  <ul>
   <li>
    Several XML parsers (including Allaire JRun 3.1 and Caucho Resin up to 2.1.3) are
    unable to load a DTD from a JAR, and requires the DTD to be loaded from a URL
   </li>
   <li>
    When creating a PDF from a <code>javax.xml.transform.Source</code> using the
    <code>transform</code> method, the DTD cannot be read from the jar, and must
    be loaded from a URL.
   </li>
   <li>
    If you're trying to examine or edit the XML using a "smart" XML tool,
    like Internet Explorer 5 (we use the term "smart" loosely), the DTD needs to
    be accessible.
   </li>
  </ul>
  <p>
   In all these cases, the DTD will be loaded from the URL specified by the
   "system" identifier. As the DTD file is supplied in the <tt>docs</tt>
   directory of the download package, it can be copied into an appropriate
   directory for your webserver to serve. An alternative is to reference the DTD
   directly from the Big Faceless Organization web server by changing the DOCTYPE
   declaration to this:
  </p>

  <pre class="example">
  &lt;!DOCTYPE pdf PUBLIC "-//big.faceless.org//report"
    "http://bfo.com/products/report/report-1.1.dtd"&gt;
  </pre>
  <p>
   <b>(this is not recommended for regular use, as loading it from a remote server
   will slow down the parsing process)</b>
  </p>

  <h2 id="namespaces">Namespaces: Embedding XML Metadata</h2>
  <p>
   One of the new features adding in SAX version 2 was the concept of XML
   "namespaces". Namespaces don't play a major role in the Report Generator, as
   the end result is a PDF rather than another XML document. The role they do
   have relates to XML Metadata, which, with the arrival of Acrobat 5.0, can be
   embedded directly into a PDF document for later extraction. Adobe call this
   XMP, and more information on this is available at <a
   href="http://www.adobe.com/products/xmp">http://www.adobe.com/products/xmp</a>.
  </p>
  <p>
   The Report Generator automatically recognises whether a SAX 2.0 parser is being
   used, and will become "namespace aware" if it is. In this case, any elements
   with a namespace other than
   <code>http://big.faceless.org/products/report</code> will be considered as XMP
   metadata, and will be embedded as-is into the PDF document. (Note that this is
   the default namespace for any element without a namespace explicitly specified).
   Because of the way this works, XMP metadata <i>cannot</i> be embedded with a
   SAX 1.0 parser - an error will be thrown instead. As it's very difficult to
   work with XMP <i>without</i> using namespaces, this shouldn't be a concern.
  </p>
  <p>
   Not every structure in a PDF document can contain XML metadata - currently,
   the only tags that will accept it are &lt;pdf&gt; (to specify metadata about
   the entire document), &lt;img&gt; (to specify metadata about an image),
   &lt;body&gt; (to specify metadata about the first page) and &lt;pbr&gt; (to
   specify metadata about the following page). Metadata that is specified on any
   other tag will be silently dropped.
  </p>
  <p>
   Here's a brief example showing how this could be put to use - an image is
   embedded in a document along with information on from whence it came. Content
   in <b>bold</b> is <i>not</i> embedded as metadata but is parsed and processed
   by the Report Generator
  </p>
  <pre class="example">
 <b>&lt;img src="resources/canoe.jpg"&gt;</b>
   &lt;rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
               xmlns:dc="http://purl.org/dc/elements/1.1"
               xmlns:tc="http://www.w3.org/2000/PhotoRDF/technical-1-0#"&gt;
     &lt;rdf:Description about=""&gt;
      &lt;dc:type&gt;image&lt;/dc:type&gt;
      &lt;dc:title&gt;Fishing Boat&lt;/dc:title&gt;
      &lt;dc:description&gt;Photo of a boat on the coast in Ghana&lt;/dc:description&gt;
      &lt;dc:creator&gt;mike@bfo.com&lt;/dc:creator&gt;
      &lt;dc:date&gt;1999-04-20&lt;/dc:date&gt;
      &lt;tc:camera&gt;Canon EOS 100&lt;/tc:camera&gt;
      &lt;tc:lens&gt;Sigma 28mm&lt;/tc:lens&gt;
     &lt;/rdf:Description&gt;
   &lt;/rdf:RDF&gt;
 <b>&lt;/img&gt;</b>
  </pre>
  <p>
   For a full example have a look at the <code>MetaData.xml</code> example in the
   download package.
  </p>


  <h1 id="styles">Styles</h1>
  <p>
   The look and feel of a document is defined using Cascading Stylesheets (level
   2), or <i>CSS2</i> - the same system used by HTML. The full CSS2
   specification is online at <a
   href="http://www.w3.org/TR/REC-CSS2">http://www.w3.org/TR/REC-CSS2</a>, and
   unlike many specifications it's clear enough to be understood by mere mortals
   - we recommend reading it. We support most, but not all of the specification -
   see the appendices for details.
  </p>
  <p>
   The first way to set the style for an element is inline. Unlike HTML,
   there is no difference between a "style" attribute and a regular attribute -
   whereas in HTML to specify an inline style you must write <tt>&lt;table
   style="background-color:red"&gt;</tt>, in XML you could simply write
   <tt>&lt;table background-color="red"&gt;</tt>. All the examples up until now
   have used inline styles.
  </p>
  <p>
   Although in many cases this method is appropriate, if the same style is used
   more than once in a document it's generally easier to use a "stylesheet" - a
   collection of CSS2 rules defined in the HEAD of the document which set
   attributes for various elements in the BODY.
  </p>
  <h2 id="stylesheets">Stylesheet definitions</h2>
  <p>
   Stylesheets can be included directly in the document or linked in from an external file.
   In both cases the syntax is the same.  A <i>Stylesheet</i> consists of one or more
   (selector, attribute) pairs - each <i>selector</i> matching certain elements
   in the document, and the <i>attributes</i> defining which attributes to set
   for those elements. Here's an example:
  </p>

  <pre class="example">
  body      { size:Letter; padding:0.5in; }
  H1, H2    { font-family:Times; }
  .example  { background-color:yellow; } </pre>

  <p>
   This example sets the "size" attribute for the BODY element to "Letter" and
   it's "padding" attribute to "0.5in", sets the "font-family" attribute for all
   H1 and H2 elements to "Times" and sets the background color for any elements
   with the "class" attribute set to "example", to yellow.
  </p>
  <p>
   The CSS2 specification gives a great deal of control over the selector. Here's
   a list of the different options.
  </p>
  <table id="TablePatterns" class="defntable" pdf-tag-table-summary="List of patterns">
   <thead>
    <tr>
     <th>Pattern</th>
     <th>Meaning</th>
    </tr>
   </thead>
   <tr>
    <td>*</td>
    <td>Matches any element</td>
   </tr>
   <tr>
    <td>E</td>
    <td>Matches any E element (i.e., an element of type E)</td>
   </tr>
   <tr>
    <td>E F</td>
    <td>Matches any F element that is a descendant of an E element</td>
    </tr>
   <tr>
    <td>E &gt; F</td>
    <td>Matches any F element that is a child of an element E</td>
   </tr>
   <tr>
    <td>E:first-child</td>
    <td>Matches element E when E is the first child of its parent</td>
   </tr>
   <tr>
    <td>E:last-child</td>
    <td>Matches element E when E is the last child of its parent (custom extension of CSS2)</td>
   </tr>
   <tr>
    <td>E + F</td>
    <td>Matches any F element immediately preceded by an element E</td>
   </tr>
   <tr>
    <td>E - F</td>
    <td>Matches any F element immediately followed by an element E (custom extension of CSS2)</td>
   </tr>
   <tr>
    <td>E.warning</td>
    <td>Matches any E element with the "class" attribute equal to "warning"</td>
   </tr>
   <tr>
    <td>E#myid</td>
    <td>Matches any E element with the "id" attribute equal to "myid"</td>
   </tr>
   <tr>
    <td>E:lang(fr)</td>
    <td>Matches any E element where the "lang" attribute begins with "fr" - including, for example, "fr_CH"</td>
   </tr>
   <tr>
    <td>E[align=right]</td>
    <td>Matches any E element where the "align" attribute is set to the value "right"</td>
   </tr>
   <tr>
    <td>E[align]</td>
    <td>Matches any E element where the "align" attribute is set - the actual value it is set to is irrelevant</td>
   </tr>
   <tr>
    <td>.warning</td>
    <td>Matches any element with the "class" attribute equal to "warning"</td>
   </tr>
   <tr>
    <td>#myid</td>
    <td>Matches any element with the "id" attribute equal to "myid"</td>
   </tr>
  </table>

  <h3 id="matchtypes">Matching certain types of element</h3>
  <p>
   To match elements of a specific type in the document is the simplest type of
   rule. The following example matches every H1 element in the document, and sets
   the color to red.
  </p>

  <pre class="example">
  H1 { color:red; } </pre>

  <h3 id="matchclass">Classes and ID's</h3>
  <p>
   An HTML-specific extension to CSS2 which we have adopted is the concept of
   matching "classes" and "ids". This allows elements in the document to be
   grouped together, or even to match individual elements. For example, every
   example in this document is printed in a box on a light blue background. Here's how we
   do it:
  </p>

  <pre class="example">
  PRE.example { background-color:#D0FFFF; padding:4; border:1; } </pre>

  <p>
   Then in the document we simply place each example inside a <code>&lt;PRE
   class="example"&gt;</code> element.
  </p>
  <p>
   As of version 1.1.10, each element can belong to multiple classes. For instance, this
   paragraph would have a red background <b>and</b> a black border.
  </p>
  <pre class="example">
  .red { background-color:red; }
  .outline { border:thin solid black; }
  
  &lt;p class="red outline"&gt;</pre>

  <p>
   Individual elements can be referenced by ID as well. For example, to reference
   a specific diagram in the document you might set it's "id" attribute to
   "diagram1", and then use the following stylesheet rule:
  </p>

  <pre class="example">
  #diagram1 { border:1; } </pre>

  <p>
   Each page in the document is given a unique ID equal to "page" followed by the
   current pagenumber. For example, here's how to set the size and background
   color of the first page.
  </p>

  <pre class="example">
  #page1 { size:A4-landscape; background-color:yellow; } </pre>

  <p>
   One additional advantage of giving an element an ID is that it can be referenced from
   outside the document. This can be used to load a PDF at a specific page or section of a
   page, but only works with documents loaded with the Internet Explorer or Netscape
   plugin from a webserver. For example, to open the document to the block with an ID of
   "chapter2", put the following hyperlink in your HTML document:
  </p>

  <pre class="example">
  &lt;a href="http://www.yourcompany.com/YourPDF.pdf#chapter2&gt;See Chapter 2&lt;/a&gt; </pre>

  <h3 id="matchkids">Descendants, Children and Siblings</h3>
  <p>
   At times, authors may want to match an element that is a descendant or child
   of another element in the document tree - for example "match any H1 elements
   on the first page" (a <i>descendant</i> relation), or "match any P elements
   that are children of BODY" (a <i>child</i> relation). These two rules can be
   described by the following stylesheet entries:
  </p>
  <table fake="true" align="center">
   <tr>
    <td margin-right="30">
     <pre class="example">
  #page1 H1 { color:red; }
     </pre>
    </td>
    <td>
     <pre class="example">
  BODY > P { color:red; }
     </pre>
    </td>
   </tr>
  </table>
  <p>
   In the first example, the descendant relation is specified by the whitespace
   between the <tt>#page1</tt> selector and the <tt>H1</tt> selector. These can be
   chained together as necessary - for example <code>DIV * P</code> matches any P
   element that is the grandchild or later descendant of a DIV.
  </p>
  <p>
   In the second example, the child relation is specified by the <tt>&gt;</tt>
   symbol. Only P elements directly under the BODY element will be matched.
  </p>
  <p>
   Sometimes it may also be necessary to match elements based on their siblings,
   rather than their ancestors - for example, to set the vertical space for an H2
   element when it's immediately preceded by an H1 element. Another useful option
   is to match an element that <i>isn't</i> preceded by another element - it's the
   first child of it's parent. This is useful to set a default style for the first
   column of a table, for example. The following two examples show how to describe
   these situations.
  </p>
  <table fake="true" align="center">
   <tr>
    <td margin-right="30">
     <pre class="example">
  H1 + H2 { margin-top:0pt; }
     </pre>
    </td>
    <td>
     <pre class="example">
  td:first-child { font-weight:bold; }
     </pre>
    </td>
   </tr>
  </table>
  <p>
   Two custom extensions which we support but CSS2 doesn't are the
   <i>last-child</i> psuedo-element and the "previous sibling" relation. These are
   the opposite of the two rules shown above, and can be matched like this:
  </p>
  <table fake="true" align="center">
   <tr>
    <td margin-right="30">
     <pre class="example">
  H2 - H1 { margin-bottom:0pt; }
     </pre>
    </td>
    <td>
     <pre class="example">
  td:last-child { font-weight:bold; }
     </pre>
    </td>
   </tr>
  </table>

  <h3 id="matchgroups">Grouping</h3>
  <p>
   When several identical attributes are to be set for different elements, they
   may be grouped into a comma separated list. The following two examples are
   identical:
  </p>
  <table fake="true" align="center">
   <tr>
    <td margin-right="30">
     <pre class="example">
  H1 { font-family:Times; }
  H2 { font-family:Times; }
  H3 { font-family:Times; }
     </pre>
    </td>
    <td>
     <pre class="example">
  H1, H2, H3 { font-family:Times; }


     </pre>
    </td>
   </tr>
  </table>

  <h3 id="matchlanguages">Language and Attribute selectors</h3>
  <p>
   New in version 1.1 is the ability to select attributes based on the language of
   an element, as defined by the <code>lang</code> attribute, or based on other attributes. The
   language selector is extremely useful when creating a document that will contain text in more
   than one language. For example, the following rules set the default font for different languages
   and the default page size for Americans and Canadians. They are included in the default
   stylesheet.
  </p>

  <pre class="example">
  body:lang(ko)          { font-family: HYMyeongJo; }
  body:lang(ja)          { font-family: HeiSeiKakuGo; }
  body:lang(zh_CN,zh_SG) { font-family: MSung; }
  body:lang(zh_TW,zh_HK) { font-family: STSong; }

  body:lang(en_US,en_CA) { size: Letter; }
  </pre>
  <p>
   The language of an element can be set using the <code>lang</code> attribute in the same way as
   HTML, by using the XML-specific attribute <code>xml:lang</code>, or if neither are set it
   defaults to the Locale that the Report Generator is running in.
  </p>
  <p>
   As for the attribute selectors, they're easier to understand with an example. In HTML, an image
   that is also a hyperlink traditionally has a blue-border around it. This can be done with the
   following stylesheet entry:
  </p>
  <pre class="example">
   img[href] { border: medium solid blue; }
  </pre>
  <p>
   Similarly one could create appropriate margins on a floating block by using something like the
   following, which puts left margins on a right-floated DIV, and right-margins on a left-floated
   DIV.
  </p>
  <pre class="example">
   div[float=right] { margin-left: 10pt }
   div[float=left] { margin-right: 10pt }
  </pre>


  <h2 id="applystyles">Applying Stylesheets</h2>
  <p>
   So how to include this style information in the document? The following three
   examples show different ways to get the same result.
  </p>
  <table fake="true">
   <tr>
    <td valign="middle">
     <p>
  First, you can include the attributes inline. Quick, but inflexible.
     </p>
    </td>
    <td>
     <pre class="sexample">
  &lt;?xml version="1.0"?&gt;
  &lt;!DOCTYPE pdf PUBLIC "-//big.faceless.org//report" "report-1.1.dtd"&gt;

  &lt;pdf&gt;
    &lt;body <b>background-color="yellow" font-size="18"</b>&gt;
      Hello, World!
    &lt;/body&gt;
  &lt;/pdf&gt; </pre>
    </td>
   </tr>
  </table>
  <table fake="true" id="TableDummyX">
   <tr>
    <td>
     <pre class="sexample">
  &lt;?xml version="1.0"?&gt;
  &lt;!DOCTYPE pdf PUBLIC "-//big.faceless.org//report" "report-1.1.dtd"&gt;

  &lt;pdf&gt;
    &lt;head&gt;
      &lt;style&gt;
        <b>body    { background-color:yellow; font-size:18 }</b>
      &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
      Hello, World!
    &lt;/body&gt;
  &lt;/pdf&gt; </pre>
    </td>
    <td valign="middle">
     Second, you can embed the stylesheet directly in the document.
    </td>
   </tr>
  </table>

  <table fake="true">
   <tr>
    <td valign="middle">
     Third, for maximum flexiblity, create the stylesheet as a separate file. The
     first file here is called <tt>style.css</tt>, and we load it using the LINK
     element.<br/><br/>
     Relative URLs referenced from the stylesheet will be relative to
     the sheet, <i>not</i> the document that uses it.
    </td>
    <td>
     <pre class="sexample">
  <b>body    { background-color:yellow; font-size:18 }</b> </pre>
     <pre class="sexample">
  &lt;?xml version="1.0"?&gt;
  &lt;!DOCTYPE pdf PUBLIC "-//big.faceless.org//report" "report-1.1.dtd"&gt;

  &lt;pdf&gt;
    &lt;head&gt;
      <b>&lt;link type="stylesheet" src="style.css"/&gt;</b>
    &lt;/head&gt;
    &lt;body&gt;
      Hello, World!
    &lt;/body&gt;
  &lt;/pdf&gt; </pre>
    </td>
   </tr>
  </table>

  <h1 id="elements">Elements</h1>
  <p>
   Most of the XML elements we use are the same as HTML. In this section we'll
   broadly describe what the various elements are - most of them should be
   familiar, but there are a few new ones and a couple of important differences to others. See the <a href="#reftags">reference section</a> for a full list and more detail.
  </p>
  <h2 id="structure">Document Structure</h2>
  <p>
   Every report is defined by a single PDF element, which may contain an optional
   HEAD element, and must contain the mandatory BODY element, which contains the
   actual content of the report. As PDF documents consist of multiple pages, the
   contents of the BODY may be split into one or more pages - a process known as
   pagination.
  </p>
  <h3 id="pagination">Pagination</h3>
  <p>
   Generally speaking the Report Generator uses the following algorithm to place elements on the
   page.
  </p>
  <ol>
   <li>
    Take the first element in the BODY and try to fit it on the current page.
   </li>
   <li>
    If it can't fit but it can be split in two, split it at the end of the page and carry on.
   </li>
   <li>
    If it can't be split into two halves, place it on the next page and carry on
   </li>
  </ol>
  <p>
   This process can be altered in one of three ways.
  </p>
  <ul>
   <li>
    Using the "page-break-before", "page-break-after" and "page-break-inside" attributes to control
    breaks between elements.
   </li>
   <li>
    Within paragraphs (the P, PRE, BLOCKQUOTE and H1 to H4 elements), set the "orphans" and
    "widows" attributes to control the minimum number of lines that must remain at the end of a
    page (the orphans) and the minimum number that may be at the top of a new page (the widows).
    These both default to 2.
   </li>
   <li>
    Using the PBR element to explicitly place page breaks
   </li>
  </ul>
  <p>
   The first method, which is part of CSS2, allows authors to set various attributes on elements to
   either prevent or force pagebreaks. For example, the default setting for the H1 to H4 elements
   is that they are never immediately followed by a page break. The stylesheet entry looks like
   this:
  </p>
  <pre class="example">
  H1, H2, H3, H4 { page-break-after:avoid; } </pre>
  <p>
   Only some elements may be split and placed on multiple pages if they don't fit - currently the
   TABLE, UL, OL and all the paragraph elements listed above. To prevent one of these elements
   being split, set the "page-break-inside" attribute to "avoid".
  </p>
  <p>
   The third method uses the PBR element to split pages. This is especially useful when you want to
   change the format of the document, as the page dimensions for the new page (and for all
   following pages) can be set explicitly.
  </p>
  <p>
   For example, lets say you want your report to have a cover page on A4 with a yellow background,
   the bulk of the report on normal A4 but also a special section at the end to be printed on
   landscape. Here's how to do it:
  </p>

  <pre class="example">
  &lt;pdf&gt;
    <b>&lt;body size="A4" background-color="yellow"&gt;</b>

        <i>Contents of front page here</i>

      <b>&lt;pbr background-color="white"/&gt;</b>

        <i>Bulk of report here</i>

      <b>&lt;pbr size="A4-landscape"/&gt;</b>

        <i>Landscape section here</i>

    &lt;/body&gt;
  &lt;/pdf&gt; </pre>

  <p>
   As well as setting page formats and colors, this method can also be used to set
   page margins and "macros" for setting headers and footers.
  </p>

  <h3 id="macros">Headers, Footers and Macros</h3>
  <p>
   To display headers and footers on the page, the Report Generator introduces the
   concept of a "macro" - a block of XML which can be repeated multiple times
   throughout the document.
  </p>
  <p page-break-after="avoid">
   There are three different types of macro attribute, which can be used either on
   the BODY or PBR elemnts to set a macro for every page, or for a specific
   page by using a <tt>#page</tt><i>n</i> entry in a stylesheet.
  </p>
  <ul>
   <li><tt>header</tt> - to set the header of the page</li>
   <li><tt>footer</tt> - to set the footer of the page</li>
   <li><tt>background-macro</tt> - to set the background of the page</li>
  </ul>
  <p>
   A macro is defined in the HEAD of the document inside a MACROLIST. Each macro
   must have an ID, which is how it's referenced later in the document. Here's an
   example which sets a standard footer on each page:
  </p>

  <pre class="example">
  &lt;pdf&gt;
    &lt;head&gt;
      <b>&lt;macrolist&gt;
        &lt;macro id="myfooter"&gt;</b>
           &lt;p align="center"&gt;
             Page &lt;pagenumber/&gt; of &lt;totalpages/&gt;
           &lt;/p&gt;
        <b>&lt;/macro&gt;
      &lt;/macrolist&gt;</b>
    &lt;/head&gt;
    &lt;body <b>footer="myfooter" footer-height="20mm"</b>&gt;

      <i>Document contents here</i>

    &lt;/body&gt;
  &lt;/pdf&gt; </pre>

  <p>
   The "footer" attribute is the ID of the macro, and the "footer-height"
   attribute is the height required for the footer. If the document contents
   require several pages, the footer will be placed on each one, unless there is
   a PBR element which changes the footer (or removes it by setting
   <code>footer="none"</code>). The "header" attribute can be used the same way to
   set a header at the top of each page.
  </p>
  <p>
   The "background-macro" element allows more control than the "background-image"
   and "background-color" attributes. A classic example is placing a watermark on
   each page. Rather than use a bitmap image and set "background-image", the
   background-macro allows you to add custom XML to each page. The watermark can
   cover the whole page - including the header and footer if they're specified, but
   excluding any page margin or padding.  Here's an example which places the word
   "Confidential" on each page in light gray:
  </p>

  <pre class="example">
  &lt;pdf&gt;
    &lt;head&gt;
      &lt;style&gt;
        #watermarkbody { font-size:80; font:Helvetica; color:#F0F0F0; }
      &lt;/style&gt;
      <b>&lt;macrolist&gt;
        &lt;macro id="watermark"&gt;</b>
           &lt;p id="watermarkbody" rotate="-30" valign="middle" align="center">
             Confidential
           &lt;/p&gt;
        <b>&lt;/macro&gt;
      &lt;/macrolist&gt;</b>
    &lt;/head&gt;
    &lt;body <b>background-macro="watermark"</b>&gt;

      <i>Document contents here</i>

    &lt;/body&gt;
  &lt;/pdf&gt; </pre>

  <h4 id="pagenumber">Displaying the Page number</h4>
  <p>
   The current page number and the total number of pages in the document can be
   displayed in the document by means of two special elements - PAGENUMBER and
   TOTALPAGES. These can be used inside a text paragraph - the "footers" example
   above shows how they are used.
  </p>
  <p>
   The current page number generally starts at one and increases by one for each page, but can be
   set specifically by using the "pagenumber" attribute. This can be set on a BODY or PBR element
   to set the page number of the next page.
  </p>
  <p>
   As well as just printing the current page number, the PAGENUMBER element can be used to print
   the page number of other elements in the document. This comes into it's own when creating a table of
   contents. Every item in the table of contents has an <code>id</code> tag - for example, the
   header at the start of this paragraph has it's <code>id</code> attribute set to "pagenumbers".
   Then, in the table of contents, we can print the page number of this section like so:
  </p>
  <pre class="example">
  &lt;table&gt;
   &lt;tr&gt;
    &lt;td&gt;Displaying the Page Number&lt;/td&gt;
    &lt;td&gt;<b>&lt;pagenumber idref="pagenumbers"/&gt;</b>&lt;/td&gt;
   &lt;/tr&gt;
  &lt;/table&gt;
  </pre>
  <p>
   A mildly annoying feature of these two tags is that they cannot be measured
   accurately during the layout stage of the document. This is obvious when you
   think about it - there's no way to know how many pages are required until the
   whole document has been laid out. Because of this the Report Generator takes
   a guess at the number of digits that might be required. This defaults to three,
   but since 1.1.12 can be set with the "size" attribute. For instance, if you know your
   document will have a maximum of 50 pages, you might change your code to read
  </p>
  <pre class="example">
  Page &lt;pagenumber <b>size="2"</b>/&gt; of &lt;totalpages <b>size="2"</b>/&gt;
  </pre>
  <p>
   Another option added in the same release was the ability to display page numbers
   in formats other than decimal. The types available are the same as for the "<a href="#markertypetable">markertype</a>"
   attribute in the OL tag - so for example, to number your pages with roman digits, try:
  </p>
  <pre class="example">
   &lt;macrolist&gt;
    &lt;macro id="myfooter"&gt;
     &lt;p align="center"&gt;&lt;pagenumber <b>type="roman-lower"</b>/&gt;&lt;/p&gt;
    &lt;/macro&gt;
   &lt;/macrolist&gt;
  &lt;/head&gt;
  &lt;body footer="myfooter" footer-height="0.5in"&gt;
  </pre>

  <h3 id="pagesizes">Page Sizes</h3>
  <p>
   As a convenience, the Report Generator defines several standard sizes which
   can be used to set pages in the document to a standard paper size - so
   <tt>&lt;body size="A4"&gt;</tt> is identical to <tt>&lt;body width="210mm"
   height="297mm"&gt;</tt>. Here's the list of known sizes - every one of these
   can have the suffix "-landscape" appended to rotate the page size by 90
   degrees - e.g.  <tt>letter-landscape</tt>.
  </p>

  <table id="TablePageSizes" class="sizetable">
   <tr>
    <th class="key" padding-right="1in" colspan="2">ISO A series</th>
    <th class="key" padding-right="1in" colspan="2">ISO B series</th>
    <th class="key" padding-right="1in" colspan="2">ISO C series</th>
   </tr><tr>
    <td class="key">A10</td><td>26mm &#215; 37mm</td>
    <td class="key">B10</td><td>31mm &#215; 44mm</td>
    <td class="key">C10</td><td>28mm &#215; 40mm</td>
   </tr><tr>
    <td class="key">A9</td><td>37mm &#215; 52mm</td>
    <td class="key">B9</td><td>44mm &#215; 62mm</td>
    <td class="key">C9</td><td>40mm &#215; 57mm</td>
   </tr><tr>
    <td class="key">A8</td><td>52mm &#215; 74mm</td>
    <td class="key">B8</td><td>62mm &#215; 88mm</td>
    <td class="key">C8</td><td>57mm &#215; 81mm</td>
   </tr><tr>
    <td class="key">A7</td><td>74mm &#215; 105mm</td>
    <td class="key">B7</td><td>88mm &#215; 125mm</td>
    <td class="key">C7</td><td>81mm &#215; 114mm</td>
   </tr><tr>
    <td class="key">A6</td><td>105mm &#215; 148mm</td>
    <td class="key">B6</td><td>125mm &#215; 176mm</td>
    <td class="key">C6</td><td>114mm &#215; 162mm</td>
   </tr><tr>
    <td class="key">A5</td><td>148mm &#215; 210mm</td>
    <td class="key">B5</td><td>176mm &#215; 250mm</td>
    <td class="key">C5</td><td>162mm &#215; 229mm</td>
   </tr><tr>
    <td class="key"><B>A4</B></td><td><B>210mm &#215; 297mm</B></td>
    <td class="key">B4</td><td>250mm &#215; 353mm</td>
    <td class="key">C4</td><td>229mm &#215; 324mm</td>
   </tr><tr>
    <td class="key">A3</td><td>297mm &#215; 420mm</td>
    <td class="key">B3</td><td>353mm &#215; 500mm</td>
    <td class="key">C3</td><td>324mm &#215; 458mm</td>
   </tr><tr>
    <td class="key">A2</td><td>420mm &#215; 594mm</td>
    <td class="key">B2</td><td>500mm &#215; 707mm</td>
    <td class="key">C2</td><td>458mm &#215; 648mm</td>
   </tr><tr>
    <td class="key">A1</td><td>594mm &#215; 841mm</td>
    <td class="key">B1</td><td>707mm &#215; 1000mm</td>
    <td class="key">C1</td><td>648mm &#215; 917mm</td>
   </tr><tr>
    <td class="key">A0</td><td padding-right="0.5in">841mm &#215; 1189mm</td>
    <td class="key" padding-right="15">B0</td><td padding-right="0.5in">1000mm &#215; 1414mm</td>
    <td class="key" padding-right="15">C0</td><td padding-right="0.5in">917mm &#215;
    1297mm</td>
   </tr><tr>
    <td class="key">2A0</td><td>1189mm &#215; 1682mm</td>
    <th scope="column" class="key" padding-right="1in" colspan="2">American sizes</th>
    <th scope="column" class="key" padding-right="1in" colspan="2">Other sizes</th>
   </tr>
   <tr>
    <td class="key" padding-right="15">4A0</td><td>1682mm &#215; 2378mm</td>
    <td class="key"><b>Letter</b></td><td><b>8.5in &#215; 11in</b></td>
    <td class="key">ID-2</td><td>107mm &#215; 74mm</td>
   </tr><tr>
    <th scope="column" class="key" padding-right="1in" colspan="2">Common envelopes</th>
    <td class="key">Legal</td><td>8.5in &#215; 14in</td>
    <td class="key">ID-3</td><td>125mm &#215; 88mm</td>
   </tr><tr>
    <td class="key">D1</td><td>110mm &#215; 220mm</td>
    <td class="key">Executive</td><td>7.5in &#215; 10in</td>
    <td class="key">OHP-A</td><td>250mm &#215; 250mm</td>
   </tr><tr>
    <td class="key">E4</td><td>280mm &#215; 400mm</td>
    <td class="key">Ledger</td><td>11in &#215; 17in</td>
    <td class="key">OHP-B</td><td>285mm &#215; 285mm</td>
   </tr>
  </table>


  <h2 id="head">The Document Head</h2>
  <p>
   The HEAD element of the report contains information about the report.
   There are five different options that can be specified inside the HEAD.
  </p>
  <ul>
   <li>
    Macros (described above) using the MACROLIST and MACRO elements
   </li>
   <li>
    Stylesheets, either externally using a LINK or internally using a STYLE element
   </li>
   <li>
    Non-standard fonts can be linked in using the LINK element. This is covered in the
    "Fonts" section later.
   </li>
   <li>
    Document meta information, such as report title, password and various PDF specific
    attributes can be set using the META element.
   </li>
   <li>
    Bookmarks can be specified using the BOOKMARKLIST and BOOKMARK elements
   </li>
  </ul>

  <h3 id="meta">Meta information</h3>
  <p>
   The META element in the document HEAD requires a "name" and "value" attribute,
   which specifies which property of the document to set. A number of properties
   are known to the Report Generator, and those that aren't can be passed on to
   the calling process - providing a convenient method of extending the
   capabilities of the generator. Here's an example setting the title of the
   document.
  </p>

  <pre class="example">
  &lt;pdf&gt;
    &lt;head&gt;
      <b>&lt;meta name="title" value="My First Report"/&gt;</b>
    &lt;/head&gt;
  &lt;/pdf&gt; </pre>

  <p>
   Here's a list of the various "names" that are recognised, ordered roughly from
   most useful to least useful (as we think anyway)
  </p>
  <table id="TableMeta" class="defntable">
   <thead>
    <tr><th>Name</th><th>Value</th><th>Description</th></tr>
   </thead>
   <tr>
    <td>base</td>
    <td>Base URL of the document</td>
    <td>
     Set the base URL of the document. All relative links in the document will be interpreted as
     relative to this URL. If you're going to set this, be sure to set it before any stylesheets or
     fonts are loaded.
    </td>
   </tr>
   <tr>
    <td>title</td>
    <td>The report title</td>
    <td>Set the title of the report</td>
   </tr>
   <tr>
    <td>author</td>
    <td>The authors name</td>
    <td>Set the author of the report</td>
   </tr>
   <tr>
    <td>subject</td>
    <td>The report subject</td>
    <td>Set the subject of the report</td>
   </tr>
   <tr>
    <td>keywords</td>
    <td>a list of keywords</td>
    <td>Set the keywords for the report</td>
   </tr>
   <tr>
    <td>output-profile</td>
    <td>the name of an output profile</td>
    <td>This can be set to cause the PDF to be written according to the rules of a specific output
    profile. For more detail see the <tt>org.faceless.pdf2.OutputProfile</tt> class. Valid values
    are currently "Default", "NoCompression", "Acrobat4", "Acrobat5", "PDF/X-1a", "PDF/X-3 (No ICC)" and
    "PDF/X-3 (ICC)"</td>
   </tr>
   <tr>
    <td>password</td>
    <td>a password</td>
    <td>The password to encrypt the report with</td>
   </tr>
   <tr>
    <td>servlet-filename</td>
    <td>a filename</td>
    <td>
     (For Proxy Servlet and Filter use only) Set the PDF to be saved rather than viewed
     directly by the browser, and set the name to give the PDF document when it's saved.
     This functionality may cause problems with some browsers - see the Filter API
     documentation for more information
    </td>
   </tr>
   <tr>
    <td>servlet-cache</td>
    <td>period of time</td>
    <td>
     (For Proxy Servlet only) Set the length of time the generated PDF is to be cached by
     the Proxy Servlet.  See the Proxy Servlet API documentation for more information.
    </td>
   </tr>
   <tr>
    <td>access-level</td>
    <td> print-none print-lowres print-highres extract-none extract-accessibility extract-all change-none change-layout change-forms change-annotations change-all plain-metadata</td>
    <td>
     What permissions to give the application viewing the document. One of each of the "print", "extract" and "change"
     values should be specified in a string, seperated with spaces. So, for example, <tt>&lt;meta
     name="access-level" value="print-all change-none extract-none"/&gt;</tt> would create a document
     that can be printed but is not copyable or alterable. For 40-bit encryption, print-lowres is the
     same as print-highres, extract can be "none" or "all", and changes can be "none", "annotations" or
     "all". The "plain-metadata" option will cause XMP metadata in the document to be left unencrypted,
     although this will result in a PDF that can only be loaded with Acrobat 6.0 or later.
    </td>
   </tr>
   <tr>
    <td>show-bookmarks</td>
    <td>true / false</td>
    <td>Whether to show the bookmarks pane when the document is first opened</td>
   </tr>
   <tr>
    <td>layout</td>
    <td>one-column / <nobr>two-column-left</nobr> / <nobr>two-column-right</nobr> / single-page</td>
    <td>
     Instruct the PDF viewing application on how to display the document. The default is
     <tt>single-page</tt>
    </td>
   </tr>
   <tr>
    <td>encryption-algorithm</td>
    <td>40bit / 128bit / aes</td>
    <td>
     The encryption algorithm to use to secure the document. If a password or access-level
     is set, defaults to <code>40bit</code>. "aes" will result in documents that can only be
     opened in Acrobat 7.0 or later, but other than that is identical to 128bit.
    </td>
   </tr>
   <tr>
    <td>creator</td>
    <td>a program name</td>
    <td>Set the name of the program that created the original XML</td>
   </tr>
   <tr>
    <td>viewer-fullscreen</td>
    <td>true / false</td>
    <td>Whether to open the PDF viewer in fullscreen mode</td>
   </tr>
   <tr>
    <td>viewer-hidetoolbar</td>
    <td>true / false</td>
    <td>Whether to hide the toolbar of the PDF viewer when the document is first opened</td>
   </tr>
   <tr>
    <td>viewer-hidemenubar</td>
    <td>true / false</td>
    <td>Whether to hide the menubar of the PDF viewer when the document is first opened</td>
   </tr>
   <tr>
    <td>viewer-hide-windowui</td>
    <td>true / false</td>
    <td>Whether to hide the user-interface of the PDF viewer when the document is first opened</td>
   </tr>
   <tr>
    <td>viewer-fitwindow</td>
    <td>true / false</td>
    <td>Whether to resize the PDF viewer to fit the document size</td>
   </tr>
   <tr>
    <td>viewer-centerwindow</td>
    <td>true / false</td>
    <td>Whether to center the PDF viewer window on the screen</td>
   </tr>
   <tr>
    <td>security-password</td>
    <td>a password</td>
    <td>The password (if any) required to change the password of the document</td>
   </tr>
  </table>

  <h3 id="bookmarks">Bookmarks</h3>
  <p>
   The documents "bookmarks" are the tree-like structure displayed in a pane on
   the left in Acrobat Reader. Sometimes called "outlines", these are an
   excellent way to provide easy navigation around larger documents.
  </p>
  <p>
   The Report Generator controls bookmarks through the BOOKMARKLIST element,
   which contains one or more BOOKMARK elements. These can themselves contain
   BOOKMARK elements, to create the tree structure. Each bookmark has a "name",
   which is the name displayed to the user in the PDF, and an optional "href",
   which is the hyperlink to follow if the user clicks on the bookmark - usually,
   but not necessarily, to a location in the document.
  </p>
  <p>
   We'll cover more on Hyperlinks in a later section. For the moment, it's enough
   to know that linking to a specific location in the report is done by setting
   <tt>href="#<i>id</i>"</tt>, where "id" is the ID of the element you want to
   link to. Here's an example:
  </p>

  <pre class="example">
  &lt;pdf&gt;
    &lt;head&gt;
      &lt;bookmarklist&gt;
      <b>&lt;bookmark name="Chapter 1" href="#ch1"/&gt;</b>
      <b>&lt;bookmark name="Chapter 2" href="#ch2"&gt;</b>
        <b>&lt;bookmark name="Chapter 2 part 2" href="#ch2pt2"&gt;</b>
      <b>&lt;/bookmark/&gt;</b>
      <b>&lt;bookmark name="Chapter 3" href="#ch3"/&gt;</b>
      &lt;/bookmarklist&gt;
    &lt;/head&gt;
    &lt;body&gt;
      <b>&lt;h1 id="ch1"&gt;</b>

        <i>Chapter one here</i>

      <b>&lt;h1 id="ch2"&gt;</b>

        <i>Chapter two part one here</i>

        <b>&lt;h2 id="ch2pt2"&gt;</b>

          <i>Chapter two part two here</i>

      <b>&lt;h1 id="ch3"&gt;</b>

        <i>Chapter three here</i>

    &lt;/body&gt;
  &lt;/pdf&gt; </pre>

  <p>
   The "expanded" attribute can be set to "true" to cause the specified bookmark tree to
   be opened by default. The "color", "font-style" and "font-weight" attributes may also
   be set to set the look of the bookmark entry, although this feature is ignored by PDF
   viewers before PDF 1.4 (Acrobat 5.x)
  </p>


  <h2 id="boxmodel">Box Model</h2>
  <p page-break-after="avoid">
   The "box model" is the name given to the layout model used by both CSS2 and
   the Report Generator. Coming to grips with how it works will help you to
   control the layout of your reports.
  </p>
  <p>
   Every element that is displayed in the body of the report is a box - be it a
   paragraph of text, a table, a bitmap image or even a page itself. These boxes
   are usually positioned one after another down the page to make up the report.
  </p>
  <p>
   All these elements have certain properties in common, which can be set by
   the various <i>block attributes</i> in the report generator. We'll cover some
   of these attributes now.
  </p>

  <h3 id="padding">Padding, Margins and Borders</h3>
  <p>
   Every "box" placed in the document takes up a certain amount of space. As well
   as the obvious space required to display the content of the box, such as the
   dimensions of an image, there is the space around the content as well, which
   separates it from it's neighbors.
  </p>
   <img align="center" src="resources/boxdim.png" dpi="100" alt="Box Dimensions"/>
  <p>
   The diagram above shows the various "shells" around the content of a box.
   Starting with the content and moving out, we have:
  </p>
  <ol>
   <li>
    Padding - the space between the content of the block and the border, this has the same
    background color or image as the content of the block.
   </li>
   <li>
    Border - the optional border line surrounding the content of the block.
   </li>
   <li>
    Margin - the space outside the border between this block and it's neighbors. It's
    always transparent.
   </li>
  </ol>
  <p>
   The "padding", "border" and "margin" attributes can be set to set the attribute for all
   four sides of the box, or "padding-top", "padding-right", "padding-bottom" or
   "padding-left" etc. can be set to set the border, padding or margin for just one side.
  </p>
  <p>
   The Report Generator also supports the "border-color" attribute to set the color of the
   border, the "border-style" attribute to set the border line to solid, dotted, dashed
   and so on, and the custom "corner-radius" attribute, which allows the corners of the
   border to be rounded. Border colors and styles can be set seperately for each side - for
   example
  </p>
  <pre class="example">
   div { border-top: dotted red; border-bottom: thick solid black; }
  </pre>
  <p>
   will draw a dotted red border above the DIV tag, and a thick solid black one below it.
  </p>

  <h3 id="background">Drawing the Background</h3>
  <p>
   Both the content and the padding of a box can optionally be drawn over a
   background.  This can either be a color, by setting the "background-color"
   attribute, or a bitmap image as set by the "background-image" attribute.
  </p>
  <p>
   The background image can be drawn in one of several positions, as set by the
   "background-position" attribute. By default this is set to "stretch", which means
   the image is drawn once and stretched to fit the box. Other options are "repeat", where
   the image is tiled repeatedly to fill the box, or any combination of "top", "middle",
   "bottom", "left", "center" or "right" to draw the image once. PDF is not as efficient
   as HTML at rendering background images, so the "repeat" setting should be used with
   care as it can result in long delays for those viewing the document.
  </p>
  <p>
   Unlike HTML, PDF images don't have a fixed size. Instead, the size of the bitmap image
   on the page depends on the dots-per-inch, or DPI of the image.  For background images,
   this can be set using the "background-image-dpi" or "background-image-width" and
   "background-image-height" attributes. These have the same function for background
   images as the "image-dpi", "width" and "height" attributes do for normal images - see
   the section on Images for more information.
  </p>
  <p page-break-after="avoid">
   Here are some examples showing the effects of the different settings
  </p>
  <table fake="true" width="100%" cellmargin="4" page-break-inside="avoid">
   <tr>
    <td border="3" height="100" background-image="resources/logobig.jpg" background-image-position="stretch" alt="Stretched Logo"/>
    <td border="3" background-image="resources/logobig.jpg" background-image-position="repeat" background-image-dpi="600" alt="Repeat Logo"/>
    <td border="3" background-image="resources/logobig.jpg" background-image-position="center middle" background-image-dpi="600" alt="Centered Logo"/>
   </tr>
   <tr>
    <td>background-image-position="stretch"</td>
    <td>background-image-position="repeat"</td>
    <td>background-image-position="center middle"</td>
   </tr>
  </table>

  <h3 id="backgroundpdf">Building on an existing PDF</h3>
  <p>
   A feature of the <b>Extended Edition</b> of the Report Generator is the ability to use a
   page from an existing PDF document as a background, in the same was as you could use a
   <code>background-image</code> or a <code>background-color</code>. This is done using the
   <code>background-pdf</code> attribute, which can be set to the URL of a PDF to include.
   Here's an example:
  </p>

  <pre class="example">
  &lt;?xml version="1.0"?&gt;
  &lt;!DOCTYPE pdf PUBLIC "-//big.faceless.org//report" "report-1.1.dtd"&gt;

  &lt;pdf&gt;
    &lt;body <b>background-pdf="original.pdf#page=2"</b> font-size="18"&gt;
      Hello, World!
    &lt;/body&gt;
  &lt;/pdf&gt; </pre>

  <p>
   This simple example would create a single page document, with the words "Hello, World!"
   placed on top of the second page of the "original.pdf" document. The pagenumber is
   specified by the "<code>#2</code>" in the URL - it can be left out, in which case the
   page that's used will be the same page as that in the current document - the first page
   is overlaid on page 1, the second is overlaid on page 2, and so on. When the source
   document is out of pages it starts again at the beginning.
  </p>
  <p>
   A useful example of this is a multi page invoice. Imagine you want to create an
   invoice, which will run over several pages. The first page has the company logo and
   space for an address, whereas the remaining pages just have space for the invoice
   details. To do this with the report generator, create a two page template using your
   favorite tool - Quark Express or MS Word, for example - and then do something like the
   following example:
  </p>

  <pre class="example">
  &lt;pdf&gt;
    &lt;head&gt;
      &lt;style&gt;
        <b>#page1 { background-pdf:original.pdf#page=1 }</b>
        <b>body   { background-pdf:original.pdf#page=2 }</b>
      &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;p padding-left="1in" padding-top="1in"&gt;
        &lt;!-- Address goes here --&gt;
      &lt;/p&gt;
      &lt;table&gt;
        &lt;!-- Invoice details go here, covering as many pages as necessary --&gt;
      &lt;/table&gt;
    &lt;/body&gt;
  &lt;/pdf&gt; </pre>

  <p>
   Note that this feature is not limited to pages! Theoretically an existing PDF could
   be used as the background for a table, a paragraph or any other box.
  </p>
  <p>
   Extended edition pricing information is available from the product homepage.
  </p>

  <h3 id="positioning">Positioning</h3>
  <p>
   As mentioned above, most of the time the "boxes" containing the XML elements are placed on
   the page, each one following the next with no overlap between them - a procedure known as
   <i>relative positioning</i>. The distance between the blocks can be controlled to a degree
   using the "padding" and "margin" attributes discussed above - for most layout requirements,
   just these attributes are enough.
  </p>
  <p page-break-after="avoid">
   For more control, the "position", "left" and "top" attributes can be set to
   change the way boxes are laid out. By default, the position is "relative",
   which means the box is positioned normally and then offset by the "left" and
   "top" attributes - these default to zero. The position of the following box
   is calculated as if the box was not offset. Here's an example:
  </p>
  <table fake="true" width="100%" cellmargin="4" border="1">
   <tr>
    <td border="2" padding="4">
     <p border="1" padding="4" margin="2" background-color="red" width="100%" height="50">Box 1</p>
     <p border="1" padding="4" margin="2" background-color="yellow" width="100%" height="50">Box 2</p>
     <p border="1" padding="4" margin="2" background-color="green" width="100%" height="50">Box 3</p>
    </td>
    <td border="2" padding="4">
     <p border="1" padding="4" margin="2" background-color="red" width="100%" height="50">Box 1</p>
     <p border="1" padding="4" margin="2" background-color="yellow" width="100%" height="50" left="10" top="-10">Box 2</p>
     <p border="1" padding="4" margin="2" background-color="green" width="100%" height="50">Box 3</p>
    </td>
   </tr>
   <tr>
    <td>Normal flow</td>
    <td>Box 2 has left="10" top="-10"</td>
   </tr>
  </table>
  <p>
   Sometimes this isn't flexible enough - for example, if you want to place a paragraph of
   text on top of an image, or at a specific position on the page.  In this case you can
   set the "position" attribute to "absolute". This causes the box to be "taken out" of
   the normal flow and positioned relative to it's parent <i>only</i> - i.e. completely
   independent of it's siblings.
  </p>
  <p page-break-after="avoid">
   Here's the above example again, but with the second box positioned absolutely.  Notice
   how the left and top offsets are now relative to it's parent, and how the third box is
   positioned as if the second didn't exist.
  </p>
  <table fake="true" width="100%" cellmargin="4" border="1">
   <tr>
    <td border="2" padding="4">
     <p border="1" padding="4" margin="2" background-color="red" width="100%" height="50">Box 1</p>
     <p border="1" padding="4" margin="2" background-color="yellow" width="100%" height="50">Box 2</p>
     <p border="1" padding="4" margin="2" background-color="green" width="100%" height="50">Box 3</p>
    </td>
    <td border="2" padding="4">
     <p border="1" padding="4" margin="2" background-color="red" width="100%" height="50">Box 1</p>
     <p position="absolute" border="1" padding="4" margin="2" background-color="yellow" width="100%" height="50" left="10" top="-10">Box 2</p>
     <p border="1" padding="4" margin="2" background-color="green" width="100%" height="50">Box 3</p>
    </td>
   </tr>
   <tr>
    <td>Normal flow</td>
    <td>Box 2 has left="10" top="-10" position="absolute"</td>
   </tr>
  </table>
  <p>
   There is one critical condition when using absolutely positioned elements; the element
   cannot be the child of the BODY element. This is because unlike HTML, elements must be
   assigned to a page before they can be positioned, but as absolutely positioned items
   are independent of their siblings, there's no way to decide which page they go on. To
   position an item at an absolute position on a specific page, it can be placed in a
   "background-macro" which is then assigned to the page.
  </p>


  <h3 id="clipping">Clipping and Visibility</h3>
  <p>
   In the above examples you will probably have noticed that the boxes overlap.In the case
   of the absolutely positioned example, it spills outside the bounds of it's parent. This
   can be controlled by setting the "overflow" attribute, which can be set to "visible"
   (the default) or "hidden". This determines whether an elements children are "clipped"
   at it's edges or not.
  </p>
  <p page-break-after="avoid">
   Here's the second example above, but with the "overflow" attribute of the parent
   element set to "hidden". The element is clipped at the edge of the parents "content"
   box - because the parent has "padding" set to 4 this is 4 points inside the border.
  </p>
  <table fake="true" width="100%" cellmargin="4" border="1">
   <tr>
    <td border="2" padding="4">
     <p border="1" padding="4" margin="2" background-color="red" width="100%" height="50">Box 1</p>
     <p border="1" padding="4" margin="2" background-color="yellow" width="100%" height="50">Box 2</p>
     <p border="1" padding="4" margin="2" background-color="green" width="100%" height="50">Box 3</p>
    </td>
    <td border="2" padding="4" overflow="hidden">
     <p border="1" padding="4" margin="2" background-color="red" width="100%" height="50">Box 1</p>
     <p position="absolute" border="1" padding="4" margin="2" background-color="yellow" width="100%" height="50" left="10" top="-10">Box 2</p>
     <p border="1" padding="4" margin="2" background-color="green" width="100%" height="50">Box 3</p>
    </td>
   </tr>
   <tr>
    <td>Normal flow</td>
    <td>Box 2 has left="10" top="-10" position="absolute" overflow="hidden"</td>
   </tr>
  </table>
  <p>
   The "overflow" attribute can be used to interesting effect with the CIRCLE, ELLIPSE and
   SHAPE elements.
  </p>
  <p>
   There are two other attributes which will be familiar to HTML JavaScript
   programmers, but which aren't as useful in PDF owing to the static nature of a
   PDF page - although we do support them. The <code>visibility</code> and
   <code>display</code> attributes affect whether an element on the page is
   displayed or not. The value of "visibility" defaults to "visible", but can be
   set to "hidden" to prevent display of an element and it's children, leaving
   the space it would have taken on the page empty. Alternatively, to remove an
   element altogether, set the "display" attribute to "none", which will prevent
   the element both from being displayed and from having space allocated for it
   on the page.
  </p>


  <h2 id="textfonts">Text and Fonts</h2>
  <h3 id="text">Text Elements</h3>
  <p>
   The text handling in the report generator revolves around the idea of a
   <i>paragraph</i> - a rectangular block of text. Every line of text in the document is
   inside a paragraph - either an explicit one caused by the P, PRE, BLOCKQUOTE or H1 to
   H4 elements, or an "anonymous" paragraph (more on these below).
  </p>
  <p>
   Inside a paragraph of text, the current font style may be changed by using <i>inline</i>
   elements, like B, I, A and SPAN. Inline elements may only be used inside a paragraph, but other
   than that are treated as normal blocks and may have a border, padding, background color or image
   as usual. Here's a simple example.
  </p>

  <pre class="example">
  &lt;body&gt;
    &lt;p&gt;This is a paragraph, &lt;b&gt;this is in bold&lt;/b&gt; and this is back to normal&lt;/p&gt;
  &lt;/body&gt; </pre>

  <p>
   Here's a table summarizing the various text elements and what they're intended for.
   More complete information is available in the <a href="#reftags">Element reference.</a>
  </p>

  <table id="TableElementType" class="defntable">
   <thead>
    <tr>
     <th padding-right="0.8in">Element</th><th padding-right="0.8in">Type</th><th>Purpose</th>
    </tr>
   </thead>
   <tr>
    <td>P</td>
    <td>paragraph</td>
    <td>A general purpose text container</td>
   </tr>
   <tr>
    <td>PRE</td>
    <td>paragraph</td>
    <td>A type of paragraph that preserves whitespace and newlines</td>
   </tr>
   <tr>
    <td>H1 - H4</td>
    <td>paragraph</td>
    <td>Used for headings</td>
   </tr>
   <tr>
    <td>BLOCKQUOTE</td>
    <td>paragraph</td>
    <td>Used for quotes - indented in from the margins to the left and right</td>
   </tr>
   <tr>
    <td>SPAN</td>
    <td>inline</td>
    <td>A general purpose inline element</td>
   </tr>
   <tr>
    <td>B</td>
    <td>inline</td>
    <td>Set the font weight to <b>bold</b></td>
   </tr>
   <tr>
    <td>I</td>
    <td>inline</td>
    <td>Set the font style to <i>italic</i></td>
   </tr>
   <tr>
    <td>U</td>
    <td>inline</td>
    <td>Set the text decoration to <u>underlined</u></td>
   </tr>
   <tr>
    <td>O</td>
    <td>inline</td>
    <td>Set the font style to <o>outlined</o></td>
   </tr>
   <tr>
    <td>A</td>
    <td>inline</td>
    <td>Set the text decoration to <a>underlined</a></td>
   </tr>
   <tr>
    <td>SUP</td>
    <td>inline</td>
    <td>Set the text to <sup>superscript</sup></td>
   </tr>
   <tr>
    <td>SUB</td>
    <td>inline</td>
    <td>Set the text to <sub>subscript</sub></td>
   </tr>
   <tr>
    <td>BIG</td>
    <td>inline</td>
    <td>Set the text to use a font size 1&frac14; times <big>normal size</big></td>
   </tr>
   <tr>
    <td>SMALL</td>
    <td>inline</td>
    <td>Set the text to use a font size &frac34; times <small>normal size</small></td>
   </tr>
   <tr>
    <td>STRIKE</td>
    <td>inline</td>
    <td>Set the text decoration to <strike>strike-out</strike></td>
   </tr>
   <tr>
    <td>TT</td>
    <td>inline</td>
    <td>Set the text to use a "<tt>typewriter</tt>" font, e.g.  <tt>Courier</tt></td>
   </tr>
   <tr>
    <td>ZAPF</td>
    <td>inline</td>
    <td>Set the text to use the Zapf-Dingbats font</td>
   </tr>
   <tr>
    <td>SYMBOL</td>
    <td>inline</td>
    <td>Set the text to use the Symbol font</td>
   </tr>
   <tr>
    <td>NOBR</td>
    <td>inline</td>
    <td>Set the text to turn off automatic linewrapping</td>
   </tr>
   <tr>
    <td>CODE</td>
    <td>inline</td>
    <td>Set the text to use a "<tt>typewriter</tt>" font, turn of line wrapping etc.</td>
   </tr>
   <tr>
    <td>EM</td>
    <td>inline</td>
    <td>Identical to <tt>I</tt></td>
   </tr>
   <tr>
    <td>STRONG</td>
    <td>inline</td>
    <td>Identical to <tt>B</tt></td>
   </tr>
  </table>

  <h3 id="anonpara">Anonymous Paragraphs</h3>
  <p>
   Under certain circumstances, the report generator will create "anonymous"
   paragraphs - basically it inserts a P element for you into the document where
   required. It will do this automatically if it finds text or inline elements
   directly inside a BODY, LI or TD element. Taking the example above, this could
   have been written as follows:
  </p>

  <pre class="example">
  &lt;body&gt;
    This is a paragraph, &lt;b&gt;this is in bold&lt;/b&gt; and this is back to normal
  &lt;/body&gt; </pre>

  <p>
   The Report Generator will automatically add the surrounding <tt>&lt;P&gt;</tt>
   and <tt>&lt;/P&gt;</tt>, so internally this is converted to
  </p>

  <pre class="example">
  &lt;body&gt;
    <b>&lt;p&gt;</b>This is a paragraph, &lt;b&gt;this is in bold&lt;/b&gt; and this is back to normal<b>&lt;/p&gt;</b>
  &lt;/body&gt; </pre>
  <p>
   If the parser is having trouble parsing a document, a good first step is to
   replace all the anonymous paragraphs with actual paragraphs, so you can see
   more clearly where the problem lies.
  </p>

  <h3 id="displayinline">Making block elements inline</h3>
  <p>
   Since version 1.1 it's also possible to display block elements like images, tables and so on
   inside a paragraph. This can be done by setting the <code>display</code> attribute to "inline",
   rather than the default value of "block" (this is a break with the CSS2 standard, where all
   elements default to inline - we hope to fix this in a future release). Here's an example.
  </p>
  <pre class="example">
   &lt;p&gt;
    This paragraph has an
    &lt;img <b>display="inline"</b> src="images/logo.png"/&gt;
    image in the middle.
   &lt;/p&gt;
  </pre>
  <p>and here's the result</p>
  <p class="example">
   This paragraph has an <img display="inline" src="resources/logosmall.jpg" alt="Small logo"/> image in the middle
  </p>
  <h3 id="verticalalign">Vertical Alignment</h3>
  <p>
   When mixing elements of differing heights in a paragraph, like the example above, there are
   several options available for vertical positioning. First, there are two definitions we need to
   make. The <b>Inline Box</b> is a box equivalent to the size of the inline item itself - usually
   a word or phrase, but as we saw above it's sometimes an image or similar.  The above example
   contains three inline boxes, one for the text before the image, one for the image and one for
   the text after it. Each inline box is the same size or smaller than the <b>Line Box</b>, which
   is simply the box representing the physical line, and is always just big enough to fit it's
   inline boxes.
  </p>
  <p page-break-after="avoid">
   In the example below, the line box is in yellow, the larger text-box is in green and the smaller of
   the two text-boxes is shown in orange.
  </p>
  <table fake="true" align="center" cellpadding="4" cellmargin-right="8" cellborder="1" line-height="100%">
   <tr>
    <td>
     <p background-color="yellow" font-size="24pt">
      <span background-color="lightgreen">Large</span>
      <span font-size="10pt" background-color="orange" vertical-align="top">&nbsp;&nbsp;Top&nbsp;&nbsp;</span>
     </p>
    </td>
    <td>
     <p background-color="yellow" font-size="24pt">
      <span background-color="lightgreen">Large</span>
      <span font-size="10pt" background-color="orange" vertical-align="middle">Middle</span>
     </p>
    </td>
    <td>
     <p background-color="yellow" font-size="24pt">
      <span background-color="lightgreen">Large</span>
      <span font-size="10pt" background-color="orange" vertical-align="baseline">Baseline</span>
     </p>
    </td>
    <td>
     <p background-color="yellow" font-size="24pt">
      <span background-color="lightgreen">Large</span>
      <span font-size="10pt" background-color="orange" vertical-align="bottom">Bottom</span>
     </p>
    </td>
   </tr>
  </table>
  <p>
   This example shows the four different options for vertical alignment within a line box, which is
   set with the <code>vertical-align</code> or <code>valign</code> attribute. "Top" places the top
   of the inline box at the top of the line box, "middle" places the middle of the inline box at
   the middle of the line box. "baseline", the default, places the baseline of the inline box at
   the baseline of the line box. Finally, "bottom" places the bottom of the text box at the bottom
   of the line box. There are two other values which can be used - "super" and "sub" - which place
   the text in the super or subscript position. These are not demonstrated here.
  </p>
  <p>
   The height of each inline box depends on both the size of the font used, and it's
   <i>leading</i>, or white space between lines. This is set with the <code>line-height</code>
   attribute. Each font has a preferred leading set by the font author, which is equivalent to
   setting <code>line-height</code> to "normal" - usually equivalent to between 100% and 120% of
   the font size. The <code>line-height</code> can also be set to a percentage, in which case it's
   a percentage of the current <code>font-size</code>.
  </p>
  <table fake="true" align="center" cellpadding="4" cellmargin-right="8" cellborder="1" font-size="18pt">
   <tr vertical-align="middle">
    <td><p background-color="orange" line-height="normal">line-height=normal</p></td>
    <td><p background-color="orange" line-height="100%">line-height=100%</p></td>
    <td><p background-color="orange" line-height="200%">line-height=200%</p></td>
   </tr>
  </table>
  <p>
   As you can see, any leading that is applied is split evenly above and below the text, as
   required by CSS2.
  </p>

  <h3 id="float">Float positioning</h3>
  <p>
   You've seen how to add blocks in the middle of a paragraph using the
   <code>display="inline</code> attribute, but there's one more common type of placement - known as
   <i>float positioning</i>.  This causes the inline box to "float" to the left or right of the
   paragraph, and allows text to wrap around it.
  </p>
  <p requote="true" text-align="justify" border="1" font-size="22pt" padding="4" margin-bottom="0pt">
   <div float="right" width="120" height="50" border="1" margin-left="10" background-color="blue" alt="blue box"/>
   "The following text will be drawn around the box to the right. When it grows beyond that box,
   it will automatically fill the full width of the line."
  </p>
  <pre class="example">
  &lt;p requote="true" text-align="justify" border="1" font-size="22pt" padding="4"&gt;
   &lt;div <b>float="right"</b> width="120" height="50" background-color="blue"/&gt;
   "The following text will be drawn around the box to the right. When it
   grows beyond that box, it will automatically fill the full width of the line."
  &lt;/p&gt;
  </pre>
  <p>
   Any inline elements can be floated to the left or right (setting the <code>float</code>
   attribute causes <code>display</code> to be automatically set to "inline"), and floating blocks can be started anywhere
   in a paragraph, not just at the start. Usually the floating block will start at the current
   line, but this depends on the value of the <code>clear</code> attribute. This attribute can be
   set to "none", "left", "right" or "both", to cause a floating block to be displayed only when the left
   margin is clear of any other floating blocks, the right margin is clear, or both are clear. The
   default is "none", which effectively says "it doesn't matter if there is another floating box to
   the left or right - put me on the first line you can". Here's an example showing the various
   different settings in combination.
  </p>
  <p align="center" text-align="justify" border="1" font-size="12pt" padding="4" margin-bottom="0pt">
   <div float="right" clear="right" width="40" height="40" border="1" margin="2" background-color="yellow" alt="yellow box"/>
   <div float="right" clear="right" width="40" height="40" border="1" margin="2" background-color="orange" alt="orange box"/>
   <div float="right" clear="none" width="40" height="40" border="1" margin="2" background-color="lightgreen" alt="green box"/>
   Text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text
   <div float="left" clear="none" width="40" height="40" border="1" margin="2" background-color="pink" alt="pink box"/>
   <div float="left" clear="none" width="40" height="40" border="1" margin="2" background-color="lightblue" alt="blue box"/>
   <div float="left" clear="none" width="40" height="40" border="1" margin="2" background-color="khaki" alt="khaki box"/>
   <div float="left" clear="left" width="40" height="40" border="1" margin="2" background-color="salmon" alt="salmon box"/>
   More more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more more
  </p>
  <pre class="sexample" page-break-before="avoid">
 &lt;p border="1" font-size="12pt" padding="4"&gt;
  &lt;div float="right" clear="right" width="40" height="40" background-color="<span background-color="yellow">yellow</span>"/&gt;
  &lt;div float="right" clear="right" width="40" height="40" background-color="<span background-color="orange">orange</span>"/&gt;
  &lt;div float="right" clear="none" width="40" height="40" background-color="<span background-color="lightgreen">lightgreen</span>"/&gt;
  Text text text text...
  &lt;div float="left" clear="none" width="40" height="40" background-color="<span background-color="pink">pink</span>"/&gt;
  &lt;div float="left" clear="none" width="40" height="40" background-color="<span background-color="lightblue">lightblue</span>"/&gt;
  &lt;div float="left" clear="none" width="40" height="40" background-color="<span background-color="khaki">khaki</span>"/&gt;
  &lt;div float="left" clear="left" width="40" height="40" background-color="<span background-color="salmon">salmon</span>"/&gt;
  More more more more...
 &lt;/p&gt;
  </pre>


  <h3 id="textatts">Text Attributes</h3>
  <p>
   There a several attributes that can be set to control how text is displayed in
   the document. Most of the "inline" elements defined above set one of these
   attributes to alter the style of text - for example, the <tt>&lt;b&gt;</tt>
   element is identical to <tt>&lt;span font-weight="bold"&gt;</tt>. Almost all
   of these are taken from CSS2, and are in many cases identical to the values
   used in HTML.  Full details for each attribute are defined in the <a
   href="#reftags">Attribute reference section</a>.
  </p>
  <table id="TableTextAttributes" class="defntable">
   <thead>
    <tr>
     <th padding-right="0.4in">Attribute name</th>
     <th padding-right="0.8in">Values</th>
     <th>Description</th>
    </tr>
   </thead>
   <tr>
    <td>font-family</td>
    <td>name of a font</td>
    <td>
     Set the font face, e.g. "Times", "Helvetica", "monospace" or a user defined
     font. The CSS2 generic fonts "serif", "sans-serif" and "monospace" are also
     recognised, and mapped to Times, Helvetica and Courier by default. Since version
     1.0.14, it's possible to specify more than one font-family, seperated by spaces or
     commas. This is commonly done in HTML to say "use the first font in this list
     that's available", but the actual meaning is "display each characters using the
     first font in the list that contains it". This is particularly useful with PDF
     fonts - for example, setting <code>font-family="Times, Symbol"</code> would mean
     that text will be displayed in the Times Roman font if the character is available,
     otherwise the Symbol font will be used. This makes it easy to mix text from
     different fonts, eg. <span>abc&alpha;&beta;&gamma;</span>.
    </td>
   </tr>
   <tr>
    <td>font-style</td>
    <td>normal / italic / outline</td>
    <td>
     Set the style of the font face - italic, outline or a combination, e.g "italic outline".
    </td>
   </tr>
   <tr>
    <td>font-weight</td>
    <td>normal or bold</td>
    <td>Set the weight of the font. Only two weights are recognized, normal and bold</td>
   </tr>
   <tr>
    <td>font-size</td>
    <td>size of the font</td>
    <td>
     Set the size of the font. Can be "absolute", (e.g. "12pt") or "relative", (e.g.
     "1.5em", where 1em is the current size of the font). Other valid values, as
     defined in CSS2, are "larger" and "smaller", as well as "xx-small",
     "x-small", "small", "medium", "large", "x-large" and "xx-large". "medium" is
     equivalent to 11pt.
     </td>
   </tr>
   <tr>
    <td>font-variant</td>
    <td>normal / small-caps</td>
    <td>
     Set the font-variant - either <code>normal</code> (the default) or
     <code>small-caps</code>. The small-caps font is synthesized, so no explicit
     small-caps font is required. <span font-variant="small-caps">This transformation is quite time consuming, so
     avoid using it for long phrases</span>.
    </td>
   </tr>
   <tr>
    <td>font-stretch</td>
    <td>normal / ultra-condensed / extra-condensed / condensed / semi-condensed / semi-expanded / expanded / extra-expanded / ultra-expanded</td>
    <td>
     Set the horizontal stretching of the font. Note this attribute is not typographically correct,
     in that it simply stretches the text rather than choosing a variant of the typeface. This will
     result in <span font-stretch="expanded">wider</span> or <span font-stretch="condensed">narrower</span> vertical stems.
    </td>
   </tr>
   <tr>
    <td>line-height</td>
    <td>number</td>
    <td>
     Set the spacing between successive lines of text - either "normal" to choose the spacing the
     font-designer recommended, a percentage (100% for line-height=font-size), or explicitly, eg "14pt"
    </td>
   </tr>
   <tr>
    <td>font</td>
    <td>font description</td>
    <td>
     This shorthand property allows you to set the font family, size, style, weight,
     variant and line spacing with one attribute, eg. <code>"bold 12/14pt
     Times"</code>.  See the CSS2 specification for a full description of this
     attribute.
    </td>
   </tr>
   <tr>
    <td>color</td>
    <td>color</td>
    <td>Set the color of the font</td>
   </tr>
   <tr>
    <td>outline-color</td>
    <td>color</td>
    <td>Set the color of the outline of the font, if it's drawn</td>
   </tr>
   <tr>
    <td>outline-width</td>
    <td>number</td>
    <td>Set the width of the outline of the font, if it's drawn</td>
   </tr>
   <tr>
    <td>text-indent</td>
    <td>number</td>
    <td>
     Set the indentation of the first line of text in a paragraph. A positive
     number indents the first line to the right, a negative number to the left.
    </td>
   </tr>
   <tr>
    <td>text-decoration</td>
    <td><nobr>underline or line-through</nobr></td>
    <td>Set the text decoration - underlined or struck out</td>
   </tr>
   <tr>
    <td>text-transform</td>
    <td>normal / capitalize / uppercase / lowercase</td>
    <td>
     Set the text transformation - "capitalize" capitalizes the first letter
     of each word, and "uppercase" and "lowercase" transform the whole phrase
     accordingly.
    </td>
   </tr>
   <tr>
    <td>text-align</td>
    <td>left / right / center / justify</td>
    <td>
     Set the alignment of the text within it's paragraph box. This is a standard CSS2 attribute,
     unlike it's HTML counterpart <code>align</code>. However, in an effort to preserve HTML
     compatibility, both parameters are accepted - if <code>text-align</code> isn't set, the value
     of <code>align</code> is used instead.
    </td>
   </tr>
   <tr>
    <td>letter-spacing</td>
    <td>number</td>
    <td>
     Set the space between letters. A positive number moves letters further
     apart while a negative number moves them together. The default is zero
    </td>
   </tr>
   <tr>
    <td>justification-ratio</td>
    <td>number from 0 to 1</td>
    <td>
     When text is justified, extra space is placed between letters and words
     to increase the overall length of the line. This parameter controls how much
     space is added between letters, and how much between words. A value of 0
     means "only extend the spacing between words", while a value of 1 means "only
     extend the spacing between letters. The default is 0.5, which means add a bit
     to each. Note this setting has no effect if text is not justified - in that
     case, see the <code>letter-spacing</code> attribute.
    </td>
   </tr>
   <tr>
    <td>requote</td>
    <td>true or false</td>
    <td>Whether to use "curly" quotes or <span requote="false">"plain"</span> quotes.</td>
   </tr>
   <tr>
    <td><nobr>suppress-ligatures</nobr></td>
    <td>true or false</td>
    <td>Whether to automatically use the "fi", "fl" and "ffi" ligatures</td>
   </tr>
  </table>


  <h3 id="fonts">Fonts</h3>
  <h4 id="standardfonts">Built-in fonts</h4>
  <p>
   Every report created by the Report Generator can display the standard 5 fonts
   available in all PDF documents - <span font="Times"><b>Times</b></span>, <span
   font="Helvetica"><b>Helvetica</b></span> and <span
   font="Courier"><b>Courier</b></span>, as well as the "Symbol" and "ZapfDingbats"
   fonts. Times, Helvetica and Courier can also be referred to by the generic
   CSS2 names of "serif", "sans-serif" and "monospace". The following two lines
   give identical results:
  </p>
  <pre class="example">
  &lt;body&gt;
    &lt;p&gt;This is in &lt;span font-family="Helvetica"&gt;Helvetica&lt;/span&gt;&lt;/p&gt;
    &lt;p&gt;This is in &lt;span font-family="sans-serif"&gt;Helvetica&lt;/span&gt;&lt;/p&gt;
  &lt;/body&gt; </pre>
  <p>
   As well as the standard 5 fonts, users with the appropriate language version of Acrobat
   can access up to 7 further fonts to display Chinese, Japanese and Korean text. The
   names for these fonts are "<b>stsong</b>" (STSong-Light, simplified Chinese),
   "<b>msung</b>" (MSung-Light, traditional Chinese), "<b>mhei</b>" (MHei-Medium,
   traditional Chinese), "<b>heiseimin</b>" (HeiseiMin-W3, Japanese),
   "<b>heiseikakugo</b>" (HeiseiKakuGo-W5, Japanese), "<b>hygothic</b>" (HYGoThic-Medium,
   Korean) and "<b>hysmyeongjo</b>" (HYSMyeongJo-Medium, Korean).
  </p>
  <p>
   Thanks to the native Unicode support of Java, XML and the Report Generator, creating
   reports with non-latin characters is easy. We'll cover <a href="#i18n">more on this
   later</a>, but here's a quick example of how to use a JSP to create a document showing
   the current date in Japanese
  </p>
  <pre class="sexample">
  &lt;?xml version="1.0"?&gt;
  &lt;%@ page language="java" import="java.text.*"  contentType="text/xml; charset=UTF-8"%&gt;
  &lt;!DOCTYPE pdf PUBLIC "-//big.faceless.org//report" "report-1.1.dtd"&gt;

  &lt;% DateFormat f = DateFormat.getDateInstance(DateFormat.FULL, Locale.JAPANESE)); %&gt;

  &lt;pdf&gt;
    &lt;body font-family="HeiseiMin" font-size="18"&gt;
      Today is &lt;%= f.format(new java.util.Date()) %&gt;
    &lt;/body&gt;
  &lt;/pdf&gt; </pre>


  <h4 id="opentype">OpenType and WOFF fonts</h4>
  <p>
   One of the strengths of PDF documents is their ability to embed fonts into the document
   - both OpenType&trade; (also known as TrueType&trade;) and Type 1 fonts can easily be embedded.
  </p>
  <p>
   When embedding fonts, it's important to remember a key point about the PDF
   specification. Each font variation (there are four - normal, <i>italic</i>,
   <b>bold</b> and <b><i>bold-italic</i></b>) is treated as a completely separate
   font. For the built in fonts, this isn't important, but when embedding a font
   authors need to remember that if even one letter is to be displayed in italic,
   two fonts will need to be embedded instead of one - the normal version and the
   italic.
  </p>
  <p>
   OpenType fonts can be embedded using one or two bytes per glyph. Two bytes are recommended
   for any fonts that will be used to display glyphs outside the 8859-1 character set - Japanese,
   Chinese, Russian, Czech, Arabic and so on. The "bytes" attribute on the LINK element sets how many
   bytes are used - if not specified, it defaults to 1.
  </p>
  <p>
   So how do you embed a font? Let's take as an example the Times Roman font,
   supplied with Microsoft Windows. It's an OpenType font, and there are four
   files that make up the font, one for each variation as described above.
  </p>
  <pre class="example">
  &lt;pdf&gt;
    &lt;head&gt;
      <b>&lt;link name="mytimes" type="font" subtype="opentype" src="times.ttf" bytes="1"/&gt;</b>
    &lt;/head&gt;
    &lt;body <b>font-family="mytimes"</b> font-size="18"&gt;
       Hello in an embedded OpenType font
    &lt;/body&gt;
  &lt;/pdf&gt; </pre>
  <p>
   This shows the basic setup embedding a single font variation (the value "truetype"
   can also be used as a synonum for "opentype"). Notice that when
   we link in the font we set the "name" attribute, which we then reference later
   in the document. But what do we do if we want it in italic as well?
  </p>
  <pre class="example">
  &lt;pdf&gt;
    &lt;head&gt;
      &lt;link name="mytimes" type="font" subtype="opentype"
            src="times.ttf" <b>src-italic="timesi.ttf"</b>/&gt;
    &lt;/head&gt;
    &lt;body font-family="mytimes" font-size="18"&gt;
       Hello in an embedded, &lt;i&gt;italic&lt;/i&gt; OpenType font
    &lt;/body&gt;
  &lt;/pdf&gt; </pre>
  <p>
   By setting the "src", "src-italic", "src-bold" and "src-bolditalic" attributes
   in the LINK element we can have access to the entire range of styles in the
   font. If a variation isn't used, it isn't embedded in the document, so it
   doesn't hurt to link in all the variations - the size of the document won't be
   increased.
  </p>
  <p>
   Two additional aspects of OpenType fonts can be set, both of which default to
   true. Whether the font is embedded in the document or just referenced by name
   is controlled by the "embed" attribute, and whether the font is subset or not
   is controlled by the "subset" attribute. Generally it's best to leave these
   untouched.
  </p>
  <h4>OpenType Collections and WOFF fonts</h4>
  <p>
   WOFF fonts are a variation of the standard OpenType format, and since 1.1.63 we can
   load them in the same way as an OpenType. No change to the XML is required, although
   you can use "woff" as a subtype if you prefer - it is a synonym for "opentype". The
   WOFF 2.0 format is <b>not yet supported</b> - we support WOFF 1.0 only.
  </p>
  <p>
   We also support loading a particular font from an <i>OpenType Collection</i>. A collection
   is a number of fonts bundled into one file - as many of the datastructures are shared,
   this can sometimes save significant space overall and we see it most with fonts for the
   East Asian languages such as Chinese and Japanese.
  </p>
  <p>
   To reference a particular font in an OpenType collection, add a fragment identifier
   of the form '#font=<i>n</i>' to the font identifying which item in the collection you want, with the first font
   at index 1. For example, to load the second font in the collection:
  </p>
   <pre class="example">
  &lt;pdf&gt;
    &lt;head&gt;
      &lt;link name="mingliu" type="font" subtype="opentype" src="mingliu.ttf#font=2"/&gt;
    &lt;/head&gt;
    &lt;body font-family="mytimes" font-size="18"&gt;MingLiU Proportional&lt;/body&gt;
  &lt;/pdf&gt; </pre>



  <h4 id="type1">Type 1 fonts</h4>
  <p>
   Similar to OpenType fonts above, Type 1 fonts can be used too. These usually
   come as two separate files - an "AFM" file, describing the size of the
   characters, and a "PFA" or "PFB" file describing the actual characters
   themselves.
  </p>
  <p>
   The AFM file must always be available, as otherwise the Report Generator won't
   know the size of the characters or which characters are available in the font.
   The PFB file <i>should</i> always be included, but isn't mandatory. Leaving it
   has the same effect as turning off embedding for OpenType fonts - if the font
   isn't installed on the viewers computer, it will be approximated.
  </p>
  <p>
   Here's an example of how to embed a Type 1 font in the document.
  </p>
  <pre class="example">
  &lt;pdf&gt;
    &lt;head&gt;
      &lt;link name="BitstreamCharter" type="font" <b>subtype="type1"</b>
            src="charter.afm" <b>pfbsrc="charter.pfb"</b>/&gt;
    &lt;/head&gt;
    &lt;body font-family="BitstreamCharter" font-size="18"&gt;
       Hello in an embedded Type 1 font
    &lt;/body&gt;
  &lt;/pdf&gt; </pre>
  <p>
   Like OpenTypes, the italic, bold and bold-italic variants must be included
   separately, using the "src-italic", "src-bold" and "src-bolditalic" for the
   AFM files, and "pfbsrc-italic", "pfbsrc-bold" and "pfbsrc-bolditalic" for the
   PFB or PFA files.
  </p>


  <h2 id="tables">Tables</h2>
  <p>
   The table syntax is almost identical to HTML with a few added features. Each table is a
   block (as described in the "box model" section above), with one or more rows (the TR
   element) containing several columns (the TH and TD elements).
  </p>
  <p>
   Cells can span several columns or rows by setting the "colspan" and "rowspan"
   attributes. As each row and cell are also blocks, their margin, padding, border and
   backgrounds can be set separately (in CSS2 a row cannot have padding, margin or border
   set. We allow this, but only the vertical components - e.g. setting <tt>&lt;tr
   border="1"&gt;</tt> only sets the top and bottom borders to 1. This is necessary to lay
   the table out correctly).  Here's an example:
  </p>

  <pre class="example">
  &lt;table width="100%" border="2"&gt;
    &lt;tr&gt;
      &lt;th colspan="2" align="center"&gt;Countries and their foods&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr background-color="#D0D0D0"&gt;
      &lt;th&gt;Country&lt;/th&gt;
      &lt;th&gt;Food&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Wales&lt;/th&gt;
      &lt;td&gt;Leek&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Argentina&lt;/th&gt;
      &lt;td&gt;Steak&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Denmark&lt;/th&gt;
      &lt;td&gt;Herring&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt; </pre>

  <p>
   And here's what it looks like.
  </p>
  <table id="TableCountryExample" page-break-before="avoid" page-break-inside="avoid" width="100%" border="2">
   <tr>
    <th colspan="2" align="center">Countries and their foods</th>
   </tr>
   <tr background-color="#D0D0D0"><th scope="col">Country</th><th scope="col">Food</th></tr>
   <tr><th>Wales</th><td>Leek</td></tr>
   <tr><th>Argentina</th><td>Steak</td></tr>
   <tr><th>Denmark</th><td>Herring</td></tr>
  </table>
  <p>
   When migrating from HTML tables, you need to remember that the <code>border</code>
   directive sets the border for the entire table, rather than the border around each of
   it's cells. To draw a border around every cell, you can either set the
   <code>border</code> attribute for each of them or set the <code>cellborder</code>
   option for the table. Likewise, the HTML attribute "cellspacing", which set the margin
   for each cell, has been renamed to "cellmargin".
  </p>


  <h3 id="tablepagination">Pagination with tables - headers and footers</h3>
  <p>
   When a table is too long to fit on a page, it may be broken into smaller tables that do
   fit (this can be prevented by setting the "page-break-inside" attribute - see
   <a href="#pagination">Pagination</a> for more detail). A common requirement when this
   happens is to reprint a standard header or footer row in the table.
  </p>
  <p>
   This can be done using the THEAD, TBODY and TFOOT elements - also part of HTML,
   although not commonly used. These elements allow rows in the table to be assigned to
   the header, the body or the footer of the table. If the table is all on one page, this
   distinction isn't important, but if it's split over several pages this allows the
   Report Generator to reprint the headers and footers on each sub-table as required.
   Here's an example.
  </p>

  <pre class="example">
  &lt;table&gt;
    <b>&lt;thead&gt;</b>
      &lt;tr&gt;&lt;td&gt;Animal name&lt;/td&gt;&lt;td&gt;Habitat&lt;/td&gt;&lt;/tr&gt;
    <b>&lt;/thead&gt;</b>
    <b>&lt;tbody&gt;</b>
      &lt;tr&gt;&lt;td&gt;Aardvark&lt;/td&gt;&lt;td&gt;Africa&lt;/td&gt;&lt;/tr&gt;
      &lt;tr&gt;&lt;td&gt;Ant&lt;/td&gt;&lt;td&gt;My Kitchen&lt;/td&gt;&lt;/tr&gt;
      &lt;tr&gt;&lt;td&gt;Anteater&lt;/td&gt;&lt;td&gt;South America&lt;/td&gt;&lt;/tr&gt;
      &lt;tr&gt;&lt;td&gt;Antelope&lt;/td&gt;&lt;td&gt;Africa&lt;/td&gt;&lt;/tr&gt;
      &lt;tr&gt;&lt;td&gt;Armadillo&lt;/td&gt;&lt;td&gt;South America&lt;/td&gt;&lt;/tr&gt;
    <b>&lt;/tbody&gt;</b>
  &lt;/table&gt; </pre>

  <p>
   If a row is added to a table directly (without being placed inside a THEAD, TBODY or
   TFOOT element), it's assumed to be inside the TBODY. The TH element, meant to represent
   a table header, is purely stylistic and is treated no differently to the TD element in terms
   of layout.
  </p>


  <h3 id="tablelayout">Table Layout algorithms</h3>
  <p>
   A table is laid-out according to one of two algorithms - which one is controlled by the
   setting of the "table-layout" attribute. The default is "auto", which means the table
   is laid out according to the "automatic" layout algorithm recommended in the CSS2
   specification. This is the same as that used by most web browsers, where each cell is
   sized based both on it's content, any width or height that is specified and the size of
   the other cells in it's row and column.
  </p>
  <p>
   The other option is "fixed", where the table is laid out according to the "fixed"
   layout algorithm from the CSS2 specification. This algorithm is slightly faster, as it
   sizes each cell based only on the "width" attributes, not on the cell contents. The
   TABLE element must have an explicit "width" attribute set, otherwise the layout
   algorithm defaults to auto.
  </p>
  <p>
   There are some other subtle differences between HTML, CSS and the table model we use
   here. See the "table" entry in the Element and Attribute Reference section for more
   detail.
  </p>


  <h2 id="lists">Lists</h2>
  <p>
   The Report Generator supports two types of list - "ordered" (specified by the OL
   element) and "unordered" (specified by the UL element).  Each list contains one or more
   "list elements", specified by the LI element.  The elements are printed on the page one
   after the other, often indented slightly and with a "marker" next to it. The marker is the
   only real difference between the two types of list. Here are a couple of examples
   demonstrating this - the only difference are the UL and OL elements:
  </p>

  <table fake="true" width="100%">
   <tr>
    <td width="70%">
     <pre width="100%" class="example">
  <b>&lt;ul&gt;</b>
    &lt;li&gt;Item 1&lt;/li&gt;
    &lt;li&gt;
      <b>&lt;ul&gt;</b>
        &lt;li&gt;Item 2.1&lt;/li&gt;
        &lt;li&gt;Item 2.2&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Item 3&lt;/li&gt;
  &lt;/ul&gt; </pre>
    </td>
    <td vertical-align="middle">
     <ul>
      <li>Item 1</li>
      <li>
       Foo
       <ul>
        <li>Item 2.1</li>
        <li>Item 2.2</li>
       </ul>
      </li>
      <li>Item 3</li>
     </ul>
    </td>
   </tr>
   <tr>
    <td>
     <pre width="100%" class="example">
  <b>&lt;ol&gt;</b>
    &lt;li&gt;Item 1&lt;/li&gt;
    &lt;li&gt;
      <b>&lt;ol&gt;</b>
        &lt;li&gt;Item 2.1&lt;/li&gt;
        &lt;li&gt;Item 2.2&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Item 3&lt;/li&gt;
  &lt;/ul&gt; </pre>
    </td>
    <td vertical-align="middle">
     <ol>
      <li>Item 1</li>
      <li>
       <ol>
        <li>Item 2.1</li>
        <li>Item 2.2</li>
       </ol>
      </li>
      <li>Item 3</li>
     </ol>
    </td>
   </tr>
  </table>
  <p>
   In the ordered list, the "marker" are the arabic numerals starting at 1. In the
   unordered list, they're the small bullets, or "discs". These can be changed by setting
   the "marker-type" attribute of the list itself. Valid values can be either a literal or
   one of the following values.
  </p>
  <table class="defntable" id="markertypetable">
   <thead>
    <tr><th>Marker name</th><th>Description</th></tr>
   </thead>
   <tr>
    <td>disc</td>
    <td>A round bullet (character U+2022). Unordered</td>
   </tr>
   <tr>
    <td>middle-dot</td>
    <td>A small round bullet (character U+00B7). Unordered</td>
   </tr>
   <tr>
    <td>decimal</td>
    <td>The arabic numerals starting at "1"</td>
   </tr>
   <tr>
    <td>lower-roman</td>
    <td>Lowercase roman numerals starting at "i"</td>
   </tr>
   <tr>
    <td>upper-roman</td>
    <td>Uppercase roman numerals starting at "I"</td>
   </tr>
   <tr>
    <td>lower-alpha</td>
    <td>Lowercase latin letters starting at "a"</td>
   </tr>
   <tr>
    <td>upper-alpha</td>
    <td>Uppercase latin letters starting at "A"</td>
   </tr>
   <tr>
    <td>circled-number</td>
    <td>Circled numbers from 1 to 20 (character U+2460 to U+2473)</td>
   </tr>
  </table>
  <p>
   If the marker-type is not one of these values, it's printed literally. This can be used
   with good effect with a "dingbats" font. The font for the marker can be set using the
   "marker-font-family", "marker-font-style" and "marker-font-weight" attributes, which do
   the same job for markers as "font-family", "font-style" and "font-weight" do for normal
   text.
  </p>
  <p>
   Also of note are the "marker-prefix" and "marker-suffix" attributes, which can be used
   to display a literal immediately before or after the marker. Here are some examples:
  </p>
  <table fake="true" width="100%" cellborder="1" cellpadding="4" cellmargin="2">
   <tr>
    <td>
     <ol marker-type="decimal" marker-prefix="(" marker-suffix=")">
      <li>Item 1</li>
      <li>Item 2</li>
      <li>Item 3</li>
     </ol>
     <code>marker-type="decimal"</code><br/>
     <code>marker-prefix="("</code><br/>
     <code>marker-suffix=")"</code>
    </td>
    <td>
     <ol marker-type="lower-alpha">
      <li>Item 1</li>
      <li>Item 2</li>
      <li>Item 3</li>
     </ol>
     <code>marker-type="lower-alpha"</code>
    </td>
    <td>
     <ol marker-type="lower-roman">
      <li>Item 1</li>
      <li>Item 2</li>
      <li>Item 3</li>
     </ol>
     <code>marker-type="lower-roman"</code>
    </td>
   </tr>
  </table>
  <table fake="true" width="100%" cellborder="1" cellpadding="4" cellmargin="2">
   <tr>
    <td>
     <ul marker-type="&#x2717;" marker-font-family="ZapfDingbats">
      <li>Item 1</li>
      <li>Item 2</li>
      <li>Item 3</li>
     </ul>
     <code>marker-type="&amp;#x2717;"</code><br/>
     <code>marker-font-family="ZapfDingbats"</code>
    </td>
    <td>
     <ol marker-type="circled-number" marker-font-family="ZapfDingbats" marker-suffix="">
      <li>Item 1</li>
      <li>Item 2</li>
      <li>Item 3</li>
     </ol>
     <code>marker-type="circled-number"</code>&nbsp;&nbsp;&nbsp;
     <code>marker-suffix=""</code><br/>
     <code>marker-font-family="ZapfDingbats"</code><br/>
    </td>
   </tr>
  </table>
  <p page-break-after="avoid">
   A useful feature which is missing in HTML is the ability to create <i>hierarchical</i>
   lists. This is most easily demonstrated.
  </p>
  <table fake="true" width="100%">
   <tr>
    <td width="70%">
     <pre width="100%" class="example">
  &lt;ol marker-type="upper-alpha" <b>marker-hierarchy="true"</b>&gt;
    &lt;li&gt;Item 1&lt;/li&gt;
    &lt;li&gt;
      &lt;ol marker-type="lower-roman"&gt;
        &lt;li&gt;Item 2.1&lt;/li&gt;
        &lt;li&gt;Item 2.2&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Item 3&lt;/li&gt;
  &lt;/ol&gt; </pre>
    </td>
    <td vertical-align="middle">
     <ol marker-type="upper-alpha" marker-hierarchy="true">
      <li>Item 1</li>
      <li>
       <ol marker-type="lower-roman">
        <li>Item 2.1</li>
        <li>Item 2.2</li>
       </ol>
      </li>
      <li>Item 3</li>
     </ol>
    </td>
   </tr>
  </table>
  <p>
   As you can see, the "marker-hierarchy" attribute allows nested lists to refer
   to the value of the parent list. The value specified by the
   "marker-hierarchy-separator" attribute is the literal (if any) to place between
   the nested elements, performing a similar job to "marker-prefix" and
   "marker-suffix". It defaults to ".".
  </p>
  <p>
   The final setting relating to lists is the "marker-offset". This is the
   distance away from the left edge of the list element to place the marker.
   Generally this is the same as the list elements "padding-left" attribute
   (which defines how far in the list element is nested), but it can be made
   smaller to indent the marker as well.
  </p>

  <h2 id="images">Images</h2>
  <p>
   The Report Generator can embed several different bitmap image formats - PNG,
   JPEG, GIF, PBM, PGM and TIFF. There are some restrictions however:
  </p>
  <ul>
   <li>
    Progressive JPEG images can only be read in Acrobat 4.x and greater, and as they're
    larger as well they should be avoided and standard baseline JPEG's used.
   </li>
   <li>
    Animated GIF images can be used, but only the first frame will be shown. GIF
    images may use any number of colors.
   </li>
   <li>
    Old-style JPEG, NeXT and Thunderscan TIFF image sub-formats are not supported, but
    these variations have been been seen in decades now.
   </li>
   <li>
    Transparency, including alpha transparency, is fully supported in the GIF and PNG
    image formats.
   </li>
   <li>
    Only the first image of multi-image PGM and PBM images will be used. ASCII
    encoded PNMs cannot be parsed.
   </li>
  </ul>
  <table fake="true">
   <tr>
    <td>
     <p>
      The size of the image depends on the size in pixels of the bitmap, and the
      dots-per-inch (or DPI) it's rendered at. As PDF is a print-based medium, there
      is no fixed "pixel size" which determines the size of the image. A 200 x 200
      pixel bitmap at 200dpi will only take up one square inch - at 600dpi it takes
      a third of an inch.
     </p>
     <p>
      The image DPI can be set by the "dpi" attribute, and defaults to the DPI set in the
      image. GIF, most PNG and the occasional TIFF image don't specify a default DPI, in
      which case it defaults to 72 - which conveniently means that a 200 x 200 pixel bitmap
      takes 200 x 200 points on the page.  Depending on the type of image this may not be
      high enough - it's probably OK for photographs but hi-resolution line-art generally
      requires 200 to 300dpi to avoid appearing blocky when printed.
     </p>
     <p>
      As well as using the "dpi" attribute, the width and height of an image can be set
      directly in the same way as for any other block - using the "width" and "height"
      attributes. The document author is responsible for making sure there is no change in
      aspect ratio.
     </p>
    </td>
    <td margin-left="12" padding="4" border="1" align="center">
     <code>&lt;img src="canoe.jpg" dpi="200"/&gt;</code>
     <img src="resources/canoe.jpg" dpi="200" alt="Canoe"/>
     <code><br/>&lt;img src="canoe.jpg" dpi="600"/&gt;</code>
     <img src="resources/canoe.jpg" dpi="600" alt="Canoe"/>
    </td>
   </tr>
  </table>
  <p>
   The TIFF image format allows multiple pages as part of a single image. To select a
   specific page of a TIFF image, simply add a "#n" to the image URL. For example, to load
   the second page of a multi-page TIFF image, add the following XML to your document:
  </p>
  <pre class="example">
&lt;img src="file:/path/to/myimage.tif#2"/> </pre>
  <p>
   URLs for the the image may be absolute or relative, in which case they're relative to
   the base URL of the source file. Technically this is the System-ID of the
   <code>InputSource</code> the XML is being parsed from: this is generally the URL the XML
   is loaded from, although this is under the control of the software 
  </p><p>
   The "alt" attribute can be set on an image, as in HTML, although this is typically not necessary.
   The only time it is required is if a <a href="#pdfa">PDF/UA</a> document is being created.
  </p>

  <h2 id="barcodes">Barcodes</h2>
  <p>
   The Report Generator can print barcodes directly to the document using one of several
   barcode algorithms. This is generally more convenient than including bitmap
   representations of the barcode, and always results in smaller files.  The size of the
   barcode depends on the value to be printed and the "bar-width" attribute (the width of
   the narrowest bar - may be set to values between 0.6 and 1). This means the the "width"
   element is ignored, and the height may be set within the limits imposed by the barcode
   algorithm - the minimum height is 15% of the width or 18 points, whichever is greater.
  </p>
  <pre class="example">
&lt;barcode codetype="code128" showtext="true" value="My Value"/&gt; </pre>
  <p>
   The value of the barcode is set by the mandatory "value" attributes, and the "showtext"
   attribute (which may be true or false) determines whether a human readable version of
   the value is printed below the code. The actual bar code algorithm used is set by the
   mandatory "codetype" attribute, and may be one of the following values. If a value
   contains characters outside the range that can be displayed by the selected code type,
   an error occurs.
  </p>
  <table id="TableBarcode" class="defntable">
   <thead>
    <tr><th>Code name</th><th>Description</th></tr>
   </thead>
   <tr>
    <td>code128</td>
    <td>
     <barcode codetype="code128" showtext="true" value="Code 128" float="right"/>
     Code 128, a modern variable-width code. Can display ASCII values from 0x00 to 0xFF.
     Code128 has several variations, the package chooses the most compact one based on
     the data.
    </td>
   </tr>
   <tr>
    <td>code39</td>
    <td>
     <barcode codetype="code39" showtext="true" value="CODE 39" float="right"/>
     Code 3 of 9. An older code, widely used but not terribly compact. Can display the
     symbols A to Z and digits, space - + $ . % / *. May use the "bar-ratio" attribute.
    </td>
   </tr>
   <tr>
    <td>code39checksum</td>
    <td>
     <barcode codetype="code39checksum" showtext="true" value="CODE 39" float="right"/>
     Code 3 of 9 with checkdigit. Identical to code39 but with a checkdigit added.
    </td>
   </tr>
   <tr>
    <td>code25</td>
    <td>
     <barcode codetype="code25" showtext="true" value="0123456789" float="right"/>
     Interleaved Code 2 of 5. Can display digits only, but is fairly compact. May use the
     "bar-ratio" attribute.
    </td>
   </tr>
   <tr>
    <td>code25checksum /<br/>code25deutschenpost</td>
    <td>
     <barcode codetype="code25checksum" showtext="true" value="0123456789" float="right"/>
     Interleaved Code 2 of 5 with checkdigit. Identical to code25 but with a checkdigit
     added. The "code25deutschenpost" value can be used to select the checksum algorithm
     used by Deutschen Post in Germany for the Leitcode and Identcode symbols.
    </td>
   </tr>
   <tr>
    <td>codabar</td>
    <td>
     <barcode codetype="codabar" showtext="true" value="A12345B" float="right"/>
     CodaBar algorithm. Variable-width code used by Fed-Ex amongst others, the first and
     last symbols must be a stop code from A to D, and the symbols in the middle must be a
     digit or one of + - $ / : or the decimal point "."
    </td>
   </tr>
   <tr>
    <td>ean13 / upca</td>
    <td>
     <barcode codetype="ean13" showtext="true" bar-width="0.75" value="978059600197" float="right"/>
     EAN-13 - the international variable-width barcode used on groceries and books,
     always 13 digits long.  The last digit is a checkdigit, which may or may not be
     specified. Generally EAN-13 codes should have their bar-width attribute set to
     0.75, which makes the whole code one inch wide. The codetype "upca" may also be
     used to generate US-format UPC-A barcodes. These are identical except that the
     value must be 10 or 11 digits long.
    </td>
   </tr>
   <tr>
    <td>ean8</td>
    <td>
     <barcode codetype="ean8" showtext="true" bar-width="0.8" value="5512345" float="right"/>
     EAN-8 is an 8-digit barcode which is very similar to EAN-13 in design and purpose. It's 
     typically used where an EAN-13 barcode would be too large.
    </td>
   </tr>
   <tr>
    <td>postnet</td>
    <td>
     <barcode codetype="postnet" showtext="false" value="90210" padding-left="2em" float="right"/>
     PostNet algorithm, used by the US Postal Service to encode ZIP codes, so it only
     represents digits. The height and width of this code are fixed according to the
     specification, so the "width" and "height" attributes are ignored.
    </td>
   </tr>
   <tr>
    <td>rm4scc</td>
    <td>
     <barcode codetype="rm4scc" showtext="false" value="W1W5BB9Z" float="right"/>
     Royal Mail 4-state Customer Code. A 4-state code used by the Royal Mail in the UK
     to encode postcodes. Like PostNet, the width and height of this code are fixed.
     This algorithm can encode digits and the upper-case letters A-Z.
    </td>
   </tr>
   <tr>
    <td>intelligentmail</td>
    <td>
     <barcode codetype="intelligentmail" value="0199910000012345678990210" float="right"/>
     The IntelligentMail&reg; barcode, introduced in 2008 by the USPS to replace Postnet.
     It takes a 20, 25, 29 or 31 digit value and has a fixed width and height.
    </td>
   </tr>
   <tr>
    <td>maxicode</td>
    <td>
     <barcode codetype="maxicode" value="This is a MaxiCode symbol containing a fairly long sentence" width="80" height="80" float="right"/>
     MaxiCode symbol. MaxiCode is a 2-D barcode invented by UPS but now in the public domain.
     These codes are different to the other barcode types in that they are always 80x80 points
     (the "width" and "height" attributes should be set to 80), and "showtext" is ignored. A
     MaxiCode symbol can encode up to 183 ISO-8859-1 characters of general text (extended error
     correction is used if space permits it), or for addressing
     a "Structured Carrier Message" can be specified. For an SCM the value must begin with "])>",
     and the format must be as specified in section B.2 of the MaxiCode specification.
    </td>
   </tr>
   <tr>
    <td>pdf417</td>
    <td>
     <barcode codetype="pdf417" value="142 Charing Cross Road, London, WC2H0LB" width="80" height="25" float="right"/>
     PDF417 is a "stacked" 2D barcode - probably the most common one. It's 
     used for a wide variety of purposes (for instance, paper archives of electronic
     invoices in Spain must use PDF417). The "width" and "height" attributes must be set
     but other attributes will be ignored. To target the earlier (partly incompatible)
     version of the spec, use a type of "pdf417:2001", and to use ECI markers to identify
     the encoding explicitly (which is not supported by all readers), use "pdf417:eci"
    </td>
   </tr>
   <tr>
    <td>qrcode</td>
    <td>
     <barcode codetype="qrcode" value="http://bfo.com" width="60" float="right"/>
     QR-Code is a 2D barcode, invented and commonly used in Japan but making headway
     elsewhere too, due to it's ability to store Kanji and it's incredible density -
     the largest version can store over 6000 digits. The "width" and/or "height" attributes
     must be set but other attributes will be ignored.
    </td>
   </tr>
   <tr>
    <td>datamatrix</td>
    <td>
     <barcode codetype="datamatrix" value="http://bfo.com" width="40" float="right"/>
     Data Matrix is another commonly used 2D barcode. By default a square datamatrix will
     be used, but if the width is a multiple of the height a rectangular code will be produced.
    </td>
   </tr>
   <tr>
    <td>databar</td>
    <td>
     <barcode codetype="databar" value="1234567890123" float="right" margin-left="20pt"/>
     GS1 Databar (formerly known as RSS-14) is a fixed size 1D barcode that can
     represent 14 digits. It requires no quiet zone, so you may want to consider adding
     margin or padding to barcodes using this symbol.
    </td>
   </tr>
   <tr>
    <td>aztec</td>
    <td>
     <barcode codetype="aztec" value="http://bfo.com" width="40" margin-left="10" float="right"/>
     Aztec Code is a modern, compact 2D barcode that is visually quite similar to QR Code.
    </td>
   </tr>
   <tr>
    <td>deutchepostmatrix</td>
    <td>
     <barcode codetype="deutschepostmatrix" value="http://bfo.com" margin-left="10" float="right"/>
     Deutsche Post have their own "post matrix" code, which is a variation on DataMatrix. The code
     has a fixed size and the "width" attribute should be left unspecified.
    </td>
   </tr>
  </table>
  <p>
   Two of the codes listed above - Code 3/9 and Interleaved 2/5 - are not "variable width"
   codes, and use just two bars - a thick bar and a thin bar. These algorithms may
   optionally use the "bar-ratio" attribute to specify the ratio between the width of
   thick and thin bars. Some knowledge of the algorithms limits are recommended if altering
   this value, which defaults to 2.8. If this attribute is specified for a variable-width
   barcode, it's ignored.
  </p>



  <h2 id="genericblock">Generic Blocks and Vector Graphics</h2>
  <p>
   Sometimes the need arises to group elements together inside a block - for example, to
   set the language or class for a number of elements, or to position several
   absolutely-positioned elements relative to the same point. There are several generic
   elements in the XML syntax, the most familiar one being DIV (short for
   <i>division</i>), which is also used in HTML.
  </p>
  <p>
   The DIV element can contain other blocks as children - tables, paragraphs or other divs
   are common.  A plain DIV by itself has no appearance on the page (although one can
   obviously be given by setting the background color and border, as for any block).
  </p>
  <table fake="true">
   <tr>
    <td>
     <p>
      Performing an identical function to DIV but with a slight twist are the
      CIRCLE, ELLIPSE and SHAPE elements. As a block is just a rectangle on a page,
      these elements can be used to define the shape that's drawn within this
      rectangle.
     </p>
     <p>
      These can be used for interesting effect, especially as like a DIV they can
      also contain other blocks as children. For instance, a paragraph or image
      could be placed inside an ELLIPSE whose "overflow" attribute was set to
      "hidden" to give a porthole-like view on the contents, like the example to the
      right.
     </p>
    </td>
    <td>
     <circle radius="50" left="50" top="50" overflow="hidden" border="0">
      <img src="resources/canoe.jpg" width="100" height="100" alt="Canoe"/>
     </circle>
    </td>
   </tr>
  </table>
  <p>
   Note that the children of these shapes are not shaped to fit, merely trimmed - for example,
   a paragraph of text will still be rectangular, but this method allows only a portion of that
   rectangle to be seen.
  </p>
  <p>
   These elements can also be used to draw diagrams, often by setting the "position"
   attribute to "absolute". Here's an example:
  </p>
  <table fake="true" page-break-before="avoid" width="100%">
   <tr>
    <td>
     <pre class="example">
  &lt;style&gt;
  .pic div { position:absolute; width:75; height:75 }
  &lt;/style&gt;

  &lt;div class="pic" width="150" height="150"&gt;
    &lt;div background-color="red"/&gt;
    &lt;div left="75" background-color="green"/&gt;
    &lt;div top="75" background-color="yellow"/&gt;
    &lt;div left="75" top="75" background-color="cyan"/&gt;
    &lt;ellipse width="150" height="150" border="2"/&gt;
  &lt;/div&gt; </pre>
    </td>
    <td>
     <div width="150" height="150">
      <div position="absolute" width="75" height="75" background-color="red" alt="red box"/>
      <div position="absolute" left="75" width="75" height="75" background-color="green" alt="green box"/>
      <div position="absolute" top="75" width="75" height="75" background-color="yellow" alt="yellow box"/>
      <div position="absolute" left="75" top="75" width="75" height="75" background-color="cyan" alt="cyan box"/>
      <ellipse position="absolute" width="150" height="150" border="2"/>
     </div>
    </td>
   </tr>
  </table>
  <h3 id="ellipse">Ellipses</h3>
  <p>
   The ELLIPSE element takes the same attributes as a DIV - a "width" and "height" to
   specify the width and height of the ellipse.
  </p>
  <h3 id="circle">Circles</h3>
  <p>
   The CIRCLE element is an alternative to the ELLIPSE. Instead of specifying the width
   and height, the mandatory "radius" attribute must be set to the radius of the circle.
   Unlike the ellipse, the "left" and "top" attributes specify the location for the center
   of the circle, not the top-left corner of the rectangle containing it. This can be
   confusing when the circle is relatively positioned, as it will appear to be misplaced -
   in this case the "left" and "top" attributes need to be set to the same value as the
   "radius", or the ELLIPSE element used instead.
  </p>
  <h3 id="ellipse">Shapes</h3>
  <p>
   The SHAPE element allows a custom shape to be defined by a drawing lines, arcs and
   bezier curves. This shape may then be painted and/or may contain other blocks, which
   will be painted inside the shape - usually with the shapes "overflow" attribute set to
   "hidden" to clip it's children to the bounds of the shape.
  </p>
  <p>
   Each SHAPE element must contain a SHAPEPATH which defines the shape, and then may
   optionally contain other blocks like the DIV element. The SHAPEPATH defines the outline
   to draw, and may contain the following elements.
  </p>
  <table id="TableShapeExample" class="defntable">
   <thead>
    <tr>
     <td>Element</td>
     <td>Example</td>
     <td>Description</td>
    </tr>
   </thead>
   <tr>
    <td>moveto</td>
    <td><code>&lt;moveto x="20" y="20"/&gt;</code></td>
    <td>Moves the cursor to the specified location without marking the page.</td>
   </tr>
   <tr>
    <td>lineto</td>
    <td><code>&lt;lineto x="20" y="20"/&gt;</code></td>
    <td>Draws a straight line to the specified location</td>
   </tr>
   <tr>
    <td>arcto</td>
    <td><code>&lt;arcto width="100" height="100"<br/>startangle="0" endengle="90"/&gt;</code></td>
    <td>
     Draws an arc from an ellipse. The size of the ellipse is specified by the "width" and
     "height" attributes, and the section to draw is specified by the "startangle" and
     "endangle". This example would draw an arc from the current cursor position to a
     position 50 points to the right and 50 points down the page.
    </td>
   </tr>
   <tr>
    <td>bezierto</td>
    <td><code>&lt;bezierto x="100" y="100" cx1="50"<br/>cy1="0" cx2="50" cy2="100"/&gt;</code></td>
    <td>
     Draws a bezier curve to the location specified by "x" and "y". cx1,cy1 is the
     location of the first control point and cx2,cy2 is the location of the second.
    </td>
   </tr>
  </table>
  <p>
   This is difficult to visualize so here are some examples. The first shows how to draw a
   diamond.
  </p>
  <table fake="true" page-break-before="avoid" width="100%">
   <tr>
    <td>
     <pre class="example">
  &lt;shape width="100" height="100" border="1"&gt;
    &lt;shapepath&gt;
      &lt;moveto x="50%" y="0%"/&gt;
      &lt;lineto x="100%" y="50%"/&gt;
      &lt;lineto x="50%" y="100%"/&gt;
      &lt;lineto x="0%" y="50%"/&gt;
      &lt;lineto x="50%" y="0%"/&gt;
    &lt;/shapepath&gt;
  &lt;/shape&gt; </pre>
    </td>
    <td align="center" valign="middle">
     <shape width="100" height="100" border="1" alt="Sample Shape">
      <shapepath>
       <moveto x="50%" y="0%"/>
       <lineto x="100%" y="50%"/>
       <lineto x="50%" y="100%"/>
       <lineto x="0%" y="50%"/>
       <lineto x="50%" y="0%"/>
      </shapepath>
     </shape>
    </td>
   </tr>
  </table>
  <p>
   If you then wanted to place some text inside this diamond, clipped to it's edges, you
   could do this:
  </p>
  <table fake="true" page-break-before="avoid" width="100%">
   <tr>
    <td>
     <pre class="example">
  &lt;shape width="100" height="100" overflow="hidden"&gt;
    &lt;shapepath&gt;
      &lt;moveto x="50%" y="0%"/&gt;
      &lt;lineto x="100%" y="50%"/&gt;
      &lt;lineto x="50%" y="100%"/&gt;
      &lt;lineto x="0%" y="50%"/&gt;
      &lt;lineto x="50%" y="0%"/&gt;
    &lt;/shapepath&gt;
    &lt;p&gt;
      This text will be clipped at the edge of the diamond.
    &lt;/p&gt;
  &lt;/shape&gt; </pre>
    </td>
    <td align="center" valign="middle">
     <shape width="100" height="100" border="1" overflow="hidden" alt="Sample Shape">
      <shapepath>
       <moveto x="50%" y="0%"/>
       <lineto x="100%" y="50%"/>
       <lineto x="50%" y="100%"/>
       <lineto x="0%" y="50%"/>
       <lineto x="50%" y="0%"/>
      </shapepath>
      <p>This text will be clipped at the edges of the diamond</p>
     </shape>
    </td>
   </tr>
  </table>

  <h2 id="graphs">Graphs</h2>
  <p>
   The ability to plot inline graphs is a key feature of the Report Generator.  The usual
   method of including graphical information (creating the graph as a bitmap using a
   separate package then including it as an image) has the disadvantages of increasing the
   size of the document and giving poor results, especially when compared to a vector
   based language like PDF.
  </p>
  <p>
   With the Big Faceless Report Generator, graphs can be created using the same methods
   you would normally use to create a dynamic table (for example) - with a JSP or similar.
   The graphs are built using our Graph Library, which uses a 3D engine to create fully
   shaded, realistic graphs.
  </p>
  <p page-break-after="avoid">
   So how do you create a graph? Here's a simple Pie Graph to get you started.
  </p>
  <table fake="true" width="100%">
   <tr>
    <td>
     <pre class="sexample">
  &lt;piegraph width="200" height="150"
   yrotation="30" display-key="flat-outer"&gt;
    &lt;gdata name="Monday" value="19"/&gt;
    &lt;gdata name="Tuesday" value="14"/&gt;
    &lt;gdata name="Wednesday" value="12"/&gt;
    &lt;gdata name="Thursday" value="17"/&gt;
    &lt;gdata name="Friday" value="13"/&gt;
    &lt;gdata name="Saturday" value="8"/&gt;
    &lt;gdata name="Sunday" value="3"/&gt;
  &lt;/piegraph&gt; </pre>
    </td>
    <td>
     <piegraph width="200" height="150" yrotation="30" display-key="flat-outer" alt="Sample PieGraph">
      <gdata name="Monday" value="19"/>
      <gdata name="Tuesday" value="14"/>
      <gdata name="Wednesday" value="12"/>
      <gdata name="Thursday" value="17"/>
      <gdata name="Friday" value="13"/>
      <gdata name="Saturday" value="8"/>
      <gdata name="Sunday" value="3"/>
     </piegraph>
    </td>
   </tr>
  </table>
  <p>
   The library supports two broad categories of graph - those plotting <i>discrete</i>
   data, including Pie Graphs and Bar Graphs, and <i>continuous</i> data, ie; Line Graphs
   and Area Graphs. The discrete graphs all use the same pattern shown above, a graph
   element with one or more GDATA elements describing a (name, value) pair, whereas the
   continuous graphs focus on "curves" - a mathematical function created either from
   sampled values (stock prices over the year, for example) or pure functions (like a sine
   curve). These use either a DATACURVE or a SIMPLECURVE. Here's an example of both.
  </p>
  <table fake="true" width="100%">
   <tr>
    <td>
     <pre class="sexample">
  &lt;linegraph width="200" height="150"&gt;
    <b>&lt;datacurve name="Measurements"&gt;</b>
      &lt;sample x="1" y="0.5"/&gt;
      &lt;sample x="2" y="0.9"/&gt;
      &lt;sample x="3" y="1.3"/&gt;
      &lt;sample x="4" y="1.2"/&gt;
      &lt;sample x="5" y="1.7"/&gt;
      &lt;sample x="6" y="2"/&gt;
      &lt;sample x="7" y="1.8"/&gt;
    &lt;/datacurve&gt;
    <b>&lt;simplecurve name="Predicted"
     method="java.lang.Math.log"/&gt;</b>
  &lt;/linegraph&gt; </pre>
    </td>
    <td>
     <linegraph width="200" height="150" alt="Sample LineGraph">
      <datacurve name="Measurements">
       <sample x="1" y="0.5"/>
       <sample x="2" y="0.9"/>
       <sample x="3" y="1.3"/>
       <sample x="4" y="1.2"/>
       <sample x="5" y="1.7"/>
       <sample x="6" y="2"/>
       <sample x="7" y="1.8"/>
      </datacurve>
      <simplecurve name="Predicted" method="java.lang.Math.log"/>
     </linegraph>
    </td>
   </tr>
  </table>
  <p>
   The DATACURVE is made up of two or more SAMPLE elements, which have an "x" and
   "y" attribute relating to the point on the graph. The SIMPLECURVE takes the
   full name of a java method in it's "method" attribute - this method must meet
   three criteria or an exception will be thrown:
  </p>
  <ol>
   <li>It must be static</li>
   <li>It must take a single double as its parameters</li>
   <li>It must a return a double as its result</li>
  </ol>

  <h3 id="graphatts">General Graph attributes</h3>
  <p>
   There are a very large number of attributes that can be set to control how the graphs
   appear - more than those used by all the other elements combined! These are detailed
   separately in the <a href="#reftags">reference section</a>, but we'll go over some of
   them here too. The best way to try them out is to experiment, and to have a look at the
   <b>"graphs.xml"</b> example, supplied in the <tt>example/samples</tt> directory.
  </p>
  <p>
   First, every graph is a block element, which means it can have padding, borders, a
   background color and all the other attributes appropriate for a block.
  </p>
  <p>
   In addition, every graph can have the following attributes set (these are covered in
   more detail in the <a href="#reftags">reference section</a>).
  </p>
  <table id="TableGraphAttributes" class="defntable">
   <thead>
    <tr><th>Attribute</th><th>value</th><th>Description</th></tr>
   </thead>
   <tr>
    <td>default-colors</td>
    <td>list of colors</td>
    <td>
     The colors to use to display the graph, as a comma separated list. These are used in
     the order specified, and when the list is exhausted the sequence starts again from
     the beginning.
    </td>
   </tr>
   <tr>
    <td>xrotation</td>
    <td>an angle in degrees</td>
    <td>
     The angle to rotate the graph around the X-axis. The X axis runs horizontally through
     the graph, from left to right.
    </td>
   </tr>
   <tr>
    <td>yrotation</td>
    <td>an angle in degrees</td>
    <td>
     The angle to rotate the graph around the Y-axis. The Y axis runs vertically down the
     graph, from top to bottom.
    </td>
   </tr>
   <tr>
    <td>zrotation</td>
    <td>an angle in degrees</td>
    <td>
     The angle to rotate the graph around the Y-axis. The Z axis goes "into" the document
    </td>
   </tr>
   <tr>
    <td>display-key</td>
    <td>none / right / bottom / top / left </td>
    <td>
     Where to place the key relative to the graph. Pie Graphs have even moreoptions to
     choose from. The default is "bottom".
    </td>
   </tr>
   <tr>
    <td>key-<i>attributename</i></td>
    <td>font style</td>
    <td>
     The style to give the font used to display the key. The attributes have the same
     names as those used for normal text (e.g color, font-family, font-size), but are
     prefixed with "key-" to make "key-color", "key-font-family", "key-font-size", and so
     on.
    </td>
   </tr>
   <tr>
    <td>keybox-color</td>
    <td>color</td>
    <td>
     The color to fill the box containing the key with. If the "display-key" value is not
     "top", "right", "bottom" or "left", this value is ignored.
    </td>
   </tr>
   <tr>
    <td>keybox-border-color</td>
    <td>color</td>
    <td>
     The border color to outline the box containing the key with. If the "display-key"
     value is not "top", "right", "bottom" or "left", this value is ignored.
    </td>
   </tr>
   <tr>
    <td>light-level</td>
    <td>0 to 100</td>
    <td>
     The intensity of the light used to simulate the shading on the graph. A value of 0
     gives no shading at all, a value of 100 gives deep shadows. The default is 70.
    </td>
   </tr>
   <tr>
    <td>light-vector</td>
    <td>a vector, e.g. "(1,0,0)"</td>
    <td>
     The direction of the light used to determine the shadows on the graph. The vector is
     specified as a vector of the form (X,Y,Z). The default is "(1,0,0)" which causes the
     light to appear to come from the right side of the graph.
    </td>
   </tr>
  </table>

  <h3 id="piegraph">Pie Graphs</h3>
  <table fake="true">
   <tr>
    <td>
     <p>
      The PIEGRAPH element is the only type of graph that isn't plotted using axes.  Pie
      graphs have a wider range of key types than the other graphs - as well as having the
      key placed in a box around the graph, pie graphs can have <i>inner</i> keys, where
      the name of the value is written directly on the slice, <i>outer</i> keys, where
      it's written next to the relevant slice, or a combination.
     </p>
     <p>
      The examples to the right are "rotated-inner-flat-outer" and "flat-outer" (in total
      there are 6 different options for "display-key" that are specific to Pie Graphs, so
      we won't demonstrate them all here). Below are the list of valid options for
      "display-key" that are specific to Pie Graphs.
     </p>
     <table fake="true" class="defntable">
      <thead>
       <tr>
        <th>"display-key" value</th>
        <th>Description</th>
       </tr>
      </thead>
      <tr>
       <td>flat-inner-flat-outer</td>
       <td>
        Put the label on the slice if it fits, or next to the slice if it doesn't.
       </td>
      </tr>
      <tr>
       <td>flat-inner-rotated-outer</td>
       <td>
        Put the label on the slice if it fits, or rotate it and put it next to the slice
        if it doesn't.
       </td>
      </tr>
      <tr>
       <td>rotated-inner-rotated-outer</td>
       <td>
        Put the label on the slice if it fits, or next to the slice if it doesn't. Rotate
        it to the same angle as the slice regardless.
       </td>
      </tr>
      <tr>
       <td>rotated-inner-flat-outer</td>
       <td>
        Put the label on the slice and rotate it to the same angle if it fits: otherwise,
        put it next to the graph and don't rotate it.
       </td>
      </tr>
      <tr>
       <td>flat-outer</td>
       <td>Put the label next to the slice</td>
      </tr>
      <tr>
       <td>rotated-outer</td>
       <td>
        Put the label next to the slice and rotate it to the same angle as the slice
       </td>
      </tr>
     </table>
    </td>
    <td>
     <piegraph width="150" height="150" display-key="rotated-inner-flat-outer" alt="Sample PieGraph">
      <gdata name="" value="70"/>
      <gdata extend="10" name="inner" value="30"/>
     </piegraph>
     <piegraph width="150" height="150" display-key="flat-outer" alt="Sample PieGraph">
      <gdata name="" value="70"/>
      <gdata extend="10" name="outer" value="30"/>
     </piegraph>
    </td>
   </tr>
  </table>
  <p>
   When we say "if it fits" above, this is not to be taken literally (after rotation on
   three axes the math to determine this is well beyond us).  Instead, the
   "outer-key-percentage" attribute can be set to the minimum percentage of the pie a
   slice can be before it is considered too narrow for an inner key.
  </p>
  <p>
   Slices from the pie can be "extended" away from the center of the graph, like we've
   done above. This can be done by setting the "extend" attribute on the GDATA element to
   the percentage of the radius of the pie to extend the slice. The examples here have the
   purple slice set to "10".
  </p>
  <p>
   Another useful feature of Pie graphs is the "other" slice. The Report Generator can
   automatically group values below a certain size, to prevent the graph becoming too
   cluttered. The "other-percentage" sets the threshold (it defaults to zero) and the
   "other-label" is the label to use, which defaults to the word "other".
  </p>
  <p>
   A further problem wih Pie Graphs is what to do when the value to be plotted is zero.
   Of course, having a slice of Pie that's 0% of the whole doesn't make sense in the
   real world, but occasionally it's useful to be able to indicate that the value <i>might</i>
   have been present. To control this, the "display-zeros" attribute can be set to
   <code>true</code> or <code>false</code> - if true, the zero values will be displayed as
   infinitely small slices. If false, they will be skipped completely (the default)
  </p>

  <h3 id="axesgraph">Axes Graphs</h3>
  <p>
   Every graph other than the Pie Graph is plotted against two or more <i>axes</i> - and
   consequently they all have several attributes in common.     First, we need to define some
   terms.
  </p>
  <ul>
   <li>
    A <b>formatter</b> determine how the values printed on an axis are displayed - as
    currencies, dates, integers and so on.
   </li>
   <li>
    A <b>label</b> is the name of the axis, like "day of week" or "number of units".
    Labels on axes are optional, and off by default.
   </li>
   <li>
    <p>
     A <b>style</b> is the name given to a group of attributes which together define how a
     text element in the graph appears. Like the "key" attributes in the general graph
     attributes section, these always have a common prefix followed by the name of a text
     attribute - for example "xaxis-font-family" and "xaxis-color" set the style of the
     values printed on the X axis, in the same way that "font-family" and "color" set the
     style of normal text in the document. Valid suffixes are:
    </p>
    <ul>
     <li><b>color</b> - the color of the text</li>
     <li><b>font-family</b> - the font family of the text</li>
     <li><b>font-style</b> - the font style of the text ("normal" or "italic")</li>
     <li><b>font-weight</b> - the font weight of the text ("normal" or "bold")</li>
     <li><b>font-size</b> - the font size of the text, in points</li>
     <li><b>align</b> - the horizontal alignment of the text ("left", "center" or "right")</li>
     <li><b>valign</b> - the vertical alignment of the text ("top", "middle" or "bottom")</li>
     <li><b>rotate</b> - the angle to rotate the text, in degrees clockwise.</li>
    </ul>
   </li>
  </ul>
  <p>
   With these definitions out of the way, we can list several attributes which are common
   to all graphs plotted on an axis.
  </p>
  <table id="TableSeriesAttributes" class="defntable">
   <thead>
    <tr><th>Attribute</th><th>Value</th><th>Description</th></tr>
   </thead>
   <tr>
    <td>xaxis</td>
    <td>style</td>
    <td>
     The "xaxis-" group of attributes set the style to display the values plotted on the X
     axis - e.g. "xaxis-color" or "xaxis-font-family". The default is black 7pt Helvetica.
    </td>
   </tr>
   <tr>
    <td>yaxis</td>
    <td>style</td>
    <td>
     The "yaxis-" group of attributes set the style to display the values plotted on the Y
     axis - e.g. "yaxis-color" or "yaxis-font-family". The default is black 7pt Helvetica.
    </td>
   </tr>
   <tr>
    <td>xaxis-formatter</td>
    <td>formatter</td>
    <td>
     The formatter to use to display the values on the X axis. See below for more on formatters
    </td>
   </tr>
   <tr>
    <td>yaxis-formatter</td>
    <td>formatter</td>
    <td>
     The formatter to use to display the values on the Y axis. See below for more on formatters
    </td>
   </tr>
   <tr>
    <td>xaxis-formatter-density</td>
    <td>normal sparse minimal</td>
    <td>
     The "density" of the X axis formatter. See below for more on formatters
    </td>
   </tr>
   <tr>
    <td>yaxis-formatter-density</td>
    <td>normal sparse minimal</td>
    <td>
     The "density" of the Y axis formatter. See below for more on formatters
    </td>
   </tr>
   <tr>
    <td>xaxis-label</td>
    <td>style</td>
    <td>
     The "xaxis-label-" group of attributes set the style to display the label given to
     the X axis - e.g.  "xaxis-label-color" or "xaxis-label-font-family". The default is
     black 10pt Helvetica.
    </td>
   </tr>
   <tr>
    <td>yaxis-label</td>
    <td>style</td>
    <td>
     The "yaxis-label-" group of attributes set the style to display the label given to
     the Y axis - e.g. "yaxis-label-color" or "yaxis-label-font-family". The default is
     black 10pt Helvetica.
    </td>
   </tr>
   <tr>
    <td>floor-color</td>
    <td>color</td>
    <td>
     Set the color to draw the floor of the graph. The <i>floor</i> is the plane where
     <i>y=0</i> or where <i>y=min(y)</i> - for most graphs this is where <i>y=min(y)</i>
     but for line graphs this depends on the value of the "xaxis-at-zero" attribute.
     Defaults to "none".
    </td>
   </tr>
   <tr>
    <td>floor-border-color</td>
    <td>color</td>
    <td>
     Set the color to draw the grid on the floor of the graph. Defaults to "none"
    </td>
   </tr>
   <tr>
    <td>floor-grid</td>
    <td>color</td>
    <td>
     Set which lines to draw on the grid on the floor of the graph. Valid values are
     <code>horizontal</code>, <code>vertical</code> or a combination of the two, e.g. <code>horizontal+vertical</code> (the default).
    </td>
   </tr>
   <tr>
    <td>ywall-color</td>
    <td>color</td>
    <td>
     Set the color to draw the Y wall of the graph. The <i>Y wall</i> is the plane where
     <i>x=0</i> or where <i>x=min(x)</i> - for most graphs this is where <i>x=min(x)</i>
     but for line graphs this depends on the value of the "yaxis-at-zero" attribute.
     Default to "none".
    </td>
   </tr>
   <tr>
    <td>ywall-border-color</td>
    <td>color</td>
    <td>
     Set the color to draw the grid on the Y wall of the graph. Defaults to "none"
    </td>
   </tr>
   <tr>
    <td>ywall-grid</td>
    <td>color</td>
    <td>
     Set which lines to draw on the grid on the Y wall of the graph. Valid values are
     <code>horizontal</code>, <code>vertical</code> or a combination of the two, e.g. <code>horizontal+vertical</code> (the default).
    </td>
   </tr>
   <tr>
    <td>zwall-color</td>
    <td>color</td>
    <td>
     Set the color to draw the Z wall of the graph. The <i>Z wall</i> is the "back wall"
     of the graph. Defaults to "none".
    </td>
   </tr>
   <tr>
    <td>zwall-border-color</td>
    <td>color</td>
    <td>
     Set the color to draw the grid on the Z wall of the graph. Defaults to "none"
    </td>
   </tr>
   <tr>
    <td>zwall-grid</td>
    <td>color</td>
    <td>
     Set which lines to draw on the grid on the Z wall of the graph. Valid values are
     <code>horizontal</code>, <code>vertical</code> or a combination of the two, e.g. <code>horizontal+vertical</code> (the default).
    </td>
   </tr>
   <tr>
    <td>axes-color</td>
    <td>color</td>
    <td>
     Set the color to draw the axes lines in. Default is black
    </td>
   </tr>
   <tr>
    <td>box-color</td>
    <td>color</td>
    <td>
     Set the color to draw the (optional) box around the entire graph. The default is
     "none", so no box is drawn.
    </td>
   </tr>
   <tr>
    <td>min-y</td>
    <td>number</td>
    <td>
     The minimum value to plot on the Y axis.  Can be used to just display the top of bar
     graphs or area graphs.
    </td>
   </tr>
   <tr>
    <td>max-y</td>
    <td>number</td>
    <td>
     The maximum value to plot on the Y axis. Can be used to increase the space above the
     top of the bars in a bar graph, for example.
    </td>
   </tr>
  </table>

  <h4 id="graphformatter">Formatting values on the axes</h4>
  <p>
   The X and Y axis values are displayed using a <i>formatter</i>. The default depends on
   the data being plotted, but is always either "integer()" or "floatingpoint()". The
   "xaxis-formatter" and "yaxis-formatter" can be set to one of the following values:
  </p>
  <table id="TableFormatterAttributes" class="defntable" page-break-before="avoid" page-break-inside="avoid">
   <thead><tr><th>Formatter</th><th>Description</th></tr></thead>
   <tr>
    <td>none</td>
    <td>Don't plot any values on this axis</td>
   </tr>
   <tr>
    <td>integer()</td>
    <td>Plot the values on the axis as integers</td>
   </tr>
   <tr>
    <td>percentage()</td>
    <td>Plot the values on the axis as percentages</td>
   </tr>
   <tr>
    <td>floatingpoint()</td>
    <td>Plot the values on the axis as floating point values</td>
   </tr>
   <tr>
    <td>floatingpoint(<i>min</i>,<i>max</i>)</td>
    <td>
     Plot the values on the axis as floating point values. The <i>min</i> and <i>max</i>
     values are the minimum and maximum number of decimal places to display.
    </td>
   </tr>
   <tr>
    <td>percentage(<i>numdp</i>)</td>
    <td>
     Plot the values on the axis as percentages. The number of decimal places is
     specified by the <i>numdp</i> attribute.
    </td>
   </tr>
   <tr>
    <td>currency()</td>
    <td>
     Plot the values as currency values. The currency format depends on the "country"
     part of the locale of the graph, as set by the "lang" attribute.
    </td>
   </tr>
   <tr>
    <td>currency(<i>locale</i>)</td>
    <td>
     Plot the values as currency values. The locale of the currency format is specified
     explicitly - e.g. "en_GB" or "de_DE".
    </td>
   </tr>
   <tr>
    <td>simple(<i>format</i>)</td>
    <td>
     Plot the values using a <code>java.text.DecimalFormat</code>. The <i>format</i>
     attribute specifies the format to use - e.g. "#0.0" to plot values that always have
     one decimal place.
    </td>
   </tr>
   <tr>
    <td>date()</td>
    <td>
     Plot values on the axis as a date, using the format "dd MMM yyyy" (only used with
     Line and Area graphs - see their entries for more information).
    </td>
   </tr>
   <tr>
    <td>date(<i>format</i>)</td>
    <td>
     Plot values on the axis as a date, using the specified
     <code>java.text.SimpleDateFormat</code> (only used with Line and Area graphs - see
     their entries for more information).
    </td>
   </tr>
  </table>
  <p>
   If these aren't enough, a <i>custom formatter</i> can be written in java and referenced
   from the Report Generator by specifying it's full class name. For example,
   <code>&lt;bargraph xaxis-formatter="com.mycompany.CustomFormatter()"&gt;</code>.
   All formatters are subclasses of the <code>org.faceless.graph.Formatter</code> class,
   which is described more fully in the API documentation.
  </p>
  <p>
   Additionally, the "density" of the formatter can be specified. This is an indication of
   how many values are to be plotted on the graph. This is set using the
   "xaxis-formatter-density" and "yaxis-formatter-density" attributes - values can be
   "normal", for between 8 and 14 values on the axis, "sparse" for between 4 and 7 values
   on the axis, and "minimal" for either 3 or 4 values on the axis, depending on data.
   Here's an example showing the differences on the Y-axis.
  </p>

  <table fake="true" page-break-before="avoid" width="100%">
   <tr>
    <td>
     <linegraph width="150" height="150" yaxis-formatter="floatingpoint()" yaxis-formatter-density="normal" xaxis-label="xaxislabel" yaxis-label="Normal density" alt="Sample LineGraph">
      <datacurve name="Measurements">
       <sample x="1" y="0.5"/>
       <sample x="2" y="0.9"/>
       <sample x="3" y="1.3"/>
       <sample x="4" y="1.2"/>
       <sample x="5" y="1.7"/>
       <sample x="6" y="2"/>
       <sample x="7" y="1.8"/>
      </datacurve>
     </linegraph>
    </td>
    <td>
     <linegraph width="150" height="150" yaxis-formatter="floatingpoint()" yaxis-formatter-density="sparse" yaxis-label="Sparse density" alt="Sample LineGraph">
      <datacurve name="Measurements">
       <sample x="1" y="0.5"/>
       <sample x="2" y="0.9"/>
       <sample x="3" y="1.3"/>
       <sample x="4" y="1.2"/>
       <sample x="5" y="1.7"/>
       <sample x="6" y="2"/>
       <sample x="7" y="1.8"/>
      </datacurve>
     </linegraph>
    </td>
    <td>
     <linegraph width="150" height="150" yaxis-formatter="floatingpoint()" yaxis-formatter-density="minimal" yaxis-label="Minimal density" alt="Sample LineGraph">
      <datacurve name="Measurements">
       <sample x="1" y="0.5"/>
       <sample x="2" y="0.9"/>
       <sample x="3" y="1.3"/>
       <sample x="4" y="1.2"/>
       <sample x="5" y="1.7"/>
       <sample x="6" y="2"/>
       <sample x="7" y="1.8"/>
      </datacurve>
     </linegraph>
    </td>
   </tr>
  </table>
  <p>
   And here are some examples of the different types of formatters. The various
   <code>date()</code> formatters will be dealt with separately below, as they are specific to
   line and area graphs.
  </p>
  <table fake="true" page-break-before="avoid" page-break-inside="avoid" width="100%">
   <tr>
    <td>
     <pre class="sexample">
  &lt;linegraph width="200" height="150"
   <b>yaxis-formatter="integer()"</b>
   yaxis-label="Integers"&gt;
    &lt;datacurve name="Measurements"&gt;
      &lt;sample x="1" y="0.5"/&gt;
      &lt;sample x="2" y="0.9"/&gt;
      &lt;sample x="3" y="1.3"/&gt;
      &lt;sample x="4" y="1.2"/&gt;
      &lt;sample x="5" y="1.7"/&gt;
      &lt;sample x="6" y="2"/&gt;
      &lt;sample x="7" y="1.8"/&gt;
    &lt;/datacurve&gt;
  &lt;/linegraph&gt; </pre>
    </td>
    <td valign="middle">
     <linegraph width="200" height="150" yaxis-label="Integers" yaxis-formatter="integer()" alt="Sample LineGraph">
     <datacurve name="Measurements">
      <sample x="1" y="0.5"/>
      <sample x="2" y="0.9"/>
      <sample x="3" y="1.3"/>
      <sample x="4" y="1.2"/>
      <sample x="5" y="1.7"/>
      <sample x="6" y="2"/>
      <sample x="7" y="1.8"/>
     </datacurve>
    </linegraph>
   </td>
  </tr>
  <tr>
   <td>
    <pre class="sexample">
  &lt;linegraph width="200" height="150"
   <b>yaxis-formatter="currency(en_GB)"</b>
   yaxis-label="Pounds"&gt;
    &lt;datacurve name="Measurements"&gt;
      &lt;sample x="1" y="0.5"/&gt;
      &lt;sample x="2" y="0.9"/&gt;
      &lt;sample x="3" y="1.3"/&gt;
      &lt;sample x="4" y="1.2"/&gt;
      &lt;sample x="5" y="1.7"/&gt;
      &lt;sample x="6" y="2"/&gt;
      &lt;sample x="7" y="1.8"/&gt;
    &lt;/datacurve&gt;
  &lt;/linegraph&gt; </pre>
    </td>
    <td valign="middle">
     <linegraph width="200" height="150" yaxis-label="Pounds" yaxis-formatter="currency(en_GB)" alt="Sample LineGraph">
      <datacurve name="Measurements">
       <sample x="1" y="0.5"/>
       <sample x="2" y="0.9"/>
       <sample x="3" y="1.3"/>
       <sample x="4" y="1.2"/>
       <sample x="5" y="1.7"/>
       <sample x="6" y="2"/>
       <sample x="7" y="1.8"/>
      </datacurve>
     </linegraph>
    </td>
   </tr>
  </table>

  <h3 id="bargraph">Bar Graphs</h3>
  <p>
   The simplest and most familiar type of bar graph can be created using a BARGRAPH
   element, which creates a single row of simple bars. Here's an example:
  </p>
  <table fake="true" page-break-before="avoid" width="100%">
   <tr>
    <td>
     <pre class="sexample">
  &lt;bargraph width="200" height="150" xaxis-rotate="45"&gt;
    &lt;gdata name="Monday" value="19"/&gt;
    &lt;gdata name="Tuesday" value="14"/&gt;
    &lt;gdata name="Wednesday" value="12"/&gt;
    &lt;gdata name="Thursday" value="17"/&gt;
    &lt;gdata name="Friday" value="13"/&gt;
    &lt;gdata name="Saturday" value="8"/&gt;
    &lt;gdata name="Sunday" value="3"/&gt;
  &lt;/bargraph&gt; </pre>
    </td>
    <td>
     <bargraph width="200" height="150" xaxis-rotate="45" alt="Sample Bargraph">
      <gdata name="Monday" value="19"/>
      <gdata name="Tuesday" value="14"/>
      <gdata name="Wednesday" value="12"/>
      <gdata name="Thursday" value="17"/>
      <gdata name="Friday" value="13"/>
      <gdata name="Saturday" value="8"/>
      <gdata name="Sunday" value="3"/>
     </bargraph>
    </td>
   </tr>
  </table>
  <p>
   If you compare this with the pie graph example shown above, you'll notice that other
   than the name of the element and a couple of attributes, the XML is almost identical.
   We've set the "xaxis-rotate" attribute to rotate the values on the X axis to 45 degrees
   - useful for longer values.
  </p>
  <p>
   Four attributes common to all variants of bar graphs are "bar-depth", "bar-width",
   "round-bars" and "display-barvalues". The first two set the size of the bar
   relative to the square that it sits on, and both default to 100%. The "round-bars"
   attribute can be set to true or false, and if true turns each bar from a box into a
   cylinder - a nice effect, although it takes a little longer to draw. The
   "display-barvalues" attribute allows the value of the bar to be plotted directly
   on or above the bar - values can be either "top" to display the value above the
   bar, "middle" to display it in the middle of the bar, "insidetop" to display the
   value at the end of but just inside the bar, or "none" to not display it at all (the
   default).
  </p>

  <h3 id="depthbargraph">Depth Bar Graphs</h3>
  <p page-break-after="avoid">
   For more than one set of data, the simple BARGRAPH shown above can't cope, and it's
   necessary to turn to one of the other three options. The first is a DEPTHBARGRAPH,
   which plots the different sets behind each other. To be effective, this graph really
   needs to be shown in 3D. We've also set the "xaxis-align" attribute to "right", which
   is effective with 3D rotation.  Here's an example: Notice the "name2" attribute on the
   GDATA elements. This sets the name of the values on the second axes, and is used with
   TOWERBARGRAPH and MULTIBARGRAPH graphs as well.
  </p>
  <table fake="true" page-break-before="avoid" width="100%">
   <tr>
    <td>
     <pre class="sexample">
   &lt;depthbargraph width="200" height="150"
    xaxis-align="right" xrotation="30" yrotation="30"&gt;
     &lt;gdata name="January" name2="2001" value="19"/&gt;
     &lt;gdata name="April" name2="2001" value="14"/&gt;
     &lt;gdata name="July" name2="2001" value="12"/&gt;
     &lt;gdata name="October" name2="2001" value="17"/&gt;
     &lt;gdata name="January" name2="2000" value="22"/&gt;
     &lt;gdata name="April" name2="2000" value="18"/&gt;
     &lt;gdata name="July" name2="2000" value="17"/&gt;
     &lt;gdata name="October" name2="2000" value="17"/&gt;
   &lt;/depthbargraph&gt; </pre>
    </td>
    <td>
     <depthbargraph width="200" height="150" xaxis-align="right" xrotation="30" yrotation="30" alt="Sample Bargraph">
      <gdata name="January" name2="2001" value="19"/>
      <gdata name="April" name2="2001" value="14"/>
      <gdata name="July" name2="2001" value="12"/>
      <gdata name="October" name2="2001" value="17"/>
      <gdata name="January" name2="2000" value="22"/>
      <gdata name="April" name2="2000" value="18"/>
      <gdata name="July" name2="2000" value="17"/>
      <gdata name="October" name2="2000" value="17"/>
     </depthbargraph>
    </td>
   </tr>
  </table>

  <h3 id="multibargraph">Multi Bar Graphs</h3>
  <p>
   When 3D isn't an option the DEPTHBARGRAPH isn't very effective, and a MULTIBARGRAPH is
   a better choice. This plots several narrow columns next to each other on the one axis,
   but other than that is identical in function to the DEPTHBARGRAPH. We've set the
   "zwall-border-color" so you can see more clearly where the divisions between values
   are.
  </p>
  <table fake="true" page-break-before="avoid" width="100%">
   <tr>
    <td>
     <pre class="sexample">
  &lt;multibargraph width="200" height="150"
    xaxis-rotate="45" zwall-border-color="black"
    bar-width="80%" display-barvalues="middle"&gt;
     &lt;gdata name="January" name2="2001" value="19"/&gt;
     &lt;gdata name="April" name2="2001" value="14"/&gt;
     &lt;gdata name="July" name2="2001" value="12"/&gt;
     &lt;gdata name="October" name2="2001" value="17"/&gt;
     &lt;gdata name="January" name2="2000" value="22"/&gt;
     &lt;gdata name="April" name2="2000" value="18"/&gt;
     &lt;gdata name="July" name2="2000" value="17"/&gt;
     &lt;gdata name="October" name2="2000" value="17"/&gt;
  &lt;/multibargraph&gt; </pre>
   </td>
   <td>
    <multibargraph width="200" height="150" xaxis-rotate="45" zwall-border-color="black" bar-width="80%" display-barvalues="middle" display-key="bottom" alt="Sample Bargraph">
     <gdata name="January" name2="2001" value="19"/>
     <gdata name="April" name2="2001" value="14"/>
     <gdata name="July" name2="2001" value="12"/>
     <gdata name="October" name2="2001" value="17"/>
     <gdata name="January" name2="2000" value="13"/>
     <gdata name="April" name2="2000" value="8"/>
     <gdata name="July" name2="2000" value="12"/>
     <gdata name="October" name2="2000" value="14"/>
    </multibargraph>
   </td>
   </tr>
  </table>
  <p>
   Notice the "name2" attribute on the GDATA elements. This sets the name of the values on
   the second axes, and is used with TOWERBARGRAPH and MULTIBARGRAPH graphs as well. We also
   set the "display-barvalues" attribute to middle and slightly reduced the bar-width, which
   can help the legibility of this type of graph.
  </p>

  <h3 id="towerbargraph">Tower Bar Graphs</h3>
  <p>
   The third option for plotting bargraphs is a TOWERBARGRAPH, which is more useful for
   showing cumulative values than DEPTHBARGRAPH or MULTIBARGRAPH.  Again note the "name2"
   attribute on the GDATA elements sets the second axes.
  </p>
  <table fake="true" page-break-before="avoid" width="100%">
   <tr>
    <td>
     <pre class="sexample">
  &lt;towerbargraph width="200" height="150" xaxis-rotate="45"&gt;
    &lt;gdata name="January" name2="2001" value="19"/&gt;
    &lt;gdata name="April" name2="2001" value="14"/&gt;
    &lt;gdata name="July" name2="2001" value="12"/&gt;
    &lt;gdata name="October" name2="2001" value="17"/&gt;
    &lt;gdata name="January" name2="2000" value="13"/&gt;
    &lt;gdata name="April" name2="2000" value="8"/&gt;
    &lt;gdata name="July" name2="2000" value="12"/&gt;
    &lt;gdata name="October" name2="2000" value="14"/&gt;
  &lt;/towerbargraph&gt; </pre>
    </td>
    <td>
     <towerbargraph width="180" height="150" xaxis-rotate="45" alt="Sample Bargraph">
      <gdata name="January" name2="2001" value="19"/>
      <gdata name="April" name2="2001" value="14"/>
      <gdata name="July" name2="2001" value="12"/>
      <gdata name="October" name2="2001" value="17"/>
      <gdata name="January" name2="2000" value="13"/>
      <gdata name="April" name2="2000" value="8"/>
      <gdata name="July" name2="2000" value="12"/>
      <gdata name="October" name2="2000" value="14"/>
     </towerbargraph>
    </td>
   </tr>
  </table>

  <h3 id="floatingbargraph">Floating Bar Graphs</h3>
  <p>
   The final option for plotting bargraphs is a FLOATINGBARGRAPH. Each bar in a
   floating bar-graph has two halves - the intention is to show a minimum, a
   middle value (often an average) and a maximum. The positions on the bar are
   specified with the <code>min-value</code>, <code>mid-value</code> and
   <code>max-value</code> attributes.
  </p>
  <table fake="true" page-break-before="avoid" width="100%">
   <tr>
    <td>
     <pre class="sexample">
  &lt;floatingbargraph width="140" height="150"&gt;
    &lt;gdata name="Jan" min-value="10" mid-value="19" max-value="24"/&gt;
    &lt;gdata name="Feb" min-value="12" mid-value="17" max-value="28"/&gt;
    &lt;gdata name="Mar" min-value="11" mid-value="15" max-value="26"/&gt;
  &lt;/floatingbargraph&gt; </pre>
    </td>
    <td>
     <floatingbargraph width="140" height="150" alt="Sample Bargraph">
      <gdata name="Jan" min-value="10" mid-value="19" max-value="24"/>
      <gdata name="Feb" min-value="12" mid-value="17" max-value="28"/>
      <gdata name="Mar" min-value="11" mid-value="15" max-value="26"/>
     </floatingbargraph>
    </td>
   </tr>
  </table>
  <p>
   Bar graphs are unique amongst the different graphs in that they can use a "gradient
   fill" to display the colors. See the <a href="#colors">Colors</a> section for more
   information
  </p>


  <h3 id="linegraph">Line Graphs</h3>
  <p>
   The LINEGRAPH element allows one or more "curves" to be plotted against an X and Y
   axis. We've already described the curves above, so in this section we'll focus on
   attributes specific to the LINEGRAPH element.
  </p>
  <p>
   First up is an attribute specific to the LINEGRAPH element - the "line-thickness"
   attribute, which sets the thickness of the line used to draw each curve. This attribute is
   unique in that it only has an effect if the graph is plotted in 2D (i.e. xrotation,
   yrotation and zrotation are all zero). The default is 1.5.  Similar in purpose but for 3D
   graphs is the "curve-depth" attribute, which controls how "deep" into the page the curve is
   drawn. This defaults to 1, and applies to both LINEGRAPH and AREAGRAPH.
  </p>
  <p>
   There are several attributes which control the range of the axes on a LINEGRAPH. The
   "xaxis-at-zero" and "yaxis-at-zero" attributes control where the X and Y axis values (and
   the "ywall" and "floor" attributes discussed in "Axes Graphs", above) are drawn. These
   boolean attributes both default to "true", which means that the axes are drawn where
   <i>x=0</i> and <i>y=0</i>, even though this may be in the middle of the graph. Notice the
   difference with this sine curve.
  </p>
  <table fake="true" page-break-before="avoid" width="100%" cellpadding="2" cellborder="1" cellmargin="2">
   <tr>
    <td>
     <p align="center">Axes at zero</p>
     <linegraph width="250" height="100" xaxis-at-zero="true" display-key="none" yaxis-at-zero="true" min-x="-3" max-x="3" alt="Sample LineGraph">
      <simplecurve name="Sine" method="java.lang.Math.sin"/>
     </linegraph>
    </td>
    <td>
     <p align="center">Axes not at zero</p>
     <linegraph width="250" height="100" xaxis-at-zero="false" display-key="none" yaxis-at-zero="false" min-x="-3" max-x="3" alt="Sample LineGraph">
      <simplecurve name="Sine" method="java.lang.Math.sin"/>
     </linegraph>
    </td>
   </tr>
  </table>

  <p>
   Next, an attribute which applies to LINEGRAPH and AREAGRAPH and is specific to plotting
   DATACURVES. The "max-data-points" attribute allows the number of points actually
   plotted to be limited to a fixed number. This is most commonly done for speed - if your
   database query returns 1000 elements to be plotted on the graph, but it's only 2 inches
   wide, this could be set to a value (say 100) which would cause only every tenth data
   sample to be retained.  By default this is set to 100.
  </p>
  <p>
   Likewise for SIMPLECURVE elements, the "function-smoothness" attribute can be used to
   set the number of samples taken when drawing a SIMPLECURVE. This defaults to 30, which
   is generally adequate, but may be set to any value.
  </p>
  <p>
   When plotting DATACURVE curves on a LINEGRAPH, markers may be placed at each data
   sample by setting the "marker" attribute of the DATACURVE. This can be set to either
   "none" (no marker, the default), "line" (which simply draws a line across the curve
   where the value is, or "circle", "square", "diamond", "octagon", "uptriangle", or "downtriangle",
   which place the specified marker at each sample as you'd expect. These values can optionally
   be prefixed with "big", to double the size of the marker, "small" to reduce the
   size, or suffixed with "noborder" to remove the black border around the markers or
   "only", to draw <i>just the marker</i>, not the lines connecting them.
   Example combinations include "circle", "circle only", "small diamond noborder only" or
   "big uptriangle only" - here's what that looks like.
  </p>
  <table fake="true" page-break-before="avoid" width="100%" cellpadding="2" cellmargin="2" cellborder="1">
   <tr>
    <td>
     <p align="center"><tt>marker="diamond"</tt></p>
     <linegraph width="200" height="150" alt="Sample LineGraph">
      <datacurve name="Measurements" marker="diamond">
       <sample x="1" y="0.5"/>
       <sample x="2" y="0.9"/>
       <sample x="3" y="1.3"/>
       <sample x="4" y="1.2"/>
       <sample x="5" y="1.7"/>
       <sample x="6" y="2"/>
       <sample x="7" y="1.8"/>
      </datacurve>
     </linegraph>
    </td>
    <td>
     <p align="center"><tt>marker="big uptriangle only"</tt></p>
     <linegraph width="200" height="150" display-key="bottom-with-markers" alt="Sample LineGraph">
      <datacurve name="Measurements" marker="big uptriangle only">
       <sample x="1" y="0.5"/>
       <sample x="2" y="0.9"/>
       <sample x="3" y="1.3"/>
       <sample x="4" y="1.2"/>
       <sample x="5" y="1.7"/>
       <sample x="6" y="2"/>
       <sample x="7" y="1.8"/>
      </datacurve>
     </linegraph>
    </td>
   </tr>
  </table>
  <p>
   The "line" option is really only useful for 3D line graphs, and results in a black line
   across the curve where the sample is - similar to the "segments" described in the
   AREAGRAPH section below.
  </p>
  <p>
   When a marker is used on a curve, it may optionally be added to the key by
   adding the "-with-markers" suffix to the key type. The graph on the right shown above has
   the "display-key" value set to "bottom-with-markers", while the graph on the left
   has the attribute simply set to "bottom".
  </p>

  <h3 id="areagraph">Area Graphs</h3>
  <p>
   The AREAGRAPH is very similar to the LINEGRAPH, but is more appropriate for displaying
   cumulative data as the curves are stacked on top of each other. Many of the AREAGRAPH
   attributes are described in the LINEGRAPH section above, as they apply to both.
  </p>
  <table fake="true" page-break-before="avoid" width="100%">
   <tr>
    <td>
     <pre class="sexample">
  &lt;areagraph width="200" height="150"&gt;
    &lt;datacurve name="Measurements"&gt;
      &lt;sample x="1" y="0.5"/&gt;
      &lt;sample x="2" y="0.9"/&gt;
      &lt;sample x="3" y="1.3"/&gt;
      &lt;sample x="4" y="1.2"/&gt;
      &lt;sample x="5" y="1.7"/&gt;
      &lt;sample x="6" y="2"/&gt;
      &lt;sample x="7" y="1.8"/&gt;
    &lt;/datacurve&gt;
    &lt;simplecurve name="Predicted"
     method="java.lang.Math.log"/&gt;
  &lt;/areagraph&gt; </pre>
    </td>
    <td>
     <areagraph width="200" height="150" alt="Sample AreaGraph">
      <datacurve name="Measurements">
       <sample x="1" y="0.5"/>
       <sample x="2" y="0.9"/>
       <sample x="3" y="1.3"/>
       <sample x="4" y="1.2"/>
       <sample x="5" y="1.7"/>
       <sample x="6" y="2"/>
       <sample x="7" y="1.8"/>
      </datacurve>
      <simplecurve name="Predicted" method="java.lang.Math.log"/>
     </areagraph>
    </td>
   </tr>
  </table>
  <p>
   As you can see, both DATACURVE and SIMPLECURVE can be mixed on the same graph.
   Noticable on the DATACURVE though are the black lines dividing the curve into
   "segments", and showing where the sample values are. These may not always be desirable,
   and can be removed by setting "draw-segments" attribute to "false".
  </p>
  <p>
   The other difference between this and the LINEGRAPH is that the data values at each
   point are added together. This is the result of the "cumulative" attribute, which
   defaults to true. Occasionally you may be working with pre-accumulated values, in which
   case setting this attribute to "false" turns off this behaviour.
  </p>
  <h4>Plotting Dates</h4>
  <p>
   Both the LINEGRAPH and AREAGRAPH support plotting dates on the X axis, instead of
   numeric values. This can be done by setting the <code>xaxis-formatter</code> to "date()"
   and the "x" attribute for the SAMPLE element to a valid date - recognized formats
   include RFC822 (e.g. <code>"Mon, 18 Feb 2002 17:26:18 +0100"</code>) and ISO8601 (e.g.
   <code>"2001-02-18"</code>, <code>"2001-02-18T17:26"</code> or
   <code>"2001-02-18T17:26:18+0100"</code>), although the recommended format is ISO8601.
   In this example we've also set the "xaxis-formatter-density" to "sparse", although this
   is optional. Here's how:
  </p>
  <table fake="true" page-break-before="avoid" width="100%">
   <tr>
    <td>
     <pre class="sexample">
  &lt;areagraph width="200" height="150" xaxis-rotate="45"
   <b>xaxis-formatter="date()"</b>
   <b>xaxis-formatter-density="sparse"</b>&gt;
    &lt;datacurve name="Measurements"&gt;
      &lt;sample x="2001-10-01" y="0.5"/&gt;
      &lt;sample x="2001-10-05" y="0.9"/&gt;
      &lt;sample x="2001-10-10" y="1.3"/&gt;
      &lt;sample x="2001-10-15" y="1.2"/&gt;
      &lt;sample x="2001-10-20" y="1.7"/&gt;
      &lt;sample x="2001-10-25" y="2"/&gt;
      &lt;sample x="2001-10-30" y="1.8"/&gt;
    &lt;/datacurve&gt;
  &lt;/areagraph&gt; </pre>
    </td>
    <td>
     <areagraph width="200" height="150" xaxis-formatter="date()" xaxis-formatter-density="sparse" xaxis-rotate="45" alt="Sample AreaGraph">
      <datacurve name="Measurements">
       <sample x="2001-10-01" y="0.5"/>
       <sample x="2001-10-05" y="0.9"/>
       <sample x="2001-10-10" y="1.3"/>
       <sample x="2001-10-15" y="1.2"/>
       <sample x="2001-10-20" y="1.7"/>
       <sample x="2001-10-25" y="2"/>
       <sample x="2001-10-30" y="1.8"/>
      </datacurve>
     </areagraph>
    </td>
   </tr>
  </table>
  <p>
   Internally the date is converted to a number value, so if the "xaxis-formatter"
   isn't set the results will look fairly strange. The smallest unit of resolution with
   dates is a second, and using this method date ranges of between 2 seconds and 100 years
   can be plotted.
  </p>

  <h1 id="colors">Specifying Colors</h1>
  <p>
   Colors can be specified in the XML in a number of ways. Most people are familiar with
   the #RRGGBB notation, which specifies a color in the default RGB colorspace used by the
   Report Generator. Colors can be specified in the following ways:
  </p>
  <table id="TableColors" class="defntable">
   <thead>
    <tr><th>Color Example</th><th>Description</th></tr>
   </thead>
   <tr>
    <td>none or transparent</td>
    <td>Specify no color is to be used</td>
   </tr>
   <tr>
    <td>#FF0000</td>
    <td>
     Specify a color in the documents RGB colorspace by setting the red component to 0xFF
     and the green and blue components to 0x00. Each component is on a scale from 0 to
     255, so 0xFF is 100% red.
    </td>
   </tr>
   <tr>
    <td>rgb(100%, 0, 0)</td>
    <td>
     Another method of specifying an RGB color, this is identical to #FF0000. May also be
     specified as <code>rgb(255,0,0)</code>
    </td>
   </tr>
   <tr>
    <td>gray(100%)</td>
    <td>
     Specify a color in the documents GrayScale colorspace. <code>gray(0%)</code> is black and <code>gray(100%)</code> is white
    </td>
   </tr>
   <tr>
    <td>cmyk(100%, 0%, 0%, 0%)</td>
    <td>
     Specify a color in the documents CMYK colorspace. The example here would set the color to cyan.
    </td>
   </tr>
   <tr>
    <td>black</td>
    <td>
     Specify a named color - one of the list of 140 named colors in the current RGB
     colorspace (the list is the same list as used by HTML). The full list of named colors
     is in the <a href="#refcolor">reference section</a> and also in the "colors.pdf"
     document in the <tt>docs</tt> directory of the package.
    </td>
   </tr>
   <tr>
    <td>spot("name", cmyk(100%,72%,0%,6%))</td>
    <td>
     Specify a spot color. Requires the name of the color, and the fallback color to use
     if it's unavailable</td></tr> <tr><td>spot("name", cmyk(100%,72%,0%,6%),
     50%)</td><td>Specify a spot color and the intensity of that color. Requires the name
     of the color, and the fallback color to use if it's unavailable, and the "intensity",
     or how much of that ink to use. Values can range from 100% (which is the same as the
     2 argument form above) to 0% (which is the same as transparency).
    </td>
   </tr>
   <tr>
    <td>alpha(50%, #FF0000)</td>
    <td>
     Specify a semi-transparent version of a color (since 1.1.10). The first parameter
     is the alpha value to use - 100% for a completely opaque color, 0% for a completely
     transparent one. The second parameter may be any one of the types of color listed above -
     so <code>alpha(50%, spot("Blue", cmyk(100%,72%,0%,6%)))</code> is a valid color, if a
     somewhat extreme example. Translucent colors will only work with Acrobat 5 or later.
    </td>
   </tr>
  </table>
  <p>
   As well as the "plain" colors defined above, the Report Generator can use "pattern"
   colors when drawing text or as the background color of an element.  Document authors
   can choose from one of 8 different predefined patterns. Each pattern has a name, a
   foreground color (indicated by "fg" in the following table) and a background color
   (indicated by "bg"), and then possibly more attributes depending on the pattern. Here's
   the list.
  </p>
  <table fake="true" class="defntable" cellmargin="1">
   <tr>
    <td>
     pattern(stripe,<i>fg</i>,<i>bg</i>,<i>fgwidth</i>,<i>bgwidth</i>,<i>ang</i>)
    </td>
    <td border="1" width="0.5in" min-width="0.5in" class="patternxmp" background-color="pattern(stripe,#A0A0FF,#0000FF,5,5,30)" alt="example pattern"/>
    <td>
     The <code>stripe</code> pattern creates a striped color pattern. The angle and width
     of each stripe can be set separately - the width of the stripe in the foreground
     color is set by <i>fgwidth</i> and the width in the background color is set by
     <i>bgwidth</i>. The angle is set by <i>ang</i>, and is specified in degrees clockwise
     from 12 o'clock.
    </td>
   </tr>

   <tr>
    <td>
     pattern(brick,<i>fg</i>,<i>bg</i>,<i>width</i>,<i>height</i>
    </td>
    <td border="1" background-color="pattern(brick,#A0A0FF,#0000FF,30,15)" alt="example pattern"/>
    <td>
     This <tt>brick</tt> pattern creates a brickwork pattern (using the "running bond"
     style of bricklaying, for what it's worth). The width and height of each brick must
     be specified.
    </td>
   </tr>

   <tr>
    <td>
     pattern(check,<i>fg</i>,<i>bg</i>,<i>size</i>)
    </td>
    <td border="1" background-color="pattern(check,#FFA0A0,#FF0000,10)" alt="example pattern"/>
    <td>
     The <tt>check</tt> pattern requires the size of each square in the check to be specified.
    </td>
   </tr>

   <tr>
    <td>
     pattern(grid,<i>fg</i>,<i>bg</i>,<i>linewidth</i>,<i>spacewidth</i>)
    </td>
    <td border="1" background-color="pattern(grid,#A0A0FF,#0000FF,2,18)" alt="example pattern"/>
    <td>
     The <tt>grid</tt> pattern creates a gridded pattern as shown here. The width of the
     line and the width of the space between the lines must be specified.
    </td>
   </tr>

   <tr>
    <td>
     pattern(spot,<i>fg</i>,<i>bg</i>,<i>size</i>)
    </td>
    <td border="1" background-color="pattern(spot,#FFA0A0,#FF0000,10)" alt="example pattern"/>
    <td>
     A "spot" pattern similar to the pattern used for halftoning in newspapers can be
     created with the <tt>spot</tt> pattern. The size of each spot must be specified.
    </td>
   </tr>

   <tr>
    <td>
     pattern(polka,<i>fg</i>,<i>bg</i>,<i>size</i>)
    </td>
    <td border="1" background-color="pattern(polka,#A0A0FF,#0000FF,20)" alt="example pattern"/>
    <td>
     A different kind of "spot" pattern, containing a number of different size random
     spots can be created with the <tt>polka</tt> pattern. The average size of the spots
     must be specified.
    </td>
   </tr>

   <tr>
    <td>
     pattern(star,<i>fg</i>,<i>bg</i>,20)
    </td>
    <td border="1" background-color="pattern(star,#FFA0A0,#FF0000,20)" alt="example pattern"/>
    <td>
     Finally, a pattern of repeating 5-pointed stars (like those on the US flag) can be
     created with the <tt>star</tt> pattern. The size of each star must be specified.
    </td>
   </tr>
  </table>

  <p>
   Here's an example of how to use a pattern as the background color, and a spot
   color as the foreground for a page header.
  </p>

  <pre class="example">
  &lt;body <b>background-color="pattern(stripes,#FFF0F0,#F0E0E0,5,5,45)"</b>&gt;
    &lt;h1 <b>color="spot('PANTONE Reflex Blue CVC', cmyk(100%,72%,0%,6%))"</b>&gt;
      Heading in Reflex Blue
    &lt;/h1&gt;
    &lt;p&gt;
      The pages of this document have light pink stripes
    &lt;/p&gt;
  &lt;/body&gt; </pre>

  <p>
   Finally, for Bar Graphs only, it's possible to fill a bar using a <i>gradient</i>
   fill. Specifying a color as <code>gradient(red, blue)</code> would cause the bar in
   the graph to smoothly change from red to blue as the value increased. Here's an
   example:
  </p>
  <table fake="true" width="100%">
   <tr>
    <td>
     <pre class="sexample">
  &lt;bargraph width="200" height="150" xaxis-rotate="45"&gt;
    &lt;gdata <b>color="gradient(red,blue)"</b>
              name="Monday" value="19"/&gt;
    &lt;gdata <b>color="gradient(green,yellow)"</b>
              name="Tuesday" value="14"/&gt;
  &lt;/bargraph&gt; </pre>
    </td>
    <td>
     <bargraph width="200" height="150" xaxis-rotate="45" alt="Sample Bargraph">
      <gdata color="gradient(red,blue)" name="Monday" value="19"/>
      <gdata color="gradient(green,yellow)" name="Tuesday" value="14"/>
     </bargraph>
    </td>
   </tr>
  </table>


  <h2 id="colorspaces">Color Spaces</h2>
  <p>
   Each item in the document has three types of colorspace it can work with - RGB, CMYK
   and a GrayScale colorspace. By default, the RGB colorspace is the sRGB calibrated
   colorspace used by Java, and the CMYK and GrayScale spaces are device-dependent. Any
   RGB colors that are specified will use the RGB colorspace of the object, CMYK colors
   will use the CMYK colorspace, and grayscale colors will use the GrayScale colorspace.
  </p>
  <p>
   Any one of these colorspaces can be replaced by setting the "colorspace" attribute. If
   the value of the colorspace is a 3 component colorspace, the elements RGB colorspace
   will be set. If the specified colorspace has 4 components, the elements CMYK space will
   be set, and so on. This means that only one non-standard colorspace can be used per
   element - or, put another way, no element can use both a calibrated CMYK and calibrated
   RGB colorspace (other than sRGB) at the same time. We doubt this will cause a problem
   for many.
  </p>
  <p>
   Valid values are "sRGB", "DeviceCMYK" and "DeviceGray", which set the colorspaces to
   the default values, or the URL of an ICC color profile file. Here's an example which
   calibrates the document to use the NTSC color profile. Note that although in theory any
   element can have a different colorspace set, in practice it keeps everything simpler if
   you set the colorspace on the BODY element and leave it. The one exception to this is
   images, which we'll cover below.
  </p>

  <pre class="example">
  &lt;body <b>colorspace="http://path/to/NTSCspace.icc"</b>&gt;
    &lt;h1 color="#FF0000"&gt;
      This heading is in bright-red, according to the NTSC color profile
    &lt;/h1&gt;
  &lt;/body&gt; </pre>

  <p>
   PNG, TIFF and JPEG images may optionally have an ICC color profile embedded in the image - if
   one is found it will be used automatically. The ability to override the colorspace for an image
   has been removed in version 1.1.10 - if the image needs to use a particular colorspace, it
   should be embedded in the file.
  </p>

  <h1 id="hyperlinks">Hyperlinks</h1>
  <p>
   Hyperlinks can be used within PDF documents to navigate around the document, to load
   web pages in whatever web browser is installed on the users system, and to allow a
   limited level of interaction between the document and it's environment.
  </p>
  <p>
   The familiar <tt>&lt;A&gt;</tt> element from HTML is a part of the Report Generators
   XML syntax, but unlike HTML it's significance is limited to stylistic changes only.
   Instead, the "href" attribute, which signifies a hyperlink, may be added to <i>any</i>
   element in the document. For example, the following two lines are equivalent.
  </p>

  <pre class="example">
  &lt;a href="http://bfo.com"&gt;go to website&lt;/a&gt;
  &lt;span href="http://bfo.com"&gt;go to website&lt;/span&gt; </pre>

  <p>
   This opens up some possibilities not available in HTML - for example, a TABLE or
   PIEGRAPH element could be turned into a hyperlink, simply by adding an "href"
   attribute. Be warned that the PDF specification is quiet about what happens if two
   hyperlink areas overlap..
  </p>
  <p>
   So what values can the "href" attribute take? This tables lists the possibilities:
  </p>

  <table id="TableHref" class="defntable">
   <thead>
    <tr>
     <th>Example</th><th>Description</th>
    </tr>
   </thead>
   <tr>
    <td>#<i>elementid</i></td>
    <td>
     Jump to the specified element in the report. The "elementid" is the ID of the destination element.
    </td>
   </tr>
   <tr>
    <td>#<i>elementid</i>?zoom=fit</td>
    <td>
     Jump to the specified element in the report, and zoom the page so that just that element is visible
    </td>
   </tr>
   <tr>
    <td>http://<i>domain.com</i></td>
    <td>
     Any URL may be specified to jump to an external document. This functionality requires a web browser to be installed, and the exact form of the URL depends on the capabilities of that browser
    </td>
   </tr>
   <tr>
    <td>pdf:playsound(<i>soundurl</i>)</td>
    <td>
     Play an audio sample from the specified URL. The PDF specification can <i>in
     theory</i> handle Sun .AU, Macintosh AIFF and AIFF-C and Windows RIFF (.WAV) files,
     although RIFF support seems to be slightly more capable in our tests. This requires
     sound support from the PDF viewer application, and may not work on all operating
     systems.
    </td>
   </tr>
   <tr>
    <td>pdf:show(<i>form element</i>)</td>
    <td>
     Show the specified form element if it is hidden. The <i>form element</i> must be the name of a
     form element.
     See the <a href="#forms">Forms</a> section.
    </td>
   </tr>
   <tr>
    <td>pdf:hide(<i>form element</i>)</td>
    <td>
     Hide the specified form element if it is visible. The <i>form element</i> must be the name of a
     form element.
     See the <a href="#forms">Forms</a> section.
    </td>
   </tr>
   <tr>
    <td>pdf:reset()</td>
    <td>
     Reset the documents form to it's default values.
     See the <a href="#forms">Forms</a> section.
    </td>
   </tr>
   <tr>
    <td>pdf:submit(<i>url</i> [, <i>method</i>])</td>
    <td>
     Submit the contents of the documents form to a URL. The <i>method</i> is optional - it defaults
     to "POST" - but if specified must be one of the following values:
     <table id="TableFormSubmit">
      <tr><th padding-right="0.2in">POST</th><td>Post the form using the standard HTTP POST method</td></tr>
      <tr><th>FDF</th><td>Post the form in Adobes Form Description Format (FDF)</td></tr>
      <tr><th>XML</th><td>Post the form as XML (requires Acrobat 5.0)</td></tr>
      <tr><th>PDF</th><td>Post the entire document (requires Acrobat 5.0)</td></tr>
     </table>
     See the <a href="#forms">Forms</a> section.
    </td>
   </tr>
   <tr>
    <td>javascript:<i>code</i></td>
    <td>
     Run a section of JavaScript code.
     See the <a href="#forms">Forms</a> section.
    </td>
   </tr>
   <tr>
    <td>pdf:<i>action</i></td>
    <td>
     Run a "named" action - PDF viewer dependent, see below
    </td>
   </tr>
  </table>
  <p>
   The facility to run "named" actions can be very useful, provided you know which PDF
   viewer application your target audience is running. For the vast majority who run
   Acrobat 4.0 or greater, the following named actions may be used - they loosely
   correspond to the equivalent actions which can be run from the drop down menus in
   Acrobat. These values are case-sensitive.
  </p>
  <table fake="true" width="100%"><tr><td>
   <table id="TableAction1" class="defntable">
    <tr><th>Action name</th><th>Description</th></tr>
    <tr><td>Open</td><td>Open the "open file" dialog</td></tr>
    <tr><td>Close</td><td>Close the current document</td></tr>
    <tr><td>Print</td><td>Print the current document</td></tr>
    <tr><td>GeneralInfo</td><td>Bring up the "general information" dialog</td></tr>
    <tr><td>FontsInfo</td><td>Bring up the "fonts information" dialog</td></tr>
    <tr><td>SecurityInfo</td><td>Bring up the "security information" dialog</td></tr>
    <tr><td>Quit</td><td>Quit the PDF viewer</td></tr>
    <tr><td>NextPage</td><td>Go to the next page</td></tr>
    <tr><td>PrevPage</td><td>Go to the previous page</td></tr>
    <tr><td>FirstPage</td><td>Go to the first page</td></tr>
    <tr><td>LastPage</td><td>Go to the last page</td></tr>
    <tr><td>GoToPage</td><td>Bring up the "Go to page" dialog</td></tr>
   </table>
  </td><td>
   <table id="TableAction2" class="defntable">
    <tr><th>Action name</th><th>Description</th></tr>
    <tr><td>Find</td><td>Bring up the "Find" dialog</td></tr>
    <tr><td>FindAgain</td><td>Repeat the last search</td></tr>
    <tr><td>SelectAll</td><td>Select the entire page</td></tr>
    <tr><td>Copy</td><td>Copy the selection to the clipboard</td></tr>
    <tr><td>FullScreen</td><td>Switch the document to fullscreen mode</td></tr>
    <tr><td>FitPage</td><td>Zoom the document to fit the page</td></tr>
    <tr><td>ActualSize</td><td>Zoom the document to actual size</td></tr>
    <tr><td>FitWidth</td><td>Zoom the document to fit the width</td></tr>
    <tr><td>FitVisible</td><td>Zoom the document to fit the entire page</td></tr>
    <tr><td>SinglePage</td><td>Set the document to "Single page" mode</td></tr>
    <tr><td>OneColumn</td><td>Set the document to "One column" mode</td></tr>
    <tr><td>TwoColumns</td><td>Set the document to "Two columns" mode</td></tr>
   </table>
  </td></tr></table>

  <h1 id="forms">Interactive Forms support</h1>
  <p>
   New in version 1.1 is the ability to include Form elements in the document. Interactive forms
   are one of the more underused aspects of PDF, but certainly one of the more interesting. There's
   a great deal more to forms than we cover here - we highly recommend purchasing a book on the
   subject, and experimenting with a copy of Acrobat to see what's possible. This section will
   document only the syntax used to add form elements to the Report Generator, not the reasons why
   you would. The use of interactive forms (specifically, the &lt;INPUT&gt; tag) requires the
   <i>Extended Edition</i> of the product.
  </p>
  <p>
   Like HTML forms, a document can contain text boxes, drop down lists, radio buttons, check boxes,
   regular "submit" buttons and even JavaScript! The main differences are that the JavaScript
   object model is radically different, that each PDF only has a single form (unlike HTML), and
   that the form isn't tied to a single "submit" URL - instead, each submit button (there may be
   more than one) specifies the URL to submit to. Form elements are not covered by CSS2, so we've
   based our implementation fairly closely on HTML4.0, with a couple of simplifications. 
  </p>
  <pre class="sexample">
 &lt;table&gt;&lt;tr&gt;
   &lt;td&gt;Name&lt;/td&gt;
   &lt;td&gt;<b>&lt;input type="text" name="name" width="10em"/&gt;</b>&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;
   &lt;td&gt;Address&lt;/td&gt;
   &lt;td&gt;<b>&lt;input type="text" name="address" lines="3" width="10em"/&gt;</b>&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;
   &lt;td&gt;Sex&lt;/td&gt;
   &lt;td&gt;
    Male <b>&lt;input display="inline" type="radio" name="sex" value="male" padding-right="0.2in"/&gt;</b>
    Female <b>&lt;input display="inline" type="radio" name="sex" value="female"/&gt;</b>
   &lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;
   &lt;td&gt;Country&lt;/td&gt;
   &lt;td&gt;
    <b>&lt;input type="select" name="country" value="Cameroon"&gt;
     &lt;option&gt;Cameroon&lt;/option&gt;
     &lt;option&gt;Lebanon&lt;/option&gt;
     &lt;option&gt;Other&lt;/option&gt;
    &lt;/input&gt;</b>
   &lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;
   &lt;td&gt;Email me&lt;/td&gt;
   &lt;td&gt;<b>&lt;input type="checkbox" name="email" checked="true"/&gt;</b>&lt;/td&gt;
  &lt;/tr&gt;&lt;tr&gt;
   &lt;td colspan="2" align="center"&gt;
    <b>&lt;input type="button" name="submit" onClick="pdf:submit(http://localhost, POST)"/&gt;</b>
   &lt;/td&gt;
 &lt;/tr&gt;&lt;/table&gt;
  </pre>
  <table fake="true" width="50%" align="center" border="1">
   <tr>
    <td>Name</td>
    <td><input title="Name" type="text" name="name" width="10em"/></td>
   </tr><tr>
    <td>Address</td>
    <td><input title="Address" type="text" name="address" lines="3" width="10em"/></td>
   </tr><tr>
    <td>Sex</td>
    <td>
     Male <input title="Male" display="inline" type="radio" name="sex" value="male" padding-right="0.2in"/>
     Female <input title="Female" display="inline" type="radio" name="sex" value="female"/>
    </td>
   </tr><tr>
    <td>Country</td>
    <td>
     <input title="Country" type="select" name="country" value="Cameroon">
      <option>Lebanon</option>
      <option>Cameroon</option>
      <option>Other</option>
     </input>
    </td>
   </tr><tr>
    <td>Email me</td>
    <td><input title="Email" type="checkbox" name="email" checked="true"/></td>
   </tr><tr>
    <td colspan="2" align="center">
     <input title="Submit" type="button" name="submit" onClick="pdf:submit(http://localhost, POST)"/>
    </td>
   </tr>
  </table>
  <p>
   Much of this should look fairly familiar to HTML authors. The key differences here are:
  </p>
  <ul>
   <li>
    The "name" and "type" values are mandatory, and each name must be unique across the entire
    document.
   </li>
   <li>
    As well as the "value" attribute, which can be set for every type of form field, the fields can
    take a "default-value" attribute, which controls what the field is reset to when a
    <code>pdf:reset()</code> action is run.
   </li>
   <li>
    Multiline text boxes don't use the &lt;textarea&gt; tag, but are identical to normal text boxes
    - just set the "lines" attribute to the number of lines that are required. You can also
    optionally set the "scrollable" attribute to false, to prevent users from scrolling the box to
    enter more text. Initial values can be set either in the "value" attribute, or between the
    <code>&lt;input&gt;</code> and <code>&lt;/input&gt;</code> tags.
   </li>
   <li>
    Drop down lists don't use the &lt;select&gt; tag, but instead use a regular INPUT element with a
    "type" of "select". It does use the OPTION elements to list the options, but the selected
    option is chosen by setting the "value" attribute on the INPUT. It's not currently possible to
    select more than one option in a list. For multi-line lists just add a "lines" attribute, in
    the same way as the multiline text-boxes. Another variation is to set the "editable" attribute
    to "true", which will turn the drop-down into a combo box - the user can type their own values
    into the box as well as choose one from the list.
   </li>
   <li>
    There's no submit button - instead, a regular button with an "onClick" attribute does the same
    job. In fact, the "onClick" action may be any type of <a href="#hyperlinks">hyperlink</a>
    that's supported by the Report Generator. Buttons can also take a "src" attribute, which can be
    the URL of an image which will be pasted onto the button.
   </li>
   <li>
    Every form element recognises the boolean attributes "readonly", which prevents the form from
    interacting with the user, "required" - which means the field must have a value in it befor
    the form is submitted - and "submitted", which is on by default, but may be turned off to
    prevent the field from being submitted to the server, and is useful for fields used only for
    cosmetic or temporary purposes.
   </li>
  </ul>
  <h2 id="javascript">JavaScript</h2>
  <p>
   One of the aspects we haven't demonstrated is JavaScript, which is supported in Acrobat 4.0 and
   5.0, both the Reader and the full version of Acrobat. Although the syntax is identical to the
   JavaScript used in web browsers, the Document Object Model is radically different - do
   <b>not</b> expect your HTML JavaScript to work in Acrobat. Acrobats object model is documented
   in the <code>AcroJS.pdf</code> document supplied with retail versions of Acrobat. We won't go
   into too much detail about the syntax, but will limit our discussion to showing you how to embed
   JavaScript code into your report.
  </p>
  <p>
   Like HTML, we use the SCRIPT tag in the HEAD of the document to embed JavaScript. However, due
   to JavaScript code commonly containing the &lt; and &gt; characters, we recommend embedding it
   inside a "CData" block, like so:
  </p>
  <pre class="example">
  &lt;pdf&gt;
   &lt;head&gt;
    <b>&lt;script&gt;</b>
    <b>&lt;![CDATA[</b>
     function dumpForm()
     {
       var s="";
       s += "Your name is '"+this.getField("name").value+"'\n";
       s += "Your country is '"+this.getField("country").value+"'\n";
       s += "Your sex is '"+this.getField("sex").value+"'\n";
       app.alert(s);
     }
    <b>]]&gt;</b>
    <b>&lt;/script&gt;</b>
   &lt;/head&gt;
  </pre>
  <p>
   Then to call this function, simply create a link or button that runs the action
   <code><b>javascript:dumpForm()</b></code>. Click <a href="javascript:dumpForm()">here</a> to see
   what we mean.
  </p>
  <p>
   Two actions we haven't demonstrated yet are the "pdf:show" and "pdf:hide" actions. These can
   only be used with form fields, and although not terribly useful they're interesting enough to
   demonstrate here. Roll your mouse over <a onMouseOver="pdf:hide(address)" onMouseOut="pdf:show(address)">this link</a> and keep an eye on the "address" box on the previous page.
  </p>
  <p>
   This example is useful because it demonstrates an "event" handler. We've seen one example of
   these already - the "onClick" attribute on the "submit" button in the previous example. In fact,
   there are several to choose from, but although the "onMouseOver", "onMouseOut" and "onClick"
   handlers can be used with any element in the same way as the "href" attribute, the rest are
   limited to use with form fields.
  </p>
  <table id="TableMouseActions" class="defntable">
   <thead>
    <tr>
     <th>Attribute</th><th>Description</th>
    </tr>
   </thead>
   <tr>
    <td>onClick</td>
    <td>
     The action to perform when the element of form field is clicked. Identical
     in function to "href", the two attributes can be used interchangeably
    </td>
   </tr>
   <tr>
    <td>onMouseOver</td>
    <td>
     The action to perform when the mouse moves over the element or form field.
    </td>
   </tr>
   <tr>
    <td>onMouseOut</td>
    <td>
     The action to perform when the mouse moves out of the element or form field.
    </td>
   </tr>
   <tr>
    <td>onMouseDown</td>
    <td>
     The action to perform when the mouse button is clicked in the form fields focus area.
    </td>
   </tr>
   <tr>
    <td>onMouseUp</td>
    <td>
     The action to perform when the mouse button is released in the form fields focus area.
    </td>
   </tr>
   <tr>
    <td>onFocus</td>
    <td>
     The action to perform when the field gains focus (text elements only)
    </td>
   </tr>
   <tr>
    <td>onBlur</td>
    <td>
     The action to perform when the field loses focus (text elements only)
    </td>
   </tr>
   <tr>
    <td>onChange</td>
    <td>
     The action to perform when the value of the field has changed
    </td>
   </tr>
   <tr>
    <td>onKeyPress</td>
    <td>
     The action to perform when a key is pressed in the form field (text elements only). Use for
     limiting input into the field to digits (for example).
    </td>
   </tr>
   <tr>
    <td>onFormat</td>
    <td>
     The action to perform when the contents of the field is about to be redisplayed.
    </td>
   </tr>
   <tr>
    <td>onOtherChange</td>
    <td>
     The action to perform when the value of <i>one of the other fields</i> has changed. This is
     commonly used in conjunction with read-only fields, to show a value based on the contents of
     other fields.
    </td>
   </tr>
  </table>


  <h2 id="digsigs">Digital Signatures</h2>
  <p>
   Although still a type of form field, Digital Signatures are handled quite differently from the
   other fields - so we'll cover them seperately. Digital signatures allow a PDF report to be signed
   before distribution. Like the other form fields, using this feature requires the <i>Extended
   Edition</i> of the product.
  </p>
  <p>
   These are useful for two main purposed - one, to identify the author of the document,
   and two, to provide notice if the document has been altered after it was signed. This
   is done by calculating a checksum of the document, and then encrypting that checksum
   with the "private key" of the author, which can later be verified by a user with the
   full version of Adobe Acrobat or Acrobat Approval&trade;, although <i>not</i> the free
   Acrobat Reader, by comparing it with the corresponding public key.
  </p>
  <p>
   Digital Signatures are implemented in Acrobat via a plug-in or "handler". As of 2018 the vast
   majority of signatures use the standard Adobe signature model and require the "handler" attribute
   to be set to "acrobat". We also support "globalsign" as a value since 1.1.63, to use the GlobalSign
   signing service.
  </p>
  <p>
   Currently signatures are limited in that only one signature may be applied to a document,
   otherwise an Exception is thrown.
  </p>
  <p>
   Digital signatures are defined using an INPUT tag - the same tag used in HTML to define
   form elements (this is because digital signatures are part of the PDF version of a
   form, which we'll be adding more support for in later releases). The tag can be placed
   anywhere in the body of the document, and doesn't require a &lt;FORM&gt; like HTML.
   Here's a quick look at a typical signature tag:
  </p>
  <pre class="sexample">&lt;input type="signature" name="sig1" keystore="mystore" password="secret" handler="acrobat"/&gt;</pre>
  <p>and here's an example showing how to use the "globalsign" handler for signing.</p>
  <pre class="sexample">&lt;input type="signature" name="sig1" keystore="mystore" password="secret" handler="globalsign"
    login="0123456789012345 0123456789..." identity="OU=Test Unit"/&gt;</pre>
  <p>
   There are a number of attributes that apply only to digital signatures.
  </p>
  <table id="TableInputAttributes" class="defntable">
   <thead>
    <tr>
     <th>Attribute</th>
     <th>Description</th>
    </tr>
   </thead>
   <tr>
    <td>type</td>
    <td>(Mandatory) The type of INPUT tag. Must be "signature" for digital signatures</td>
   </tr>
   <tr>
    <td>name</td>
    <td>(Mandatory) The name to give the form field.</td>
   </tr>
   <tr>
    <td>keystore</td>
    <td>(Mandatory) The URL of the keystore containing the private key to sign the document with.</td>
   </tr>
   <tr>
    <td>handler</td>
    <td>
     (Mandatory) The Digital Signature handler that will be used to verify the document. The value
     should be "acrobat" for most signatures, or "globalsign" for the Globalsign signing service.
     The values "acrobat6", "verisign" and "selfsign" are all legacy synonyms for "acrobat".
    </td>
   </tr>
   <tr>
    <td>password</td>
    <td>(Optional) The password required to open the keystore.</td>
   </tr>
   <tr>
    <td>alias</td>
    <td>
     (Optional) The alias or "friendly name" given to the private key in the keystore.
     Defaults to "mykey".
    </td>
   </tr>
   <tr>
    <td>keypassword</td>
    <td>(Optional) The password to open the private key in the keystore. Defaults to the
    value of the <code>password</code> attribute.</td>
   </tr>
   <tr>
    <td>keystoretype</td>
    <td>
     (Optional) The type of keystore. Usually will be either "JKS" for "Java Keystore" or
     some other value like "pkcs12", which depends on what JCE providers are available.
     May optionally include a hyphen, followed by a provider name - for example "JKS-SUN"
     to load the Sun implementation of the JKS keystore, or "pkcs12-BC" for the PKCS#12
     implementation by <a href="http://www.bouncycastle.org">The Legion of the Bouncy
     Castle</a>.  Defaults to "JKS".
    </td>
   </tr>
   <tr>
    <td>signer</td>
    <td>
     (Optional) The name of the person or entity signing the document. For informational
     purposes only. Defaults to the name on the signing certificate.
    </td>
   </tr>
   <tr>
    <td>location</td>
    <td>
     (Optional) The location where the document was signed. For informational purposes only.
    </td>
   </tr>
   <tr>
    <td>reason</td>
    <td>
     (Optional) The reason why the document was signed. For informational purposes only.
    </td>
   </tr>
   <tr>
    <td>ocsp</td>
    <td>
     (Optional) If true, the certificates used for signing will be verified against their OCSP and CRL 
     responders at the time of signing. This is required for "long-term validation" of signatures.
    </td>
   </tr>
   <tr>
    <td>timestampurl</td>
    <td>
     (Optional) May be set to the URL of a RFC3161 time stamp server to time-stamp the signature.
     This is required for "long-term validation" of signatures.
    </td>
   </tr>
   <tr>
    <td>background-image /<br/>
    background-pdf</td>
    <td>
     (Optional) An image to display as the content of the signature annotation. This should be used
     carefully - in particular, the image should ideally be transparent enough that it doesn't
     completely mask out the area it covers. Alternatively a "background-pdf" may be used instead -
     it functions the same way.
    </td>
   </tr>
   <tr>
    <td>login</td>
    <td>
     (Required for Globalsign signatures). When handler is "globalsign", this attribute must be
     set to the login details for the Globalsign service; either the <i>apikey</i> and <i>apisecret</i>,
     seperated by a space, or the path to the encrypted file containing this information which is supplied
     by Globalsign
    </td>
   </tr>
   <tr>
    <td>identity</td>
    <td>
     (Required for Globalsign signatures). When handler is "globalsign", this attribute must be
     set to the identity details for the Globalsign service; either an X.500 principal, the path to an
     X.509 certificate to extract the identity from, or a JSON object describing the identity, the structure
     of which is described in the Globalsign documentation.
    </td>
   </tr>
  </table>
  <p>
   We're only skimming the surface of this topic for now. A considerably more in-depth
   coverage of digital signatures (including how to generate test keys for signing and
   verify the signed document using Acrobat) is in the <a
   href="http://bfo.com/products/pdf/docs/userguide.pdf">PDF library user
   guide</a>.
  </p>

  <h1 id="pdfa">PDF/A and PDF/UA Support</h1>
  <p>
   Since 1.1.47 the Report Generator can generate PDF/A documents - PDF/A-1, A-2 or A-3.
   These are the same as regular PDFs, with a few restrictions:
  </p>
  <ul>
   <li>All fonts must be embedded. This includes fonts in graphs, and fonts used as the markers
   in unordered lists (eg to draw the bullet)</li>
   <li>An Output Intent must be specified and an ICC profile embedded - either RGB or CMYK</li>
   <li>All colors must match this ICC profile - so if an sRGB profile is embedded, all colors
   in the PDF must be RGB. Transparency is not allowed.</li>
   <li>All images must match the embedded ICC profile, or the image must include an embedded ICC
   profile itself. Transparency is not allowed in PDF/A-1, but is in PDF/A-2 and A-3</li>
   <li>Form fields are problematic, and should be avoided in PDF/A-1.</li>
   <li>JavaScript is not allowed.</li>
  </ul>
  <p>
   Converting a document that meets these requirements to PDF/A should be as simple as setting
   the <code>output-profile</code> meta-tag to "PDF/A3b", then setting the
   <code>output-intent-icc</code> meta-tag to the URI of the ICC profile to embed amd the
   <code>output-intent-identifier</code> meta-tag to the name of the profile. So, for example
  </p>
  <pre class="example">
&lt;meta name="output-intent-identifier" value="sRGB"/&gt;
&lt;meta name="output-intent-icc" value="resources/sRGB.icc" /&gt;
&lt;meta name="output-profile" value="PDF/A1b"/&gt;
  </pre>
  <p>
   The value for "output-profile" can choose from the different <i>revisions</i> of the PDF/A
   specification (1 to 3 at the time of writing) and the different <i>conformance levels</i>,
   which are currently "a", "b" and "u". Examples are "PDF/A1b", "PDF/A2u", "PDF/A3a" etc.
   There are two example supplied with the Report Generator in the <code>samples</code> folder,
   one for CMYK and one for RGB, to get you started.
  </p>
  <p>
   PDF/UA is a similar concept to PDF/A, but is focused on <i>Accessibility</i> rather than
   long-term archiving like PDF/A. Because of this it imposes restrictions on the structure
   of the document; for example, a &lt;td&gt; must be contained inside a &lt;table/&gt;, and
   all &lt;img&gt; elementa must have an "alt" attribute. Many of these restrictions are
   simply formalising the common structure of HTML, which is largely the same as the requirements
   for a the Report Generator. Where that's not the case, the Report Generator will throw an
   exception when it hits the invalid XML. With luck the text of the exception will tell you
   what you need to know, but please do email support@bfo.com if that's not the case.
  </p>
  <p>
   Again, as for PDF/A there are examples in the "samples" folder which show how to create a
   simple PDF/UA document.
  </p>
  <p>
   Finally, it is possible to create a document that meets the requirements of both PDF/A and
   PDF/UA - in fact, if you're already targetting PDF/UA it's is a good idea, as you've already
   done most of the work. Just add "+PDF/UA1" to the value of any other <code>output-profile</code>
   value. For example:
  </p>
  <pre class="example">
&lt;meta name="output-intent-identifier" value="sRGB"/&gt;
&lt;meta name="output-intent-icc" value="resources/sRGB.icc" /&gt;
&lt;meta name="output-profile" value="PDF/A3a+PDF/UA1"/&gt;
  </pre>

  <h1 id="migrating">Migrating from HTML</h1>
  <p>
   Migrating a document from HTML to XML may be easy or difficult, depending on how the
   HTML has been written. Following these four steps will account for 95% of the changes
   that are required.
  </p>
  <ol>
   <li>
    The first, and probably most painful step is to ensure that all tags are closed and all
    attributes are quoted, so that the document meets the XML specification. Elements that
    don't officially require closure, like TD, LI, P, as well as tags with no content like
    BR and IMG are likely to be the cheif cause of problems.  We find the insistance on
    quoting even unambiguous attributes annoying, and we're pleased to see that at least
    one XML parser (that supplied with Resin 2.0) has the option of being lax about this
    requirement.
   </li>
   <li>
    Second, if any non-CSS legacy attributes are used (e.g. "bgcolor" to set the background
    color), these should be converted to their CSS equivalent (e.g.  "background-color",
    and placed in a stylesheet in the head of the document (either embedded or external).
    Versions of the Report Generator since 1.0.11 recognise the
    <code>style="background-color:red"</code> method of defining attributes, although
    we still recommend the XML equivalent of <code>background-color="red"</code>.
   </li>
   <li>
    Third, check the document for inline images, tables, lists or other blocks inside
    paragraphs. We've found this to be a common occurance, due to HTML not requiring a
    closing &lt;/P&gt; tag.
   </li>
   <li>
    Fourth and finally, change the tags that have a different syntax. These are:
    <ul>
     <li>
      TABLE - the HTML attributes "border" and "cellmargin" should be renamed "cellborder"
      and "cellmargin".
     </li>
     <li>
      The legacy FONT element should be replaced with an equivalent SPAN
     </li>
     <li>
      The various different styles of paragraph and span available in HTML - ADDRESS, CITE
      etc. should be replaced with a P or SPAN, setting the "class" attribute to control
      the style.
     </li>
     <li>
      Definition lists using the DL, DT and DT elements aren't supported, and should be
      replaced wither either a normal UL list with the "value" attribute set to the
      definition, or a TABLE.
     </li>
    </ul>
   </li>
  </ol>
  <p>
   Provided that no JavaScript, forms or frames are used, these steps should result in a
   report that is legible and ready to be tailored for it's eventual destination as a PDF
   document.
  </p>

  <h1 id="i18n">Internationalization</h1>
  <p>
   The vast majority of the worlds languages can be used with the Report Generator.
   Thanks to XML's natural character set of UTF-8, as well as it's ability to use
   "preferred" native character sets like Shift-JIS or EUC-KR, specifying the actual
   characters to display is not a problem. When editing your XML just remember to save
   the file in the correct encoding - UTF-8 unless you've specified otherwise.
  </p>
  <p>
   When it comes to actually displaying the characters, the key is to use the right font.
   The standard fonts (Helvetica, Times and Courier) will, as far as we know, display the
   following languages correctly:
   <br/><br/>
    English, French, German, Portuguese, Italian, Spanish, Dutch (no "ij" ligature),
    Danish, Swedish, Norwegian, Icelandic, Finnish, Polish, Croatian, Czech,
    Hungarian, Romanian, Slovak, Slovenian, Latvian, Lithuanian, Estonian, Turkish,
    Catalan (although the "L with dot" character is missing), Basque, Albanian,
    Rhaeto-Romance, Sorbian, Faroese, Irish, Scottish, Afrikaans, Swahili, Frisian,
    Galician, Indonesian/Malay and Tagalog.
  </p><p>
   For Chinese, Japanese and Korean the obvious choice is to use the standard east asian
   fonts like "hygothic", "heiseimin" and "mhei" (the full list is in the <a
   href="#fonts">Fonts</a> section).
  </p>
  <p>
   For other languages like Czech, Slovenian, Russian or Hebrew that require characters not
   directly supported by the PDF specification, the best method is to embed an appropriate
   OpenType or Type 1 font using the LINK element. Provided the font contains the character,
   and the "embed" attributes is left at it's default values of "true", the characters should
   display correctly.
  </p>
  <p>
   Right-to-left languages (arabic, hebrew, syriac and urdu) are supported. The "direction"
   attribute controls the overall flow of the text and defaults to "rtl" for these languages, and
   can also be set manually. The "unicode-bidi" CSS property is not supported, so for further
   control it is necessary to embed the correct byte-order marks in the text, eg
   <code>&amp;#x202b;</code>.
  </p>
  <p>
   Every element in the document can have a language set using the "lang" attribute, which defaults
   to the current locale of the PDF generation process.  This attribute affects a few things - the
   style of quote substitution if the "requote" attribute is true, the type of currency format to
   use when a "currency()" formatter is used with graphs, default text direction, default font
   (if the language is Chinese, Japanese or Korean) and default page size - for
   <code>en_US</code>, <code>en_CA</code> and <code>fr_CA</code> the default is Letter, for
   everyone else it's A4. 
  </p>
  <p>
   Examples would be "de" for German and "en_GB" for British English.  Generally it is
   enough to set the "lang" attribute of the <code>&lt;pdf&gt;</code> element, which sets the
   language for the entire document.
  </p>
  <p>
   When creating documents from JSP pages, remember to set the character set to match the
   <code>&lt;?xml?&gt;</code> declaration. This also applies to pages included via the
   <code>&lt;jsp:include&gt;</code> method. The following examples are all valid:
  </p>
  <pre class="sexample">
  &lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
  &lt;%@ page language="java" contentType="text/xml"%&gt;
  &lt;!-- document follows in ISO-8859-1 --&gt; </pre>
  <pre class="sexample">
  &lt;?xml version="1.0"?&gt;
  &lt;%@ page language="java" contentType="text/xml; charset=UTF-8"%&gt;
  &lt;!-- document follows in UTF-8 --&gt; </pre>
  <pre class="sexample">
  &lt;?xml version="1.0" encoding="ShiftJIS"?&gt;
  &lt;%@ page language="java" contentType="text/xml; charset=ShiftJIS"%&gt;
  &lt;!-- document follows in Shift JIS --&gt; </pre>
  <p>
   Word and line-breaking rules for east-asian text follow the rules outlined in css-text-3.
   The <code>line-break</code> and <code>word-break</code> CSS properties are available as
   of release 1.1.63 (although the 'break-word' value of word-break is not supported). If these
   properties are unset, for compatibility with previous releases we default to the behaviour
   prior to 1.1.62 However if either is specified, the other will default to "normal". In addition,
   when the line-break property is set to "loose" or "normal", the language of the content
   will also affect the algorithm: as defined in css-text-3, text in Japanese or Chinese is
   split differently. Some examples:
  </p>
  <pre class="example">
   <i>// legacy line break behaviour</i>
   &lt;body&gt; ... &lt;/body&gt;

   <i>// line-break and word-break both set to "normal"</i>
   &lt;body style="word-break: normal"&gt; ... &lt;/body&gt;

   <i>// line-break set to loose, word-break set to "normal"</i>
   &lt;body style="line-break: loose"&gt; ... &lt;/body&gt;

   <i>// line-break set to loose, word-break set to "normal", and the special rules
   // for breaking Japanese characters defined in css-text-3 will be applied</i>
   &lt;body lang="ja" style="line-break: loose"&gt; ... &lt;/body&gt;

   <i>// the special value of "-bfo-legacy" can be used to reset the behaviour to 1.1.62
   // and earlier</i>
   &lt;body style="line-break: -bfo-legacy; word-break: -bfo-legacy"&gt; ... &lt;/body&gt;
  </pre>

  <pbr/>

  <h1 id="problems">Problems, Limitations and Future Direction</h1>
  <p>
   Several changes are planned for the next release, listed here in no particular
   order. We'd greatly appreciate additions or feedback on this list.
  </p>
  <ul>
   <li>The collapsing border model for tables needs to be implemented</li>
   <li>Running headers and footers are planned</li>
   <li>
    We plan to support "subpages" - dividing a page up into smaller sections like columns
    or quarters.
   </li>
  </ul>

  <p>
   Following is a list of known problems and limitations with the generator.
  </p>

  <h3>Limit on nesting the "overflow" attribute</h3>
  <p>
   Due to the way the "overflow" attribute is implemented and to limitations in the
   PostScript language, elements with the "overflow" attribute set to "hidden" shouldn't
   be nested more than 12 deep for compatibility with Acrobat 4.0, or 28 deep for Acrobat
   5.0 or later
  </p>

  <h3>Differences with CSS2 specification</h3>
  <p>
   For those that take specification compliance seriously, here is a list of the
   differences between the CSS2 specification and our implementation of it.
   Numbers refer to the section of the spec at <a
   href="http://http://www.w3.org/TR/REC-CSS2">http://http://www.w3.org/TR/REC-CSS2</a>.
   Over time the length of this list will shorten as we head towards full CSS2
   compliance.
  </p>
  <pre font-size="8pt">
  4.1.5  At rules (like @import or @charset) are not supported
  4.2    Parsing errors throw an error, and are not ignored.
  5.11   Only the :lang and :first-child (and the custom :last-child) pseudo selectors are used.
  7.     Media types are not used (we've only got the one media - PDF)
  8.5.3  Border style - double, groove, ridge, inset and outset are not used
  9.2.5  The "display" property defaults to "block", not "inline".
  9.4    "bottom" and "right" aren't used for positioning, only "top" and "left"
  9.9.1  "z-index" isn't supported. Later elements will always be drawn over earlier ones.
  9.10   Changing text-direction in the middle of a word won't work. Ensure there is always
         a space between phrases with different directions.
  10.4   max-width is ignored.
  10.7   max-height is ignored
  11.1.1 The clip rectangle value is always "auto"
  12.    The generated content section is pretty different. We don't use this
         method for inserting quotes around text or numbers before lists. The way we do
         it is shown in the "lists.xml" example.
  13.1   We don't use the @page rule.
  13.2.3 We don't do the crop marks.
  13.3   The "page-break" attributes are only recognised on elements that are the direct
         child of the BODY element (the exception to this is the TR tag, which recognises
	 it when these attributes is set to "join"). All elements other than P, PRE, H1-H4,
	 BLOCKQUOTE and TABLE have the "page-break-inside" attribute set to "avoid".
  13.3.2 Named pages are not used.
  15.2.4 font-size-adjust is ignored.
  14.2.1 background-attachment doesn't apply to PDF
  15.3   We use a much simpler method for selecting fonts - you either embed it or you don't!
  16.3   overline and blink are not valid text-decorations
  16.4   text-shadow is ignored
  16.5   word-spacing isn't used (see justification-ratio though)
  17.6   The collapsing border model is not supported, and borders are always drawn around empty cells.
  18.    User interface doesn't apply to PDF
  19.    Aural style sheets doesn't apply to PDF
  </pre>

  <h1 id="reference">Reference Section</h1>

  <h2 page-break-before="always" id="refcolor">Named Colors</h2>
  <p page-break-after="avoid">
   The following named colors can be used in the Report Generator.
   Their equivalent RGB values are listed below.
  </p>
  <table fake="true" id="colortable" width="100%">
    <tr>
      <td class="light" background-color="white">white<br/>#FFFFFF</td>
      <td class="light" background-color="whitesmoke">whitesmoke<br/>#F5F5F5</td>
      <td class="light" background-color="ghostwhite">ghostwhite<br/>#F8F8FF</td>  
      <td class="light" background-color="snow">snow<br/>#FFFAFA</td>
      <td class="light" background-color="gainsboro">gainsboro<br/>#DCDCDC</td>
    </tr>
    <tr>
      <td class="light" background-color="lavender">lavender<br/>#E6E6FA</td>
      <td class="light" background-color="aliceblue">aliceblue<br/>#F0F8FF</td>
      <td class="light" background-color="lavenderblush">lavenderblush<br/>#FFF0F5</td>
      <td class="light" background-color="seashell">seashell<br/>#FFF5EE</td>
      <td class="light" background-color="lightcyan">lightcyan<br/>#E0FFFF</td>
    </tr>
    <tr>
      <td class="light" background-color="azure">azure<br/>#F0FFFF</td>
      <td class="light" background-color="floralwhite">floralwhite<br/>#FFFAF0</td>
      <td class="light" background-color="oldlace">oldlace<br/>#FDF5E6</td>
      <td class="light" background-color="mintcream">mintcream<br/>#F5FFFA</td>
      <td class="light" background-color="honeydew">honeydew<br/>#F0FFF0</td>
    </tr>
    <tr>
      <td class="light" background-color="linen">linen<br/>#FAF0E6</td>
      <td class="light" background-color="ivory">ivory<br/>#FFF0F0</td>
      <td class="light" background-color="lightyellow">lightyellow<br/>#FFFFE0</td>
      <td class="light" background-color="beige">beige<br/>#F5F5DC</td>
      <td class="light" background-color="antiquewhite">antiquewhite<br/>#FAEBD7</td>
    </tr>
    <tr>
      <td class="light" background-color="cornsilk">cornsilk<br/>#FFF8DC</td>
      <td class="light" background-color="lemonchiffon">lemonchiffon<br/>#FFFACD</td>
      <td class="light" background-color="lightgoldenrodyellow">lightgoldenrodyellow<br/>#FAFAD2</td>
      <td class="light" background-color="mistyrose">mistyrose<br/>#FFE4E1</td>
      <td class="light" background-color="bisque">bisque<br/>#FFE4C4</td>
    </tr>
    <tr>
      <td class="light" background-color="papayawhip">papayawhip<br/>#FFEFD5</td>
      <td class="light" background-color="blanchedalmond">blanchedalmond<br/>#FFFFCD</td>
      <td class="light" background-color="peachpuff">peachpuff<br/>#FFEFD5</td>
      <td class="light" background-color="palegoldenrod">palegoldenrod<br/>#EEE8AA</td>
      <td class="light" background-color="wheat">wheat<br/>#F5DEB3</td>
    </tr>
    <tr>
      <td class="light" background-color="moccasin">moccasin<br/>#FFE4B5</td>
      <td class="light" background-color="navajowhite">navajowhite<br/>#FFDEAD</td>
      <td class="light" background-color="khaki">khaki<br/>#F0E68C</td>
      <td class="light" background-color="yellow">yellow<br/>#FFFF00</td>
      <td class="light" background-color="gold">gold<br/>#FFD700</td>
    </tr>
    <tr>
      <td class="light" background-color="goldenrod">goldenrod<br/>#DAA520</td>
      <td class="light" background-color="darkkhaki">darkkhaki<br/>#BDB76B</td>
      <td class="light" background-color="tan">tan<br/>#D2B48C</td>
      <td class="light" background-color="peru">peru<br/># CD853F</td>
      <td class="light" background-color="darkgoldenrod">darkgoldenrod<br/>#B8860B</td>
    </tr>
    <tr>
      <td class="light" background-color="rosybrown">rosybrown<br/>#BC8F8F</td>
      <td class="light" background-color="burlywood">burlywood<br/>#DEB887</td>
      <td class="light" background-color="sandybrown">sandybrown<br/>#F4A460</td>
      <td class="dark" background-color="saddlebrown">saddlebrown<br/>#8B4513</td>
      <td class="light" background-color="lightsalmon">lightsalmon<br/>#FFA07A</td>
    </tr>
    <tr>
      <td class="light" background-color="salmon">salmon<br/>#FA8072</td>
      <td class="light" background-color="coral">coral<br/>#FF7F50</td>
      <td class="light" background-color="peachpuff">peachpuff<br/>#FFEFD5</td>
      <td class="light" background-color="darksalmon">darksalmon<br/>#E9967A</td>
      <td class="light" background-color="lightcoral">lightcoral<br/>#F08080</td>
    </tr>
    <tr>
      <td class="light" background-color="darkorange">darkorange<br/>#FF8C00</td>
      <td class="light" background-color="orange">orange<br/>#FFA500</td>
      <td class="light" background-color="mistyrose">mistyrose<br/>#FFE4E1</td>
      <td class="light" background-color="lightpink">lightpink<br/>#FFB6C1</td>
      <td class="light" background-color="pink">pink<br/>#FFC0CB</td>
    </tr>
    <tr>
      <td class="light" background-color="hotpink">hotpink<br/>#FF69B4</td>
      <td class="light" background-color="palevioletred">palevioletred<br/>#DB7093</td>
      <td class="dark" background-color="mediumvioletred">mediumvioletred<br/>#C71585</td>
      <td class="light" background-color="thistle">thistle<br/>#D8BFD8</td>
      <td class="light" background-color="plum">plum<br/>#DDA0DD</td>
    </tr>
    <tr>
      <td class="light" background-color="mediumorchid">mediumorchid<br/>#BA55D3</td>
      <td class="light" background-color="mediumpurple">mediumpurple<br/>#9370DB</td>
      <td class="dark" background-color="darkmagenta">darkmagenta<br/>#8B008B</td>
      <td class="dark" background-color="navy">navy<br/>#000080</td>
      <td class="light" background-color="mediumslateblue">mediumslateblue<br/>#7B68EE</td>
    </tr>
    <tr>
      <td class="light" background-color="cornflowerblue">cornflowerblue<br/>#6495ED</td>
      <td class="dark" background-color="mediumblue">mediumblue<br/>#0000CD</td>
      <td class="light" background-color="deepskyblue">deepskyblue<br/>#00BFFF</td>
      <td class="light" background-color="lightskyblue">lightskyblue<br/>#87CEFA</td>
      <td class="light" background-color="powderblue"> powderblue<br/>#B0E0E6</td>
    </tr>  
    <tr>
      <td class="light" background-color="skyblue">skyblue<br/>#87CEEB</td>
      <td class="light" background-color="lightblue">lightblue<br/>#ADD8E6</td>
      <td class="dark" background-color="darkcyan">darkcyan<br/>#008B8B</td>
      <td class="light" background-color="cadetblue">cadetblue<br/>#5F9EA0</td>
      <td class="light" background-color="steelblue">steelblue<br/>#4682B4</td>
    </tr>
    <tr>
      <td class="light" background-color="lightsteelblue">lightsteelblue<br/>#B0C4DE</td>
      <td class="dark" background-color="teal">teal<br/>#008080</td>
      <td class="light" background-color="lightseagreen">lightseagreen<br/># 20B2AA</td>
      <td class="light" background-color="mediumaquamarine">mediumaquamarine<br/>#66CDAA</td>
      <td class="light" background-color="darkseagreen">darkseagreen<br/>#8FBC8F</td>
    </tr>  
    <tr>
      <td class="light" background-color="darkturquoise">darkturquoise<br/># 00CED1</td>
      <td class="light" background-color="mediumturquoise">mediumturquoise<br/>#48D1CC</td>
      <td class="light" background-color="turquoise">turquoise<br/>#40E0D0</td>
      <td class="light" background-color="paleturquoise">paleturquoise<br/>#AFEEEE</td>
      <td class="light" background-color="aquamarine">aquamarine<br/>#7FFFD4</td>
    </tr>  
    <tr>
      <td class="light" background-color="aqua">aqua<br/># 00FFFF</td>
      <td class="light" background-color="cyan">cyan<br/>#00FFFF</td>
      <td class="light" background-color="lightcyan">lightcyan<br/>#E0FFFF</td>
      <td class="light" background-color="mediumspringgreen">mediumspringgreen<br/>#00FA9A</td>
      <td class="light" background-color="springgreen">springgreen<br/>#00FF7F</td>
    </tr>
    <tr>
      <td class="light" background-color="greenyellow">greenyellow<br/>#ADFF2F</td>
      <td class="light" background-color="lawngreen">lawngreen<br/>#7CFC00</td>
      <td class="light" background-color="lime">lime<br/>#00FF00</td>
      <td class="light" background-color="limegreen">limegreen<br/>#32CD32</td>
      <td class="light" background-color="chartreuse">chartreuse<br/>#7FFF00</td>
    </tr>
    <tr>
      <td class="light" background-color="lightgreen">lightgreen<br/>#90EE90</td>
      <td class="light" background-color="palegreen">palegreen<br/>#98FB98</td>
      <td class="light" background-color="yellowgreen">yellowgreen<br/>#9ACD32</td>
      <td class="light" background-color="lightgrey">lightgrey<br/>#D3D3D3</td>
      <td class="light" background-color="gainsboro">gainsboro<br/>#DCDCDC</td>
    </tr> 
    <tr>
      <td class="light" background-color="silver">silver<br/>#C0C0C0</td>
      <td class="light" background-color="darkgray">darkgray<br/>#A9A9A9</td>
      <td class="light" background-color="gray">gray<br/>#808080</td>
      <td class="dark" background-color="black">black<br/>#000000</td>
      <td class="light" background-color="indianred">indianred<br/>#CD5C5C</td>
    </tr>
    <tr>
      <td class="dark" background-color="tomato">tomato<br/>#FD6347</td>
      <td class="dark" background-color="orangered">orangered<br/>#FF4500</td>
      <td class="dark" background-color="red">red<br/>#FF0000</td>
      <td class="dark" background-color="maroon">maroon<br/>#800000</td>
      <td class="dark" background-color="darkred">darkred<br/>#8B0000</td>
    </tr>
    <tr>
      <td class="dark" background-color="crimson">crimson<br/>#DC143C</td>
      <td class="dark" background-color="deeppink">deeppink<br/>#FF1493</td>
      <td class="dark" background-color="brown">brown<br/>#A52A2A</td>
      <td class="dark" background-color="chocolate">chocolate<br/>#D2691E</td>
      <td class="dark" background-color="sienna">sienna<br/>#A0522D</td>
    </tr>
    <tr>
      <td class="dark" background-color="firebrick">firebrick<br/>#B22222</td>
      <td class="dark" background-color="magenta">magenta<br/>#FF00FF</td>
      <td class="dark" background-color="fuchsia">fuchsia<br/>#FF00FF</td>
      <td class="dark" background-color="violet">violet<br/>#EE82EE</td>
      <td class="dark" background-color="orchid">orchid<br/>#DA70D6</td>
    </tr>
    <tr>
      <td class="dark" background-color="indigo">indigo<br/>#4B0082</td>
      <td class="dark" background-color="slateblue">slateblue<br/>#6A5ACD</td>
      <td class="dark" background-color="darkslateblue">darkslateblue<br/>#483D8B</td>
      <td class="dark" background-color="midnightblue">midnightblue<br/>#191970</td>
      <td class="dark" background-color="darkblue">darkblue<br/>#00008B</td>
    </tr>
    <tr>
      <td class="dark" background-color="blue">blue<br/>#0000FF</td>
      <td class="dark" background-color="royalblue">royalblue<br/>#4169E1</td>
      <td class="light" background-color="dodgerblue">dodgerblue<br/>#1E90FF</td>
      <td class="light" background-color="mediumseagreen">mediumseagreen<br/>#3CB371</td>
      <td class="dark" background-color="seagreen">seagreen<br/>#2E8B57</td>
    </tr>
    <tr>
      <td class="dark" background-color="green">green<br/>#008000</td>
      <td class="dark" background-color="darkgreen">darkgreen<br/>#006400</td>
      <td class="dark" background-color="olive">olive<br/>#808000</td>
      <td class="dark" background-color="darkolivegreen">darkolivegreen<br/>#556B2F</td>
      <td class="dark" background-color="olivedrab">olivedrab<br/>#6B8E23</td>
    </tr>
    <tr>
      <td class="dark" background-color="forestgreen">forestgreen<br/>#228B22</td>
      <td class="dark" background-color="darkslategray">darkslategray<br/>#2F4F4F</td>
      <td class="dark" background-color="dimgray">dimgray<br/>#696969</td>
      <td class="dark" background-color="slategray">slategray<br/>#708090</td>
      <td class="light" background-color="lightslategray">lightslategray<br/>#778899</td>
    </tr>
  </table>

  <h2 page-break-before="always" id="refentity">Named Entities</h2>
  <p>
   The following named entities are understood by the Report Generator.
  </p>
  <table class="defntable">
   <thead><tr><th>Name</th><th>Symbol</th><th>CodePoint</th><th>Description</th></tr></thead>
   <tr>
    <td>zwnbsp</td>
    <td>&zwnbsp;</td>
    <td>U+feff</td>
    <td>zero width non breaking space. Best use NOBR instead.</td>
   </tr>
   <!--
   <tr>
    <td>zwsp</td>
    <td>&zwsp;</td>
    <td>U+200b</td>
    <td>zero width space</td>
   </tr>
   -->
   <tr>
    <td>nbsp</td>
    <td>&nbsp;</td>
    <td>U+00a0</td>
    <td>no-break space = non-breaking space ISOnum</td>
   </tr>
   <tr>
    <td>iexcl</td>
    <td>&iexcl;</td>
    <td>U+00a1</td>
    <td>inverted exclamation mark ISOnum</td>
   </tr>
   <tr>
    <td>cent</td>
    <td>&cent;</td>
    <td>U+00a2</td>
    <td>cent sign ISOnum</td>
   </tr>
   <tr>
    <td>pound</td>
    <td>&pound;</td>
    <td>U+00a3</td>
    <td>pound sign ISOnum</td>
   </tr>
   <tr>
    <td>curren</td>
    <td>&curren;</td>
    <td>U+00a4</td>
    <td>currency sign ISOnum</td>
   </tr>
   <tr>
    <td>yen</td>
    <td>&yen;</td>
    <td>U+00a5</td>
    <td>yen sign = yuan sign ISOnum</td>
   </tr>
   <tr>
    <td>brvbar</td>
    <td>&brvbar;</td>
    <td>U+00a6</td>
    <td>broken bar = broken vertical bar ISOnum</td>
   </tr>
   <tr>
    <td>sect</td>
    <td>&sect;</td>
    <td>U+00a7</td>
    <td>section sign ISOnum</td>
   </tr>
   <tr>
    <td>uml</td>
    <td>&uml;</td>
    <td>U+00a8</td>
    <td>diaeresis = spacing diaeresis ISOdia</td>
   </tr>
   <tr>
    <td>copy</td>
    <td>&copy;</td>
    <td>U+00a9</td>
    <td>copyright sign ISOnum</td>
   </tr>
   <tr>
    <td>ordf</td>
    <td>&ordf;</td>
    <td>U+00aa</td>
    <td>feminine ordinal indicator ISOnum</td>
   </tr>
   <tr>
    <td>laquo</td>
    <td>&laquo;</td>
    <td>U+00ab</td>
    <td>left-pointing double angle quotation mark = left pointing guillemet ISOnum</td>
   </tr>
   <tr>
    <td>not</td>
    <td>&not;</td>
    <td>U+00ac</td>
    <td>not sign = discretionary hyphen ISOnum</td>
   </tr>
   <tr>
    <td>shy</td>
    <td>-</td>
    <td>U+00ad</td>
    <td>soft hyphen = discretionary hyphen ISOnum. This character is used in the Unicode (as opposed to the HTML sense), which means it's only displayed if a word break occurs at the specified position.</td>
   </tr>
   <tr>
    <td>reg</td>
    <td>&reg;</td>
    <td>U+00ae</td>
    <td>registered sign = registered trade mark sign ISOnum</td>
   </tr>
   <tr>
    <td>macr</td>
    <td>&macr;</td>
    <td>U+00af</td>
    <td>macron = spacing macron = overline = APL overbar ISOdia</td>
   </tr>
   <tr>
    <td>deg</td>
    <td>&deg;</td>
    <td>U+00b0</td>
    <td>degree sign ISOnum</td>
   </tr>
   <tr>
    <td>plusmn</td>
    <td>&plusmn;</td>
    <td>U+00b1</td>
    <td>plus-minus sign = plus-or-minus sign ISOnum</td>
   </tr>
   <tr>
    <td>sup2</td>
    <td>&sup2;</td>
    <td>U+00b2</td>
    <td>superscript two = superscript digit two = squared ISOnum</td>
   </tr>
   <tr>
    <td>sup3</td>
    <td>&sup3;</td>
    <td>U+00b3</td>
    <td>superscript three = superscript digit three = cubed ISOnum</td>
   </tr>
   <tr>
    <td>acute</td>
    <td>&acute;</td>
    <td>U+00b4</td>
    <td>acute accent = spacing acute ISOdia</td>
   </tr>
   <tr>
    <td>micro</td>
    <td>&micro;</td>
    <td>U+00b5</td>
    <td>micro sign ISOnum</td>
   </tr>
   <tr>
    <td>para</td>
    <td>&para;</td>
    <td>U+00b6</td>
    <td>pilcrow sign = paragraph sign ISOnum</td>
   </tr>
   <tr>
    <td>middot</td>
    <td>&middot;</td>
    <td>U+00b7</td>
    <td>middle dot = Georgian comma = Greek middle dot ISOnum</td>
   </tr>
   <tr>
    <td>cedil</td>
    <td>&cedil;</td>
    <td>U+00b8</td>
    <td>cedilla = spacing cedilla ISOdia</td>
   </tr>
   <tr>
    <td>sup1</td>
    <td>&sup1;</td>
    <td>U+00b9</td>
    <td>superscript one = superscript digit one ISOnum</td>
   </tr>
   <tr>
    <td>ordm</td>
    <td>&ordm;</td>
    <td>U+00ba</td>
    <td>masculine ordinal indicator ISOnum</td>
   </tr>
   <tr>
    <td>raquo</td>
    <td>&raquo;</td>
    <td>U+00bb</td>
    <td>right-pointing double angle quotation mark = right pointing guillemet ISOnum</td>
   </tr>
   <tr>
    <td>frac14</td>
    <td>&frac14;</td>
    <td>U+00bc</td>
    <td>vulgar fraction one quarter = fraction one quarter ISOnum</td>
   </tr>
   <tr>
    <td>frac12</td>
    <td>&frac12;</td>
    <td>U+00bd</td>
    <td>vulgar fraction one half = fraction one half ISOnum</td>
   </tr>
   <tr>
    <td>frac34</td>
    <td>&frac34;</td>
    <td>U+00be</td>
    <td>vulgar fraction three quarters = fraction three quarters ISOnum</td>
   </tr>
   <tr>
    <td>iquest</td>
    <td>&iquest;</td>
    <td>U+00bf</td>
    <td>inverted question mark = turned question mark ISOnum</td>
   </tr>
   <tr>
    <td>Agrave</td>
    <td>&Agrave;</td>
    <td>U+00c0</td>
    <td>latin capital letter A with grave = latin capital letter A grave ISOlat1</td>
   </tr>
   <tr>
    <td>Aacute</td>
    <td>&Aacute;</td>
    <td>U+00c1</td>
    <td>latin capital letter A with acute ISOlat1</td>
   </tr>
   <tr>
    <td>Acirc</td>
    <td>&Acirc;</td>
    <td>U+00c2</td>
    <td>latin capital letter A with circumflex ISOlat1</td>
   </tr>
   <tr>
    <td>Atilde</td>
    <td>&Atilde;</td>
    <td>U+00c3</td>
    <td>latin capital letter A with tilde ISOlat1</td>
   </tr>
   <tr>
    <td>Auml</td>
    <td>&Auml;</td>
    <td>U+00c4</td>
    <td>latin capital letter A with diaeresis ISOlat1</td>
   </tr>
   <tr>
    <td>Aring</td>
    <td>&Aring;</td>
    <td>U+00c5</td>
    <td>latin capital letter A with ring above = latin capital letter A ring ISOlat1</td>
   </tr>
   <tr>
    <td>AElig</td>
    <td>&AElig;</td>
    <td>U+00c6</td>
    <td>latin capital letter AE = latin capital ligature AE ISOlat1</td>
   </tr>
   <tr>
    <td>Ccedil</td>
    <td>&Ccedil;</td>
    <td>U+00c7</td>
    <td>latin capital letter C with cedilla ISOlat1</td>
   </tr>
   <tr>
    <td>Egrave</td>
    <td>&Egrave;</td>
    <td>U+00c8</td>
    <td>latin capital letter E with grave ISOlat1</td>
   </tr>
   <tr>
    <td>Eacute</td>
    <td>&Eacute;</td>
    <td>U+00c9</td>
    <td>latin capital letter E with acute ISOlat1</td>
   </tr>
   <tr>
    <td>Ecirc</td>
    <td>&Ecirc;</td>
    <td>U+00ca</td>
    <td>latin capital letter E with circumflex ISOlat1</td>
   </tr>
   <tr>
    <td>Euml</td>
    <td>&Euml;</td>
    <td>U+00cb</td>
    <td>latin capital letter E with diaeresis ISOlat1</td>
   </tr>
   <tr>
    <td>Igrave</td>
    <td>&Igrave;</td>
    <td>U+00cc</td>
    <td>latin capital letter I with grave ISOlat1</td>
   </tr>
   <tr>
    <td>Iacute</td>
    <td>&Iacute;</td>
    <td>U+00cd</td>
    <td>latin capital letter I with acute ISOlat1</td>
   </tr>
   <tr>
    <td>Icirc</td>
    <td>&Icirc;</td>
    <td>U+00ce</td>
    <td>latin capital letter I with circumflex ISOlat1</td>
   </tr>
   <tr>
    <td>Iuml</td>
    <td>&Iuml;</td>
    <td>U+00cf</td>
    <td>latin capital letter I with diaeresis ISOlat1</td>
   </tr>
   <tr>
    <td>ETH</td>
    <td>&ETH;</td>
    <td>U+00d0</td>
    <td>latin capital letter ETH ISOlat1</td>
   </tr>
   <tr>
    <td>Ntilde</td>
    <td>&Ntilde;</td>
    <td>U+00d1</td>
    <td>latin capital letter N with tilde ISOlat1</td>
   </tr>
   <tr>
    <td>Ograve</td>
    <td>&Ograve;</td>
    <td>U+00d2</td>
    <td>latin capital letter O with grave ISOlat1</td>
   </tr>
   <tr>
    <td>Oacute</td>
    <td>&Oacute;</td>
    <td>U+00d3</td>
    <td>latin capital letter O with acute ISOlat1</td>
   </tr>
   <tr>
    <td>Ocirc</td>
    <td>&Ocirc;</td>
    <td>U+00d4</td>
    <td>latin capital letter O with circumflex ISOlat1</td>
   </tr>
   <tr>
    <td>Otilde</td>
    <td>&Otilde;</td>
    <td>U+00d5</td>
    <td>latin capital letter O with tilde ISOlat1</td>
   </tr>
   <tr>
    <td>Ouml</td>
    <td>&Ouml;</td>
    <td>U+00d6</td>
    <td>latin capital letter O with diaeresis ISOlat1</td>
   </tr>
   <tr>
    <td>times</td>
    <td>&times;</td>
    <td>U+00d7</td>
    <td>multiplication sign ISOnum</td>
   </tr>
   <tr>
    <td>Oslash</td>
    <td>&Oslash;</td>
    <td>U+00d8</td>
    <td>latin capital letter O with stroke = latin capital letter O slash ISOlat1</td>
   </tr>
   <tr>
    <td>Ugrave</td>
    <td>&Ugrave;</td>
    <td>U+00d9</td>
    <td>latin capital letter U with grave ISOlat1</td>
   </tr>
   <tr>
    <td>Uacute</td>
    <td>&Uacute;</td>
    <td>U+00da</td>
    <td>latin capital letter U with acute ISOlat1</td>
   </tr>
   <tr>
    <td>Ucirc</td>
    <td>&Ucirc;</td>
    <td>U+00db</td>
    <td>latin capital letter U with circumflex ISOlat1</td>
   </tr>
   <tr>
    <td>Uuml</td>
    <td>&Uuml;</td>
    <td>U+00dc</td>
    <td>latin capital letter U with diaeresis ISOlat1</td>
   </tr>
   <tr>
    <td>Yacute</td>
    <td>&Yacute;</td>
    <td>U+00dd</td>
    <td>latin capital letter Y with acute ISOlat1</td>
   </tr>
   <tr>
    <td>THORN</td>
    <td>&THORN;</td>
    <td>U+00de</td>
    <td>latin capital letter THORN ISOlat1</td>
   </tr>
   <tr>
    <td>szlig</td>
    <td>&szlig;</td>
    <td>U+00df</td>
    <td>latin small letter sharp s = ess-zed ISOlat1</td>
   </tr>
   <tr>
    <td>agrave</td>
    <td>&agrave;</td>
    <td>U+00e0</td>
    <td>latin small letter a with grave = latin small letter a grave ISOlat1</td>
   </tr>
   <tr>
    <td>aacute</td>
    <td>&aacute;</td>
    <td>U+00e1</td>
    <td>latin small letter a with acute ISOlat1</td>
   </tr>
   <tr>
    <td>acirc</td>
    <td>&acirc;</td>
    <td>U+00e2</td>
    <td>latin small letter a with circumflex ISOlat1</td>
   </tr>
   <tr>
    <td>atilde</td>
    <td>&atilde;</td>
    <td>U+00e3</td>
    <td>latin small letter a with tilde ISOlat1</td>
   </tr>
   <tr>
    <td>auml</td>
    <td>&auml;</td>
    <td>U+00e4</td>
    <td>latin small letter a with diaeresis ISOlat1</td>
   </tr>
   <tr>
    <td>aring</td>
    <td>&aring;</td>
    <td>U+00e5</td>
    <td>latin small letter a with ring above = latin small letter a ring ISOlat1</td>
   </tr>
   <tr>
    <td>aelig</td>
    <td>&aelig;</td>
    <td>U+00e6</td>
    <td>latin small letter ae = latin small ligature ae ISOlat1</td>
   </tr>
   <tr>
    <td>ccedil</td>
    <td>&ccedil;</td>
    <td>U+00e7</td>
    <td>latin small letter c with cedilla ISOlat1</td>
   </tr>
   <tr>
    <td>egrave</td>
    <td>&egrave;</td>
    <td>U+00e8</td>
    <td>latin small letter e with grave ISOlat1</td>
   </tr>
   <tr>
    <td>eacute</td>
    <td>&eacute;</td>
    <td>U+00e9</td>
    <td>latin small letter e with acute ISOlat1</td>
   </tr>
   <tr>
    <td>ecirc</td>
    <td>&ecirc;</td>
    <td>U+00ea</td>
    <td>latin small letter e with circumflex ISOlat1</td>
   </tr>
   <tr>
    <td>euml</td>
    <td>&euml;</td>
    <td>U+00eb</td>
    <td>latin small letter e with diaeresis ISOlat1</td>
   </tr>
   <tr>
    <td>igrave</td>
    <td>&igrave;</td>
    <td>U+00ec</td>
    <td>latin small letter i with grave ISOlat1</td>
   </tr>
   <tr>
    <td>iacute</td>
    <td>&iacute;</td>
    <td>U+00ed</td>
    <td>latin small letter i with acute ISOlat1</td>
   </tr>
   <tr>
    <td>icirc</td>
    <td>&icirc;</td>
    <td>U+00ee</td>
    <td>latin small letter i with circumflex ISOlat1</td>
   </tr>
   <tr>
    <td>iuml</td>
    <td>&iuml;</td>
    <td>U+00ef</td>
    <td>latin small letter i with diaeresis ISOlat1</td>
   </tr>
   <tr>
    <td>eth</td>
    <td>&eth;</td>
    <td>U+00f0</td>
    <td>latin small letter eth ISOlat1</td>
   </tr>
   <tr>
    <td>ntilde</td>
    <td>&ntilde;</td>
    <td>U+00f1</td>
    <td>latin small letter n with tilde ISOlat1</td>
   </tr>
   <tr>
    <td>ograve</td>
    <td>&ograve;</td>
    <td>U+00f2</td>
    <td>latin small letter o with grave ISOlat1</td>
   </tr>
   <tr>
    <td>oacute</td>
    <td>&oacute;</td>
    <td>U+00f3</td>
    <td>latin small letter o with acute ISOlat1</td>
   </tr>
   <tr>
    <td>ocirc</td>
    <td>&ocirc;</td>
    <td>U+00f4</td>
    <td>latin small letter o with circumflex ISOlat1</td>
   </tr>
   <tr>
    <td>otilde</td>
    <td>&otilde;</td>
    <td>U+00f5</td>
    <td>latin small letter o with tilde ISOlat1</td>
   </tr>
   <tr>
    <td>ouml</td>
    <td>&ouml;</td>
    <td>U+00f6</td>
    <td>latin small letter o with diaeresis ISOlat1</td>
   </tr>
   <tr>
    <td>divide</td>
    <td>&divide;</td>
    <td>U+00f7</td>
    <td>division sign ISOnum</td>
   </tr>
   <tr>
    <td>oslash</td>
    <td>&oslash;</td>
    <td>U+00f8</td>
    <td>latin small letter o with stroke, = latin small letter o slash ISOlat1</td>
   </tr>
   <tr>
    <td>ugrave</td>
    <td>&ugrave;</td>
    <td>U+00f9</td>
    <td>latin small letter u with grave ISOlat1</td>
   </tr>
   <tr>
    <td>uacute</td>
    <td>&uacute;</td>
    <td>U+00fa</td>
    <td>latin small letter u with acute ISOlat1</td>
   </tr>
   <tr>
    <td>ucirc</td>
    <td>&ucirc;</td>
    <td>U+00fb</td>
    <td>latin small letter u with circumflex ISOlat1</td>
   </tr>
   <tr>
    <td>uuml</td>
    <td>&uuml;</td>
    <td>U+00fc</td>
    <td>latin small letter u with diaeresis ISOlat1</td>
   </tr>
   <tr>
    <td>yacute</td>
    <td>&yacute;</td>
    <td>U+00fd</td>
    <td>latin small letter y with acute ISOlat1</td>
   </tr>
   <tr>
    <td>thorn</td>
    <td>&thorn;</td>
    <td>U+00fe</td>
    <td>latin small letter thorn with ISOlat1</td>
   </tr>
   <tr>
    <td>yuml</td>
    <td>&yuml;</td>
    <td>U+00ff</td>
    <td>latin small letter y with diaeresis ISOlat1</td>
   </tr>
   <tr>
    <td>OElig</td>
    <td>&OElig;</td>
    <td>U+0152</td>
    <td> latin capital ligature OE ISOlat2</td>
   </tr>
   <tr>
    <td>oelig</td>
    <td>&oelig;</td>
    <td>U+0153</td>
    <td> latin small ligature oe ISOlat2</td>
   </tr>
   <tr>
    <td>Scaron</td>
    <td>&Scaron;</td>
    <td>U+0160</td>
    <td> latin capital letter S with caron ISOlat2</td>
   </tr>
   <tr>
    <td>scaron</td>
    <td>&scaron;</td>
    <td>U+0161</td>
    <td> latin small letter s with caron ISOlat2</td>
   </tr>
   <tr>
    <td>Yuml</td>
    <td>&Yuml;</td>
    <td>U+0178</td>
    <td> latin capital letter Y with diaeresis ISOlat2</td>
   </tr>
   <tr>
    <td>circ</td>
    <td>&circ;</td>
    <td>U+02c6</td>
    <td> modifier letter circumflex accent ISOpub</td>
   </tr>
   <tr>
    <td>tilde</td>
    <td>&tilde;</td>
    <td>U+02dc</td>
    <td> small tilde ISOdia</td>
   </tr>
   <!--
   <tr>
    <td>ensp</td>
    <td>&ensp;</td>
    <td>U+2002</td>
    <td>en space ISOpub</td>
   </tr>
   <tr>
    <td>emsp</td>
    <td>&emsp;</td>
    <td>U+2003</td>
    <td>em space ISOpub</td>
   </tr>
   <tr>
    <td>thinsp</td>
    <td>&thinsp;</td>
    <td>U+2009</td>
    <td>thin space ISOpub</td>
   </tr>
   -->
   <tr>
    <td>zwnj</td>
    <td>&zwnj;</td>
    <td>U+200c</td>
    <td>zero width non-joiner NEW RFC 2070</td>
   </tr>
   <tr>
    <td>zwj</td>
    <td>&zwj;</td>
    <td>U+200d</td>
    <td>zero width joiner NEW RFC 2070</td>
   </tr>
   <tr>
    <td>lrm</td>
    <td>&lrm;</td>
    <td>U+200e</td>
    <td>left-to-right mark NEW RFC 2070</td>
   </tr>
   <tr>
    <td>rlm</td>
    <td>&rlm;</td>
    <td>U+200f</td>
    <td>right-to-left mark NEW RFC 2070</td>
   </tr>
   <tr>
    <td>ndash</td>
    <td>&ndash;</td>
    <td>U+2013</td>
    <td>en dash ISOpub</td>
   </tr>
   <tr>
    <td>mdash</td>
    <td>&mdash;</td>
    <td>U+2014</td>
    <td>em dash ISOpub</td>
   </tr>
   <tr>
    <td>lsquo</td>
    <td>&lsquo;</td>
    <td>U+2018</td>
    <td>left single quotation mark ISOnum</td>
   </tr>
   <tr>
    <td>rsquo</td>
    <td>&rsquo;</td>
    <td>U+2019</td>
    <td>right single quotation mark ISOnum</td>
   </tr>
   <tr>
    <td>sbquo</td>
    <td>&sbquo;</td>
    <td>U+201a</td>
    <td>single low-9 quotation mark NEW</td>
   </tr>
   <tr>
    <td>ldquo</td>
    <td>&ldquo;</td>
    <td>U+201c</td>
    <td>left double quotation mark ISOnum</td>
   </tr>
   <tr>
    <td>rdquo</td>
    <td>&rdquo;</td>
    <td>U+201d</td>
    <td>right double quotation mark ISOnum</td>
   </tr>
   <tr>
    <td>bdquo</td>
    <td>&bdquo;</td>
    <td>U+201e</td>
    <td>double low-9 quotation mark NEW</td>
   </tr>
   <tr>
    <td>dagger</td>
    <td>&dagger;</td>
    <td>U+2020</td>
    <td>dagger ISOpub</td>
   </tr>
   <tr>
    <td>Dagger</td>
    <td>&Dagger;</td>
    <td>U+2021</td>
    <td>double dagger ISOpub</td>
   </tr>
   <tr>
    <td>permil</td>
    <td>&permil;</td>
    <td>U+2030</td>
    <td>per mille sign ISOtech</td>
   </tr>
   <tr>
    <td>lsaquo</td>
    <td>&lsaquo;</td>
    <td>U+2039</td>
    <td>single left-pointing angle quotation mark ISO proposed</td>
   </tr>
   <tr>
    <td>rsaquo</td>
    <td>&rsaquo;</td>
    <td>U+203a</td>
    <td>single right-pointing angle quotation mark ISO proposed</td>
   </tr>
   <tr>
    <td>euro</td>
    <td>&euro;</td>
    <td>U+20ac</td>
    <td> euro sign NEW</td>
   </tr>
   <tr>
    <td>trade</td>
    <td>&trade;</td>
    <td>U+2122</td>
    <td>trade mark sign ISOnum</td>
   </tr>
   <tr>
    <td>fnof</td>
    <td>&fnof;</td>
    <td>U+0192</td>
    <td>latin small f with hook = function = florin ISOtech</td>
   </tr>
   <tr>
    <td>Alpha</td><td>&Alpha;</td>
    <td>U+0391</td>
    <td>greek capital letter alpha</td>
   </tr>
   <tr>
    <td>Beta</td><td>&Beta;</td>
    <td>U+0392</td>
    <td>greek capital letter beta</td>
   </tr>
   <tr>
    <td>Gamma</td><td>&Gamma;</td>
    <td>U+0393</td>
    <td>greek capital letter gamma ISOgrk3</td>
   </tr>
   <tr>
    <td>Delta</td><td>&Delta;</td>
    <td>U+0394</td>
    <td>greek capital letter delta ISOgrk3</td>
   </tr>
   <tr>
    <td>Epsilon</td><td>&Epsilon;</td>
    <td>U+0395</td>
    <td>greek capital letter epsilon</td>
   </tr>
   <tr>
    <td>Zeta</td><td>&Zeta;</td>
    <td>U+0396</td>
    <td>greek capital letter zeta</td>
   </tr>
   <tr>
    <td>Eta</td><td>&Eta;</td>
    <td>U+0397</td>
    <td>greek capital letter eta</td>
   </tr>
   <tr>
    <td>Theta</td><td>&Theta;</td>
    <td>U+0398</td>
    <td>greek capital letter theta ISOgrk3</td>
   </tr>
   <tr>
    <td>Iota</td><td>&Iota;</td>
    <td>U+0399</td>
    <td>greek capital letter iota</td>
   </tr>
   <tr>
    <td>Kappa</td><td>&Kappa;</td>
    <td>U+039a</td>
    <td>greek capital letter kappa</td>
   </tr>
   <tr>
    <td>Lambda</td><td>&Lambda;</td>
    <td>U+039b</td>
    <td>greek capital letter lambda ISOgrk3</td>
   </tr>
   <tr>
    <td>Mu</td><td>&Mu;</td>
    <td>U+039c</td>
    <td>greek capital letter mu</td>
   </tr>
   <tr>
    <td>Nu</td><td>&Nu;</td>
    <td>U+039d</td>
    <td>greek capital letter nu</td>
   </tr>
   <tr>
    <td>Xi</td><td>&Xi;</td>
    <td>U+039e</td>
    <td>greek capital letter xi ISOgrk3</td>
   </tr>
   <tr>
    <td>Omicron</td><td>&Omicron;</td>
    <td>U+039f</td>
    <td>greek capital letter omicron</td>
   </tr>
   <tr>
    <td>Pi</td><td>&Pi;</td>
    <td>U+03a0</td>
    <td>greek capital letter pi ISOgrk3</td>
   </tr>
   <tr>
    <td>Rho</td><td>&Rho;</td>
    <td>U+03a1</td>
    <td>greek capital letter rho</td>
   </tr>
   <tr>
    <td>Sigma</td><td>&Sigma;</td>
    <td>U+03a3</td>
    <td>greek capital letter sigma ISOgrk3</td>
   </tr>
   <tr>
    <td>Tau</td><td>&Tau;</td>
    <td>U+03a4</td>
    <td>greek capital letter tau</td>
   </tr>
   <tr>
    <td>Upsilon</td><td>&Upsilon;</td>
    <td>U+03a5</td>
    <td>greek capital letter upsilon ISOgrk3</td>
   </tr>
   <tr>
    <td>Phi</td><td>&Phi;</td>
    <td>U+03a6</td>
    <td>greek capital letter phi ISOgrk3</td>
   </tr>
   <tr>
    <td>Chi</td><td>&Chi;</td>
    <td>U+03a7</td>
    <td>greek capital letter chi</td>
   </tr>
   <tr>
    <td>Psi</td><td>&Psi;</td>
    <td>U+03a8</td>
    <td>greek capital letter psi ISOgrk3</td>
   </tr>
   <tr>
    <td>Omega</td><td>&Omega;</td>
    <td>U+03a9</td>
    <td>greek capital letter omega ISOgrk3</td>
   </tr>
   <tr>
    <td>alpha</td><td>&alpha;</td>
    <td>U+03b1</td>
    <td>greek small letter alpha ISOgrk3</td>
   </tr>
   <tr>
    <td>beta</td><td>&beta;</td>
    <td>U+03b2</td>
    <td>greek small letter beta ISOgrk3</td>
   </tr>
   <tr>
    <td>gamma</td><td>&gamma;</td>
    <td>U+03b3</td>
    <td>greek small letter gamma ISOgrk3</td>
   </tr>
   <tr>
    <td>delta</td><td>&delta;</td>
    <td>U+03b4</td>
    <td>greek small letter delta ISOgrk3</td>
   </tr>
   <tr>
    <td>epsilon</td><td>&epsilon;</td>
    <td>U+03b5</td>
    <td>greek small letter epsilon ISOgrk3</td>
   </tr>
   <tr>
    <td>zeta</td><td>&zeta;</td>
    <td>U+03b6</td>
    <td>greek small letter zeta ISOgrk3</td>
   </tr>
   <tr>
    <td>eta</td><td>&eta;</td>
    <td>U+03b7</td>
    <td>greek small letter eta ISOgrk3</td>
   </tr>
   <tr>
    <td>theta</td><td>&theta;</td>
    <td>U+03b8</td>
    <td>greek small letter theta ISOgrk3</td>
   </tr>
   <tr>
    <td>iota</td><td>&iota;</td>
    <td>U+03b9</td>
    <td>greek small letter iota ISOgrk3</td>
   </tr>
   <tr>
    <td>kappa</td><td>&kappa;</td>
    <td>U+03ba</td>
    <td>greek small letter kappa ISOgrk3</td>
   </tr>
   <tr>
    <td>lambda</td><td>&lambda;</td>
    <td>U+03bb</td>
    <td>greek small letter lambda ISOgrk3</td>
   </tr>
   <tr>
    <td>mu</td><td>&mu;</td>
    <td>U+03bc</td>
    <td>greek small letter mu ISOgrk3</td>
   </tr>
   <tr>
    <td>nu</td><td>&nu;</td>
    <td>U+03bd</td>
    <td>greek small letter nu ISOgrk3</td>
   </tr>
   <tr>
    <td>xi</td><td>&xi;</td>
    <td>U+03be</td>
    <td>greek small letter xi ISOgrk3</td>
   </tr>
   <tr>
    <td>omicron</td><td>&omicron;</td>
    <td>U+03bf</td>
    <td>greek small letter omicron NEW</td>
   </tr>
   <tr>
    <td>pi</td><td>&pi;</td>
    <td>U+03c0</td>
    <td>greek small letter pi ISOgrk3</td>
   </tr>
   <tr>
    <td>rho</td><td>&rho;</td>
    <td>U+03c1</td>
    <td>greek small letter rho ISOgrk3</td>
   </tr>
   <tr>
    <td>sigmaf</td><td>&sigmaf;</td>
    <td>U+03c2</td>
    <td>greek small letter final sigma ISOgrk3</td>
   </tr>
   <tr>
    <td>sigma</td><td>&sigma;</td>
    <td>U+03c3</td>
    <td>greek small letter sigma ISOgrk3</td>
   </tr>
   <tr>
    <td>tau</td><td>&tau;</td>
    <td>U+03c4</td>
    <td>greek small letter tau ISOgrk3</td>
   </tr>
   <tr>
    <td>upsilon</td><td>&upsilon;</td>
    <td>U+03c5</td>
    <td>greek small letter upsilon ISOgrk3</td>
   </tr>
   <tr>
    <td>phi</td><td>&phi;</td>
    <td>U+03c6</td>
    <td>greek small letter phi ISOgrk3</td>
   </tr>
   <tr>
    <td>chi</td><td>&chi;</td>
    <td>U+03c7</td>
    <td>greek small letter chi ISOgrk3</td>
   </tr>
   <tr>
    <td>psi</td><td>&psi;</td>
    <td>U+03c8</td>
    <td>greek small letter psi ISOgrk3</td>
   </tr>
   <tr>
    <td>omega</td><td>&omega;</td>
    <td>U+03c9</td>
    <td>greek small letter omega ISOgrk3</td>
   </tr>
   <tr>
    <td>thetasym</td><td>&thetasym;</td>
    <td>U+03d1</td>
    <td>greek small letter theta symbol NEW</td>
   </tr>
   <tr>
    <td>upsih</td><td>&upsih;</td>
    <td>U+03d2</td>
    <td>greek upsilon with hook symbol NEW</td>
   </tr>
   <tr>
    <td>piv</td><td>&piv;</td>
    <td>U+03d6</td>
    <td>greek pi symbol ISOgrk3</td>
   </tr>
   <tr>
    <td>bull</td><td>&bull;</td>
    <td>U+2022</td>
    <td>bullet = black small circle ISOpub </td>
   </tr>
   <tr>
    <td>hellip</td><td>&hellip;</td>
    <td>U+2026</td>
    <td>horizontal ellipsis = three dot leader ISOpub </td>
   </tr>
   <tr>
    <td>prime</td><td>&prime;</td>
    <td>U+2032</td>
    <td>prime = minutes = feet ISOtech</td>
   </tr>
   <tr>
    <td>Prime</td><td>&Prime;</td>
    <td>U+2033</td>
    <td>double prime = seconds = inches ISOtech</td>
   </tr>
   <tr>
    <td>oline</td><td>&oline;</td>
    <td>U+203e</td>
    <td>overline = spacing overscore NEW</td>
   </tr>
   <tr>
    <td>frasl</td><td>&frasl;</td>
    <td>U+2044</td>
    <td>fraction slash NEW</td>
   </tr>
   <tr>
    <td>weierp</td><td>&weierp;</td>
    <td>U+2118</td>
    <td>script capital P = power set = Weierstrass p ISOamso</td>
   </tr>
   <tr>
    <td>image</td><td>&image;</td>
    <td>U+2111</td>
    <td>blackletter capital I = imaginary part ISOamso</td>
   </tr>
   <tr>
    <td>real</td><td>&real;</td>
    <td>U+211c</td>
    <td>blackletter capital R = real part symbol ISOamso</td>
   </tr>
   <tr>
    <td>alefsym</td><td>&alefsym;</td>
    <td>U+2135</td>
    <td>alef symbol = first transfinite cardinal NEW</td>
   </tr>
   <tr>
    <td>larr</td><td>&larr;</td>
    <td>U+2190</td>
    <td>leftwards arrow ISOnum</td>
   </tr>
   <tr>
    <td>uarr</td><td>&uarr;</td>
    <td>U+2191</td>
    <td>upwards arrow ISOnum--></td>
   </tr>
   <tr>
    <td>rarr</td><td>&rarr;</td>
    <td>U+2192</td>
    <td>rightwards arrow ISOnum</td>
   </tr>
   <tr>
    <td>darr</td><td>&darr;</td>
    <td>U+2193</td>
    <td>downwards arrow ISOnum</td>
   </tr>
   <tr>
    <td>harr</td><td>&harr;</td>
    <td>U+2194</td>
    <td>left right arrow ISOamsa</td>
   </tr>
   <tr>
    <td>crarr</td><td>&crarr;</td>
    <td>U+21b5</td>
    <td>downwards arrow with corner leftwards = carriage return NEW</td>
   </tr>
   <tr>
    <td>lArr</td><td>&lArr;</td>
    <td>U+21d0</td>
    <td>leftwards double arrow ISOtech</td>
   </tr>
   <tr>
    <td>uArr</td><td>&uArr;</td>
    <td>U+21d1</td>
    <td>upwards double arrow ISOamsa</td>
   </tr>
   <tr>
    <td>rArr</td><td>&rArr;</td>
    <td>U+21d2</td>
    <td>rightwards double arrow ISOtech</td>
   </tr>
   <tr>
    <td>dArr</td><td>&dArr;</td>
    <td>U+21d3</td>
    <td>downwards double arrow ISOamsa</td>
   </tr>
   <tr>
    <td>hArr</td><td>&hArr;</td>
    <td>U+21d4</td>
    <td>left right double arrow ISOamsa</td>
   </tr>
   <tr>
    <td>forall</td><td>&forall;</td>
    <td>U+2200</td>
    <td>for all ISOtech</td>
   </tr>
   <tr>
    <td>part</td><td>&part;</td>
    <td>U+2202</td>
    <td>partial differential ISOtech </td>
   </tr>
   <tr>
    <td>exist</td><td>&exist;</td>
    <td>U+2203</td>
    <td>there exists ISOtech</td>
   </tr>
   <tr>
    <td>empty</td><td>&empty;</td>
    <td>U+2205</td>
    <td>empty set = null set = diameter ISOamso</td>
   </tr>
   <tr>
    <td>nabla</td><td>&nabla;</td>
    <td>U+2207</td>
    <td>nabla = backward difference ISOtech</td>
   </tr>
   <tr>
    <td>isin</td><td>&isin;</td>
    <td>U+2208</td>
    <td>element of ISOtech</td>
   </tr>
   <tr>
    <td>notin</td><td>&notin;</td>
    <td>U+2209</td>
    <td>not an element of ISOtech</td>
   </tr>
   <tr>
    <td>ni</td><td>&ni;</td>
    <td>U+220b</td>
    <td>contains as member ISOtech</td>
   </tr>
   <tr>
    <td>prod</td><td>&prod;</td>
    <td>U+220f</td>
    <td>n-ary product = product sign ISOamsb</td>
   </tr>
   <tr>
    <td>sum</td><td>&sum;</td>
    <td>U+2211</td>
    <td>n-ary sumation ISOamsb</td>
   </tr>
   <tr>
    <td>minus</td><td>&minus;</td>
    <td>U+2212</td>
    <td>minus sign ISOtech</td>
   </tr>
   <tr>
    <td>lowast</td><td>&lowast;</td>
    <td>U+2217</td>
    <td>asterisk operator ISOtech</td>
   </tr>
   <tr>
    <td>radic</td><td>&radic;</td>
    <td>U+221a</td>
    <td>square root = radical sign ISOtech</td>
   </tr>
   <tr>
    <td>prop</td><td>&prop;</td>
    <td>U+221d</td>
    <td>proportional to ISOtech</td>
   </tr>
   <tr>
    <td>infin</td><td>&infin;</td>
    <td>U+221e</td>
    <td>infinity ISOtech</td>
   </tr>
   <tr>
    <td>ang</td><td>&ang;</td>
    <td>U+2220</td>
    <td>angle ISOamso</td>
   </tr>
   <tr>
    <td>and</td><td>&and;</td>
    <td>U+2227</td>
    <td>logical and = wedge ISOtech</td>
   </tr>
   <tr>
    <td>or</td><td>&or;</td>
    <td>U+2228</td>
    <td>logical or = vee ISOtech</td>
   </tr>
   <tr>
    <td>cap</td><td>&cap;</td>
    <td>U+2229</td>
    <td>intersection = cap ISOtech</td>
   </tr>
   <tr>
    <td>cup</td><td>&cup;</td>
    <td>U+222a</td>
    <td>union = cup ISOtech</td>
   </tr>
   <tr>
    <td>int</td><td>&int;</td>
    <td>U+222b</td>
    <td>integral ISOtech</td>
   </tr>
   <tr>
    <td>there4</td><td>&there4;</td>
    <td>U+2234</td>
    <td>therefore ISOtech</td>
   </tr>
   <tr>
    <td>sim</td><td>&sim;</td>
    <td>U+223c</td>
    <td>tilde operator = varies with = similar to ISOtech</td>
   </tr>
   <tr>
    <td>cong</td><td>&cong;</td>
    <td>U+2245</td>
    <td>approximately equal to ISOtech</td>
   </tr>
   <tr>
    <td>asymp</td><td>&asymp;</td>
    <td>U+2248</td>
    <td>almost equal to = asymptotic to ISOamsr</td>
   </tr>
   <tr>
    <td>ne</td><td>&ne;</td>
    <td>U+2260</td>
    <td>not equal to ISOtech</td>
   </tr>
   <tr>
    <td>equiv</td><td>&equiv;</td>
    <td>U+2261</td>
    <td>identical to ISOtech</td>
   </tr>
   <tr>
    <td>le</td><td>&le;</td>
    <td>U+2264</td>
    <td>less-than or equal to ISOtech</td>
   </tr>
   <tr>
    <td>ge</td><td>&ge;</td>
    <td>U+2265</td>
    <td>greater-than or equal to ISOtech</td>
   </tr>
   <tr>
    <td>sub</td><td>&sub;</td>
    <td>U+2282</td>
    <td>subset of ISOtech</td>
   </tr>
   <tr>
    <td>sup</td><td>&sup;</td>
    <td>U+2283</td>
    <td>superset of ISOtech</td>
   </tr>
   <tr>
    <td>nsub</td><td>&nsub;</td>
    <td>U+2284</td>
    <td>not a subset of ISOamsn</td>
   </tr>
   <tr>
    <td>sube</td><td>&sube;</td>
    <td>U+2286</td>
    <td>subset of or equal to ISOtech</td>
   </tr>
   <tr>
    <td>supe</td><td>&supe;</td>
    <td>U+2287</td>
    <td>superset of or equal to ISOtech</td>
   </tr>
   <tr>
    <td>oplus</td><td>&oplus;</td>
    <td>U+2295</td>
    <td>circled plus = direct sum ISOamsb</td>
   </tr>
   <tr>
    <td>otimes</td><td>&otimes;</td>
    <td>U+2297</td>
    <td>circled times = vector product ISOamsb</td>
   </tr>
   <tr>
    <td>perp</td><td>&perp;</td>
    <td>U+22a5</td>
    <td>up tack = orthogonal to = perpendicular ISOtech</td>
   </tr>
   <tr>
    <td>sdot</td><td>&sdot;</td>
    <td>U+22c5</td>
    <td>dot operator ISOamsb</td>
   </tr>
   <tr>
    <td>lceil</td><td>&lceil;</td>
    <td>U+2308</td>
    <td>left ceiling = apl upstile ISOamsc </td>
   </tr>
   <tr>
    <td>rceil</td><td>&rceil;</td>
    <td>U+2309</td>
    <td>right ceiling ISOamsc </td>
   </tr>
   <tr>
    <td>lfloor</td><td>&lfloor;</td>
    <td>U+230a</td>
    <td>left floor = apl downstile ISOamsc </td>
   </tr>
   <tr>
    <td>rfloor</td><td>&rfloor;</td>
    <td>U+230b</td>
    <td>right floor ISOamsc </td>
   </tr>
   <tr>
    <td>lang</td><td>&lang;</td>
    <td>U+2329</td>
    <td>left-pointing angle bracket = bra ISOtech</td>
   </tr>
   <tr>
    <td>rang</td><td>&rang;</td>
    <td>U+232a</td>
    <td>right-pointing angle bracket = ket ISOtech</td>
   </tr>
   <tr>
    <td>loz</td><td>&loz;</td>
    <td>U+25ca</td>
    <td>lozenge ISOpub</td>
   </tr>
   <tr>
    <td>spades</td><td>&spades;</td>
    <td>U+2660</td>
    <td>black spade suit ISOpub</td>
   </tr>
   <tr>
    <td>clubs</td><td>&clubs;</td>
    <td>U+2663</td>
    <td>black club suit = shamrock ISOpub</td>
   </tr>
   <tr>
    <td>hearts</td><td>&hearts;</td>
    <td>U+2665</td>
    <td>black heart suit = valentine ISOpub</td>
   </tr>
   <tr>
    <td>diams</td><td>&diams;</td>
    <td>U+2666</td>
    <td>black diamond suit ISOpub</td>
   </tr>
  </table>

  <h2 page-break-before="always" id="reftags">Element and Attribute reference</h2>
  <p>
   In a future version of the documentation this section will contain a
   cross-referenced list of all the elements and attributes that can be used in
   the Report Generator.
  </p>
  <p>
   For now, the Element and Attribute reference information is online at <a
   href="http://bfo.com/products/report/docs/tags">http://bfo.com/
   products/report/docs/tags</a>.
  </p>

 </body>
</pdf>

